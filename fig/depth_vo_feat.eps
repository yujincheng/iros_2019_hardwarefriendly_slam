%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: i.pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: gaof
%%CreationDate: 19.2.27, 20:41:00
%%BoundingBox: -177 176 328 504
%%HiResBoundingBox: -176.1913 176.1914 327.7263 503.9176
%%CropBox: -176.1913 176.1914 327.7263 503.9176
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 0 -1 1 0
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 813 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2019-02-27T20:39:04+08:00"
   xmp:ModifyDate="2019-02-27T20:39:04+08:00"
   pdf:Producer="Microsoft: Print To PDF">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>gaof</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint æ¼flç¤ºæŒ⁄ç¨¿.pdf</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -503.918 translate
pgsv
[0 1 -1 0 327.726 0 ]ct
gsave
np
gsave
1.52588e-5 0 mo
1.52588e-5 503.918 li
327.726 503.918 li
327.726 0 li
cp
clp
gsave
-1.50348 9.35107 mo
327.776 9.35107 li
327.776 495.711 li
-1.50348 495.711 li
cp
eclp
-134.103 -21.0089 mo
826.017 -21.0089 li
826.017 519.111 li
-134.103 519.111 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
grestore
false sop
.167788 1 1 .0855116 cmyk
%ADOBeginSubsetFont: QJJAAA+CIDFont+F1 Initial
ct_T42Dict begin
-0.516 -0.348 1.262 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /QJJAAA+CIDFont+F1
Type42DictBegin
[<00010000000c000c000c000c4f532f329bef5a35000000cc000000606376
74203fba58ec0000012c000006886670676da1ea42ac000007b400000913
676c7966c25b221e0000a00800000f6c68656164f7d8b401000010c80000
0036686865610dbb06c00000110000000024686d74783b35054f00001124
00003c2a6c6f63619ea39c3600004d50000034fa6d61787027ea17610000
824c000000206e616d65bcc7fa7c0000826c000006b870726570f940ca73
00008924000016e1676469720000000000000000000000000003044a02bc
00050008059905330000011e05990533000003d000ba02000800020f0702
030404030204e0002affc000247b00000009000000004d53202000200000
20100600fe0001c4079e0226200001ff0000000003c0050e000000200014
0000079e0000fe930000000000000000000000810081009c00ab00b500ba
00c100ca00d300f3010a0060008500bf00e300ea00f200fb010001070115
011c01290000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe83056d000d03c000060017
0000fffaffe9fea9ffe90000050e000600170000fffaffe9fe93050e0017
0426000600170000fffaffe9ff12ffed050e00170426000600170000fffa
ffe9fe93feb8fece060b0010050e0006001002cbfffafff001edfffa023f
00060010ff36fffafff00287000600100000fffafff0079efeaffe9f0000
0000000000000000000000700072007500780079007a007b007d007e007f
008300860087008800890085007f0086008b008c008d008e008f00900091
00920093009400950096009700980099009a009b009c009d009e009f0092
00930094009b009c009e009e00960099009a009d009e00a200a600a900ac
00a200a300a400a500a700a800a900aa00ab00ac00ae00a300a500a700a8
00aa00ab00ac00ad00ae00a000a100a300a600a700a900aa00ac00ad00af
00af00b000b100b200b300b400b500af00af00b000b200b300b400b500b8
00c000b600b700b800b900ba00bb00bc00bd00be00bf00c000c100c200b9
00ba00bc00bd00bf00c000c100c200b600b700b800b900ba00bb00bc00bd
00be00bf00c000c100c200c000c100c200c300c400c500c600c700c800c9
00ca00cb00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb
00cc00cd00ce00cf00c300c400c500c600c700c800c900ca00cb00cc00cd
00ce00cf00c500c800c900ca00cb00ce00cf00d000d100d200d300d400d5
00d600d700d900db00de00df00e000e200e300ec00d000d100d200d300d4
00d500d600d700d800d900da00db00dd00de00df00e000e100e300e500e9
00ec00ed00d100d300d400d500d800d900da00dc00e000e100e800d000d1
00d400d600e000e4010800f5010200fb00ff0108008f0090009600920093
00990090009100970098009a009d00a400a600a700a800a900af009a00a2
00a300a700a900aa00ab00ac00ad00b000ad009b00aa00ab00ad00b0009a
00aa00ac00ad00ae00af00b100b900bb00bc00bd00be00c100c200c300c4
00c500c600c700c800c900ca00cb00ce00b300b400b500b600b700b800bc
00c200c500c800ca00cb00cd00ce00cf00d000c700b700b800b900bb00bc
00be00c600c700c800c900cb00cf00d000b200b600b700c200c400c500c6
00c700cb00cc00cd00ce00cf00d000d100d400d500d700d800d900da00db
00dc00de00df00e000e200e300e500e600d100d300d600d700d800da00db
00dc00dd00de00df00e000e100e200e300e400e500d100d200d400d500da
00db00dd00de00df00e000e100e200e600d200d300d400d700d800dd00de
00e000e100e200e300e400e500e600d200da00e100e900ea00ec00e800e9
00ea00eb00ec00ed00eb00e700ea00eb00ec00ed00e700e900ea00ec00ed
00ee00ef00f500ee00ef00f000f100f200f300f400f500f600ee00f000f2
00ef00f000f100f200f300f400f500f600ee00ef00f000f100f200f300f4
00f500f600f700f700f800f900fa00fb00fc00fd00f700f800f900fa00fb
00fd00f700f800f900fa00fb00fc00fd00fd00fe00ff0100010101020103
00fe010001010102010300fe00ff01000101010201030102010301040105
0106010701080109010a010c010d010e010f011001070104010501060107
01080109010a010b010d010e010f01100111010401050106010701080109
010a010b010c010d010e010f0110011101040105010601070109010e010f
011201130114011501170118011a011b011c011d011e011f012101220112
01130114011501170119011b011c011d011e012001210123012401250113
011401150116011701180119011a011b011c011d011f01200117011c011d
011e012001210129013001770129012b012e012f01300131013401350137
0139012b012d013001320134013a012e01300134013a014200500062006c
00fa05e802cc0114011400a000b100000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000005aa001500a0fff8ff42fea2fdbc03b6015401cc
0108010e00ff00f5006e014000a0055e006b0570fff60122fff10547ffec
04faffec0131fff4000a03a0036600b400e1044c007c40465f5e5d5c5b5a
59585554535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a
39383736352f2e2d2c2826252423221f181411100f0d0b0a090807060504
030201002c4523466020b02660b004262348482d2c452346236120b02661
b004262348482d2c45234660b0206120b04660b004262348482d2c452346
2361b0206020b02661b02061b004262348482d2c45234660b0406120b066
60b004262348482d2c4523462361b0406020b02661b04061b00426234848
2d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d4423
5920b0ed51582320b04d44235920b0042651582320b00d44235921212d2c
20204518684420b001602045b04676688a4560442d2c01b10b0a43234365
0a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228
453ab10200080d2d2c2045b00325456164b050515845441b2121592d2c20
45b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12c
c08a8cb8100062602b0c642364615c58b00361592d2c8a03458a8a87b011
2bb0292344b0297ae4182d2c4565b02c234445b02b23442d2c4b52584544
1b2121592d2c01b005251023208af500b0016023edec2d2c01b005251023
208af500b0016123edec2d2c01b0062510f500edec2d2c20b00160011020
3c003c2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c
6423648bb84000622d2c21b08051580c6423648bb82000621bb200402f2b
59b002602d2c21b0c051580c6423648bb81555621bb200802f2b59b00260
2d2c0c6423648bb84000626023212d2c4523456023456023456023766818
b08062202d2cb00426b00426b00425b0042545234520b003266062636820
b0032661658a2344442d2c2045b0005458b040442045b04061441b212159
2d2c45b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b
2121592d2c4b515820b0032545695358441b2121591b2121592d2c45b014
43b0006063b0016069442d2cb02f45442d2c452320458a60442d2c452345
60442d2c4b235158b90033ffe0b134201bb3330034005944442d2cb01643
58b00326458a586466b01f601b64b020606620581b21b04059b001615923
586559b02923442310b029e01b2121212121592d2cb0164358b004254564
b020606620581b21b04059b0016123586559b0292344b00425b007250820
58021b0359b0052510b004252046b0042523423cb0072510b006252046b0
0425b0016023423c2058011b0059b0052510b00425b029e0b0072510b006
25b029e0b00425b00725082058021b0359b00425b003254348b00625b003
25b0016043481b2159212121212121212d2cb0164358b004254564b02060
6620581b21b04059b0016123581b6559b0292344b00525b0082508205802
1b0359b0042510b005252046b0042523423cb00425b0072508b0072510b0
06252046b00425b0016023423c2058011b0059b0042510b00525b029e0b0
2920456544b0072510b00625b029e0b00525b00825082058021b0359b005
25b003254348b00425b0072508b00625b00325b0016043481b2159212121
212121212d2c02b00425202046b004252342b0052508b003254548212121
212d2c02b0032520b0042508b0022543482121212d2c452320451820b000
50205823652359236820b040505821b04059235865598a60442d2c4b5323
4b515a5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b
53234b515a58381b2121592d2cb000214b5458381b2121592d2cb0024354
58b0462b1b21212121592d2cb002435458b0472b1b212121592d2cb00243
5458b0482b1b21212121592d2cb002435458b0492b1b212121592d2c208a
08234b538a4b515a5823381b2121592d2c0020b200400325b0062649618b
3812342d2c014623466023466123201020468a61b8ff80628ab140408a70
4560683a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2c
b012004b014b54422d2cb1020042b123018851b1400188535a58b9100000
20885458b202010243604259b12401885158b920000040885458b2020202
436042b12401885458b2022002436042004b014b5258b202080243604259
1bb940000080885458b202040243604259b94000008063b80100885458b2
02080243604259b94000010063b80200885458b202100243604259b94000
020063b80400885458b202400243604259595959592d2c451868234b5158
2320452064b04050587c59688a6059442d2cb00016b00225b0022501b001
233e00b002233eb10102060cb00a236542b00b234201b001233f00b00223
3fb10102060cb006236542b0072342b00116012d2c20b82000628a602362
2d2cb0072558001b0159b0042510b00325b0022520b8ffff545821cd1bed
5921b006255cb006255a58b0092b5920b005254ab0042547b004254760b0
062547b0806361b00225b0005558b00325b00725496359b0082558001b01
59b00425b0062549b009255cb009255a58b0092b59b0072546b0806361b0
032520b0005558631b2159612320b0005558b080631b21b08059b0592bb0
06255c586959b00425202010b00048233ab0062658001b0159b0052658b0
03252f598a12233221212d2cb00625b00a2587b00625b009254ab0005358
b00625b00a251bb00925b0072559b00225b00225070cb005256323b00625
636020b94000040063535821b00426b00426b00a1bb94000040063655158
b0042665b0042665b00a1bb00426b00426b000b00325b003250b0d0ab009
2eb00725b007250b0d0ab00b2eb00525b0052507595920b0005558b00525
b0052587b00725b007250bb0092510b00b25b0092620b8ffff545821cd1b
ed59b00525b0052507b00825b00b254923b00625b0062587b00a2510b00b
25c15920b00051b800522378b00161b00225b00725b0072507b00a25b00d
254961b08062b00525b005250bb00a252338b00625b0062587b00825b008
250bb00a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ff
a723792121212121212121212121212d2c23b0005458b9400000001bb900
004000598ab0005458b9400000001bb90000400059b05b2b2d2c08b00054
58b9400000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940
0000001bb90000400059b05b2b2d2cb00426b00426080db00426b0042608
0db05b2b2d000001000000063852180eb4f65f0f3cf50019080000000000
bbeb7ccc00000000d6c5b460fbdafd350a1a085000010009000200000000
0000000100000600fe0001c40aa0fbdafa860a1a00010000000000000000
0000000000000399040e0000000000000000000001cf0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000003ac008d00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000006fe008d00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000442008d
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000044b004b
0000000000000000000000000407004a0000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000001f7006b0000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000044b007e00000000000000000000000000000000000000000000
0000044d0048000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000002d8007e000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000002c6
001700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000044b007900000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000003ad00200000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000273003b
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000038200790000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000>
<0000009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e009e009e009e009e009e009e
009e009e009e009e009e009e009e009e009e013401340134013401340134
013401340134013401340134013401340134013401340134013401340134
01340134013401340134013401340134013401f701f701f701f701f701f7
01f701f701f701f701f701f701f701f701f701f701f701f701f702730273
027302730273027302730273027302730273027302730273027302730273
027302730273027302730273027302730273027302730273027302730273
027302730273027302730273027302730273027302730273027302730273
027302730273027302730273027302730273027302730273027302730273
027302730273027302730273027302730273027302730273027302730273
027302730273027302730273027302730273027302730273027302730273
027302730273027302730273027302730273027302730273027302730273
027302730273027302730273027302730273027302730273027302730273
027302730273027302730273027302730273027302730273027302730273
027302730273027302730273027302730273027302730273027302730273
027302730273027302730273027302730273027302730273027302730273
027302730273027302730273027302730273027302730273027302730273
0273027302730273027302730273027302730273027302730273030e030e
030e030e03d903d903d903d903d903d903d903d903d903d903d903d903d9
03d903d903d903d903d903d903d903d903d903d903d903d903d903d903d9
03d903d903d903d903d903d903d903d903d903d903d903d903d903d903d9
03d903d903d903d903d903d903d903d903d903d903d903d903d903d903d9
03d903d903d903d903d9042d042d042d042d042d042d042d042d042d042d
042d042d042d042d042d042d042d042d042d042d042d042d042d042d042d
04b304b304b304b304b304b304b305250525052505250525052505250525
052505250525052505250525052505a305a305a305a305a305a305a305a3
05a305a305a305a305a305a3063906390639063906390639063906390639
063906390639063906390639063906390639063906390639063906390639
06390639063906b406b406b406b406b406b406b406b406b406b406b406b4
06b406b406b406b406b40742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207420742
074207420742074207420742074207420742074207420742074207670767
076707670767076707670767076707670767076707670767076707670767
076707670767076707670767076707670767076707670767076707670767
0767076707670767076707b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b607b607b607b607b607b607b607b607b607b607b607b607b607b607b6
07b60000000100001a7c004f00050000000000020010002f006000000cf8
16e1000000000000000e00ae000000030000000002100000000000030000
0007007602100001000000000000010802860001000000000003000b038e
0001000000000004000b038e0001000000000006000b038e000100000000
0007003b03990003000104090000021203d40003000104090001001605e6
0003000104090002000e05fc0003000104090003001605e6000300010409
0004001605e60003000104090006001605e6000300010409000700760210
00a9002000320030003100380020004d006900630072006f0073006f0066
007400200043006f00720070006f0072006100740069006f006e002e0020
0041006c006c002000520069006700680074007300200052006500730065
0072007600650064002e000d0048006500620072006500770020004f0070
0065006e00540079007000650020004c00610079006f007500740020006c
006f00670069006300200063006f00700079007200690067006800740020
00a9002000320030003000330020002600200032003000300037002c0020
00520061006c00700068002000480061006e0063006f0063006b00200026
0020004a006f0068006e00200048007500640073006f006e002e00200054
0068006900730020006c00610079006f007500740020006c006f00670069
006300200066006f00720020004200690062006c006900630061006c0020
0048006500620072006500770020006900730020006f00700065006e0020
0073006f007500720063006500200073006f006600740077006100720065
00200075006e00640065007200200074006800650020004d004900540020
004c006900630065006e00730065003b002000730065006500200065006d
0062006500640064006500640020006c006900630065006e007300650020
006400650073006300720069007000740069006f006e00200066006f0072
002000640065007400610069006c0073002e00430061006c006900620072
006900200069007300200061002000740072006100640065006d00610072
006b0020006f006600200074006800650020004d006900630072006f0073
006f00660074002000670072006f007500700020006f006600200063006f
006d00700061006e006900650073002ea92032303138204d6963726f736f
667420436f72706f726174696f6e2e20416c6c2052696768747320526573
65727665642e0d486562726577204f70656e54797065204c61796f757420
6c6f67696320636f7079726967687420a92032303033202620323030372c
2052616c70682048616e636f636b2026204a6f686e20487564736f6e2e20
54686973206c61796f7574206c6f67696320666f72204269626c6963616c
20486562726577206973206f70656e20736f7572636520736f6674776172
6520756e64657220746865204d4954204c6963656e73653b207365652065
6d626564646564206c6963656e7365206465736372697074696f6e20666f
722064657461696c732e5a4052464544382e746d7043616c696272692069
7320612074726164656d61726b206f6620746865204d6963726f736f6674
2067726f7570206f6620636f6d70616e6965732e00a90020003200300031
00380020004d006900630072006f0073006f0066007400200043006f0072
0070006f0072006100740069006f006e002e00200041006c006c00200052
00690067006800740073002000520065007300650072007600650064002e
000d000a0048006500620072006500770020004f00700065006e00540079
007000650020004c00610079006f007500740020006c006f006700690063
00200063006f0070007900720069006700680074002000a9002000320030
003000330020002600200032003000300037002c002000520061006c0070
0068002000480061006e0063006f0063006b002000260020004a006f0068
006e00200048007500640073006f006e002e002000540068006900730020
006c00610079006f007500740020006c006f00670069006300200066006f
00720020004200690062006c006900630061006c00200048006500620072
006500770020006900730020006f00700065006e00200073006f00750072
0063006500200073006f00660074007700610072006500200075006e0064
0065007200200074006800650020004d004900540020004c006900630065
006e00730065003b002000730065006500200065006d0062006500640064
006500640020006c006900630065006e0073006500200064006500730063
00720069007000740069006f006e00200066006f00720020006400650074
00610069006c0073002e005a004000520046004500440038002e0074006d
00700052006500670075006c00610072b20903eb411d03430001003b0341
0001008b0330009b033000020004032f0064032f0074032f00d4032f0004
032d032a0038001f032c032a0038001f032b032ab2381f24bf032a00a403
2a00b4032a0003ffc0032ab2232746b9ffc0032ab21c20464163033c0038
033b0055033a003803390055033800380337005503360038033500550334
00380333005503230038032200550321003803200055002b03400001006b
03400001033d003803220055006b033b0001002403310054033100020024
0331003403310054033100f403310004001403270044032700e403270003
00040327002403270044032700740327008403270094032700d4032700f4
0327000800a4032200010034032000010014032000240320004403200054
03200074032000840320000602f9b21e1d1fb802f8b21e2b1fb802f7b21e
2c1fb802f6b21e2c1fb802f5b21e2c1fb802f4b21e2b1fb802f3b21e2c1f
b802f2b21e2c1fb802f1b21e2c1fb802f0b21e2c1fb802efb21e2c1fb802
eeb21e2b1fb802edb21e2b1fb802ecb21e2c1fb802ebb21e2c1fb802eab2
1e2c1fb802e9b21e2c1fb802e8b21e2c1fb802e7b21e2c1fb802e6b21e2c
1fb802e5b21e2c1fb802e4b21e091fb802e3b21e2c1fb802e2b21e2c1fb8
02e1b21d121fb802e0b21d191fb802dfb21d2f1fb802deb21d2f1fb802dd
b21d2f1fb802dcb21d2f1fb802dbb21d191fb802dab21d2f1fb802d9b21d
2f1fb802d8b21d2f1fb802d7b21d2f1fb802d6b21d2f1fb802d5b21d2f1f
b802d4b21d2f1fb802d3b21d2f1fb802d2b21d2f1fb802d1b21d2f1fb802
d0b21d2f1fb802cfb21d2f1fb802ceb21d121fb802cdb21d121fb802ccb2
1d121fb802cbb21d121fb802cab21d191fb802c9b21d2f1fb802c8b21d2f
1fb802c7b21d2f1fb802c6b21d2f1fb802c5b21d2f1fb802c4b21d2f1fb8
02c3b21d2f1fb802c2b21d2f1fb802c1b21d2f1fb802c0b21d2f1fb802bf
b21d121fb802beb21d121fb802bdb21d2f1fb802bcb21d2f1fb802bbb21d
2f1fb802bab21d2f1fb802b9b21d2f1fb802b8b21d2f1fb802b7b21d2f1f
b802b6b21d2f1fb802b5b21d2f1fb802b4b21d2f1fb802b3b21d2f1fb802
b2b21d2f1fb802b1b21c321fb802b0b21c321fb802afb21c331fb802aeb2
1c331fb802adb21c331fb802acb21c331fb802abb21c331fb802aab21c31
1fb802a9b21c311fb802a8b21c321fb802a7b21c321fb802a6b21c321fb8
02a5b21c321fb802a4b21c321fb802a3b21c321fb802a2b21c331fb802a1
b21c331fb802a0b21c331fb8029fb21c331fb8029eb21c331fb8029db21c
331fb8029cb21c311fb8029bb21c311fb8029ab21c321fb80299b21c321f
b80298b21c321fb80297b21c321fb80296b21c321fb80295b21c331fb802
94b21c331fb80293b21c331fb80292b21c331fb80291b21c331fb80290b2
1c331fb8028fb21c331fb8028eb21c311fb8028db21c321fb8028cb21c32
1fb8028bb21c321fb8028ab21c321fb80289b21c321fb80288b21c331fb8
0287b21c331fb80286b21c331fb80285b21c331fb80284b21c331fb80283
b21c331fb80282b21b341fb80281b21b341fb80280b21b341fb8027fb21b
341fb8027eb21b341fb8027db21b341fb8027cb21b341fb8027bb21b341f
b8027ab21b341fb80279b21b341fb80278b21b341fb80277b21b341fb802
76b21b341fb80275b21b341fb80274b21b341fb80273b21b341fb80272b2
1b341fb80271b21b341fb80270b21b341fb8026fb21a351fb8026eb21a35
1fb8026db21a351fb8026cb21a351fb8026bb21a351fb8026ab21a351fb8
0269b21a351fb80268b21a351fb80267b21a351fb80266b21a351fb80265
b21a351fb80264b21a351fb80263b21a351fb80262b21a351fb80261b21a
351fb80260b21a351fb8025fb21a351fb8025eb21a351fb8025db21a351f
b8025cb21a351fb8025bb21a351fb8025ab21a351fb80259b219371fb802
58b219371fb80257b219371fb80256b219371fb80255b219371fb80254b2
19371fb80253b219371fb80252b219371fb80251b219371fb80250b21937
1fb8024fb219371fb8024eb219371fb8024db219371fb8024cb219371fb8
024bb219371fb8024ab219371fb80249b219371fb80248b219371fb80247
b219371fb80246b219371fb80245b219371fb80244b219371fb80243b219
371fb80242b219371fb80241b219371fb80240b219371fb8023fb219371f
b8023eb219371fb8023db219371fb8023cb219371fb8023bb219371fb802
3ab219371fb80239b218391fb80238b218391fb80237b218391fb80236b2
18391fb80235b218391fb80234b218391fb80233b218391fb80232b21839
1fb80231b218391fb80230b218391fb80301b2182e1fb8022fb218391fb8
022eb218391fb8022db218391fb8022cb218391fb8022bb218391fb8022a
b218391fb80229b218391fb80228b218391fb80227b218391fb80226b218
391fb80225b2173b1fb80224b2173b1fb80223b217321fb80222b2173a1f
b80221b2173b1fb80220b2173b1fb8021fb2173b1fb8021eb2173b1fb802
1db2173b1fb8021cb2173b1fb8021bb2173b1fb8021ab2173b1fb80219b2
173b1fb80218b2173b1fb80217b2173b1fb80216b2173b1fb80215b21732
1fb80214b2173a1fb80213b2173b1fb80212b2173b1fb80211b2173b1fb8
0210b2173b1fb8020fb2173b1fb8020eb2173b1fb8020db2173b1fb8020c
b2173b1fb8020bb2173b1fb8020ab2173b1fb80209b217321fb80208b217
321fb80207b2173b1fb80206b2173b1fb80205b2173b1fb80204b2173b1f
b80203b2173b1fb80202b2173b1fb80201b2173b1fb80200b2173b1fb801
ffb2173b1fb801feb2173b1fb801fdb2173b1fb801fcb2173b1fb801fbb2
173b1fb801fab2173b1fb801f9b2173b1fb801f8b2173b1fb801f7b21732
1fb801f6b2173a1fb801f5b2173b1fb801f4b2173b1fb801f3b2173b1fb8
01f2b2173b1fb801f1b2173b1fb801f0b2173b1fb801efb2173b1fb801ee
b2173b1fb801edb2173b1fb801ecb2173b1fb801ebb2173b1fb801eab217
3b1fb801e9b2173b1fb801e8b2173b1fb801e7b217321fb801e6b216231f
b801e5b216231fb801e4b216371fb801e3b216371fb801e2b216381fb801
e1b216381fb801e0b216431fb801dfb216441fb801deb216441fb801ddb2
16441fb801dcb216451fb801dbb216461fb801dab216461fb801d9b21646
1fb801d8b216231fb801d7b216231fb801d6b216381fb801d5b216431fb8
01d4b216431fb801d3b216431fb801d2b216441fb801d1b216461fb801d0
b216461fb801cfb216461fb801ceb216461fb801cdb216461fb801ccb216
461fb801cbb216431fb801cab216231fb801c9b216231fb801c8b216371f
b801c7b216371fb801c6b216381fb801c5b216421fb801c4b216431fb801
c3b216441fb801c2b216451fb801c1b216461fb801c0b216461fb801bfb2
16461fb801beb216461fb801bdb216461fb801bcb216461fb801bbb21646
1fb801bab216371fb801b9b216381fb801b8b216421fb801b7b216431fb8
01b6b216431fb801b5b216431fb801b4b216441fb801b3b216441fb801b2
b216441fb801b1b216451fb801b0b216451fb801afb216451fb801aeb216
461fb801adb216461fb801acb216461fb801abb216461fb801aab216461f
b801a9b215341fb801a8b215411fb801a7b215411fb801a6b2154d1fb801
a5b2154e1fb801a4b2154f1fb801a3b215521fb801a2b215401fb801a1b2
154d1fb801a0b2154e1fb8019fb2154f1fb8019eb215521fb8019db2154d
1fb8019cb215401fb8019bb2154d1fb8019ab2154e1fb80199b2154e1fb8
0198b2154f1fb80197b2154f1fb80196b215501fb80195b215521fb80194
b215521fb80193b215521fb80192b215411fb80191b2154f1fb80190b215
501fb8018fb215501fb8018eb215511fb8018db215521fb8018cb215521f
b8018bb215521fb8018ab214581fb80189b214591fb80188b2145c1fb801
87b2145d1fb80186b2144a1fb80185b2145b1fb80184b2145c1fb80183b2
14591fb80182b2145d1fb8018140af145d1ff00f451fef0e481fe00c4e1f
c20c4e1fc10c4e1fc00c4e1fbf0b561fb20b561fb10b561fb00b561faf0b
561fae0b561fad0b561fac0b561fab0b561faa0b561fa90b561fa80b561f
a70b561fa60b561fa50b561fa40b561fa30b561fa20b561fa10b561fa00b
561f9f0b561f9e0a681f9a0a681f990a681f980a681f970a681f960a681f
950a681f940a681f930a681f920a681f910a681f9009681f8f09681f8e09
681f8d09681f8c09681f410902fc02fa0056001f02fb02fa0068001f017f
b213321fb8017eb212371fb80174b212371fb80173b211421fb80172b211
421fb80171b211421fb80170b211421fb8016fb211421fb8016eb211421f
b8016db211421fb8016cb211421fb8016bb211421fb8016ab211421fb801
3cb211421fb8013bb210421fb8013ab210421fb80139b210421fb80138b2
10421fb80137b210421fb80136b210421fb80135b210421fb80134b21042
1fb80133b210421fb80132b20f451fb80131b20f451fb80130b20f451fb8
0112b20f451fb80111b20f451fb80110b20f451fb8010fb20f451fb8010e
b20f451fb8010db20e481fb8010cb20e481fb8010bb20e481fb8010ab20e
481fb80109b20e481fb80108b20e481fb80107b20d4a1fb80106405b0d4a
1fee0d4a1fed0d4a1fec0d4a1feb0d4a1fea0d4a1fe90c4e1fdf0c4e1fde
0c4e1fdd0c4e1fdc0c4e1fdb0c4e1fda0c4e1fd90b561fd80b561fd70b56
1fbe0b561fbd0b561fbc0b561fbb0b561fba0b561f9d0a681f9c0a681fb8
0180b213321fb8017ab211401fb80179b211421fb80178b211421fb80177
b211421fb80176b211421fb80175b211421fb80143b211421fb80142b210
421fb80141b210421fb80140b210421fb8013fb210421fb8013eb210421f
b8013db20f451fb80115b20f451fb80114b20f451fb80113b20f451fb903
030302b2401fa4be030200b4030200c4030200030300b213321fb8017bb2
13321fb80153b212371fb80152b211401fb80151b211401fb80150b21140
1fb8014fb211401fb8014eb211401fb8014db211401fb8014cb211401fb8
014bb211401fb8014ab211401fb80149b211401fb80148b211401fb80147
b211401fb80146b211401fb80145b211401fb80144b211401fb80122b211
401fb80121b210421fb80120b210421fb8011fb210421fb8011eb210421f
b8011db210421fb8011cb210421fb8011bb210421fb8011ab210421fb801
19b210421fb80118b20f451fb80117b20f451fb80116409b0f451ffd0f45
1ffc0f451ffb0f451ffa0f451ff90e481ff80e481ff70e481ff60e481ff5
0e481ff40e481ff30d4a1ff20d4a1ff10d4a1fe70d4a1fe60d4a1fe50d4a
1fe40d4a1fe30d4a1fe20d4a1fe10c4e1fcd0c4e1fcc0c4e1fcb0c4e1fca
0c4e1fc90c4e1fc80c4e1fc70c4e1fc60c4e1fc50c4e1fc40c4e1fc30c4e
1fb80c4e1fb70b561fb60b561fb50b561fb40b561fb30b561f9b0a681fb8
02fdb212371fb8017db212371fb8017cb212371fb80169b2112e1fb80168
b2112e1fb80167b211401fb80166b211401fb80165b211401fb80164b211
401fb80163b211401fb80162b211401fb80161b211401fb80160b211401f
b8015fb211401fb8015eb211401fb8015db211401fb8015cb211401fb801
5bb211401fb8015ab211401fb80159b211401fb80158b211401fb80157b2
11401fb80156b211401fb80155b211401fb80154b211401fb8012fb21140
1fb8012eb210421fb8012db210421fb8012cb210421fb8012bb210421fb8
012ab210421fb80129b210421fb80128b210421fb80127b210421fb80126
b210421fb80125b20f451fb80124b20f451fb80123b20f451fb80105b20f
451fb80104b20f451fb80103b20f451fb80102b20f451fb80101b20e481f
b8010040a20e481fff0e481ffe0e481fe80c4e1fd60c4e1fd50c4e1fd40c
4e1fd30c4e1fd20c4e1fd10c4e1fd00c4e1fcf0c4e1fce0b561fb90b561f
8503251f84032e1f83012e1f8248805581ab80557f487d557eab7d550b7d
3b7d4b7d030b7d1b7d4b7d7b7dab7ddb7d067c487a557bab7a55047a147a
020a7948775578ab77550b77010c764875555475e475f475031475547564
7574759475d475e47507a475b475c47503b8ffc0401275383b4680759075
0214757475020075010fb8ffc04021750b0e467448725573ab7255047234
72023bf47201e07201023072015072607202b8ffc0b372242846b8ffc040
3572161a461072307240720371486f5570ab6f554f6f6f6f7f6f9f6fbf6f
057f6f8f6f02af6fbf6f02406f090d466e486d55df6d0100bc02ff001002
ff00c002ffb2030a6fbb02fe000100ef02fe40ff016b032e1f6a03251f69
2e675568ab6755662e645565ab6455632e6255612e60555f2e5d555eab5d
555c2e5a555bab5a55592e58555703251f562e545555ab5455532e515552
ab51554f2e4e554e03251f4d2e4b554cab4b554a2e485549ab4855504801
472e46554503361f001f01001e01001e701e801ef01e040b601d701d0270
1de01df01d03701cf01c027f1b010f1a7f1a8f1a030f1a8f1a020f1a8f1a
020f191f198f199f19af19050f198f199f19030c70128012027011801102
30114011d011e011040011a011020f8f0f9f0faf0f034f0f5f0fef0fff0f
04af0f01af0ebf0ecf0e034f0e5f0e6f0e030f0eaf0ebf0e0310400e2e31
460f0d1f0d40472f0d033c2f0d3f0d4f0d038f0d01400d2e3246400d2427
463f0c4f0c5f0c039f0c01400c262946ef0aff0a02400a242746ef09ff09
02ff09010003012001010001100120010308b8ffc0b401151f4603bd0100
010000050001019000542b4bb807ff524bb008505bb00188b02553b00188
b040515ab00688b000555a5b58b101018e59b101024354b0144b515a58b1
01018e59858d8d001d424bb01d5358b203a0a01d42594bb0805358b20340
401d42594bb0ff5358b20300001d42592b5e73757373742b732b73742b2b
73745e732b5e7374757374755e73747573015e7374737475757473745e73
7473002b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
73745e73732b2b7374752b2b732b2b73755f75755e732b2b2b5e7373732b
7374752b5e732b2b5e732b2b73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b732b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b007374737374737473
2b73742b2b2b2b2b2b2b2b2b732b2b2b73737373185f5e00000000>
[3949 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

2 0 3 <> QJJAAA+CIDFont+F1 AddT42Char 
2 3716 882 <0001003b018f0238025d000f0011b200070bb901210004002fed012fcd30
31011406232122263534363321321e0202381618fe601916161901a00c11
0c0501f73a2e2f39382e0a182800>QJJAAA+CIDFont+F1 AddT42Char 
2 316 38 <0001008dfffa0363050e002700b7b10102435558b10713b8029440160d1d
001e1d07280f014d07180c0d014c07100b014d07ba01570013fff0b60b01
4d13131906b8ffe0b30f014d06b8ffe8b40b0e014c06b8015bb440225119
5500183f3f1aed2b2b12392f2bed2b2b2b012f2fc41139ed3230311b4011
07280f014d07180c0d014c07100b014d07ba01570013fff0b60b014d1313
1906b8ffe0b30f014d06b8ffe8b40b0e014c06b8015bb440225119550018
3f3f1aed2b2b12392f2bed2b2b2b30315901140e0223211121321e021514
0e02232111140e0223222e02351134363321321e020363050b0e09fe5901
8d090e0b05050b0e09fe730c1f322726331e0d2d210261090e0b0504a21e
29180cfea40a18281e1e281a0bfe1e0b100b06060b100b04952c270b192a
>QJJAAA+CIDFont+F1 AddT42Char 
2 1006 87 <0002008dfffa0403050e001c0029007eb10102435558b12406bb02930011
001d02c14009001125180b0f014c25b8012bb306060c23b8ffe8b40b0f01
4c23b8012bb44015510c5500183f3f1aed2b12392fed2b012fd4ed10ed32
30311bb625180b0f014c25b8012bb306060c23b8ffe8b40b0f014c23b801
2bb44015510c5500183f3f1aed2b12392fed2b30315901140e0223231114
0e0223222e02351134363321321e0405342e0223231133323e0204034482
bd806c0d1e322726331e0c312801312e537477542cfeed30464d2970763f
55361c03856da8733cfe630a100a06060a100a048c2f2f07173e5f7f6244
582a0bfe49223d55>QJJAAA+CIDFont+F1 AddT42Char 
2 1254 282 <0002004bffe903cc056d002600390093b10102435558b20b1b39bb025e00
00002f0272400a1321460b39271b040e2ab8ffe8b40b0f014c2ab8014940
09184a34180b0f014c34b80149b4400e4d054c00183f3f1aed2b3fed2b12
17393f012fedd4ed323930311b400921460b39271b040e2ab8ffe8b40b0f
014c2ab801494009184a34180b0f014c34b80149b4400e4d054c00183f3f
1aed2b3fed2b1217393f30315925140e0223222e023535060623222e0235
343e023332161711343e0233321e021503262623220e0215141e0233323e
023703cc0a18291e2028190b45975c668d59283362925f4b7a3c0b1d3025
25301c0cfa36633631472b15122944341a31333620220b0f0a04040a0f0b
634a524f86b36377be86483d3b01e30a100b06060b100afd344448315265
35386a53320f22372800>QJJAAA+CIDFont+F1 AddT42Char 
2 1564 286 <0002004affe903b603d7002b00340103b10102435558b31313212cb80243
b22b3404b80272400a21032c132c021b2cc304b8ffc040170d014d000410
04024c5004600402a004b0040204041c2fb8ffe8b30f014d2fb8ffe84020
0d014d2fe4264a18f6000e100e0211030e09180c014d09180f014d09f940
1c4d00183f1afd2b2bd45f5e5ded3fed2b2b12392f5d715e5d2bed5e5d01
2fed32dded12392f30311b4009032c132c021b2cc304b8ffc040170d014d
00041004024c5004600402a004b0040204041c2fb8ffe8b30f014d2fb8ff
e840200d014d2fe4264a18f6000e100e0211030e09180c014d09180f014d
09f9401c4d00183f1afd2b2bd45f5e5ded3fed2b2b12392f5d715e5d2bed
5e5d3031590114062321141e0233323e0233321e0215140e0623222e0235
343e0233321e021527362623220e020703b62924fde11b3b5d4142644930
0f090c08030204080d3a5a744277b3783b3e76a96a709f6630f4035b5f30
472f190201fa2e2c395d412213171307122119161f160f0e1817113c7aba
7d77bf85464275a05e206a79243d532f>QJJAAA+CIDFont+F1 AddT42Char 
2 1970 349 <0002006bfffa018d054e001500210043b10102435558bf001602bf001c00
150260000a001f017bb540191049054c00183f3fd61aed012fedd4ed3031
1bb9001f017bb540191049054c00183f3fd61aed30315925140e0223222e
023511343e0233321e0215131406232226353436333216017a0c1d302525
301d0c0c1d302525301d0c133e54553b3d55543c220a0f0a05050a0f0a03
7a0a0f0b06060b0f0a01304c3a38494c3b39>QJJAAA+CIDFont+F1 AddT42Char 
2 2138 374 <0001007efffa03d203d70032007fb10102435558b12a13bb0260001e000b
025fb2001e10b8fff0b30b014d10b8ffe8b40c0f014c10b8014d400b402d
4a2a192449194c054c00183f3f3f12393f1aed2b2b012fd4ed10ed393031
1bb90010fff0b30b014d10b8ffe8b40c0f014c10b8014d400b402d4a2a19
2449194c054c00183f3f3f12393f1aed2b2b30315925140e0223222e0235
11342e022322060711140e0223222e023511343e0233321e021515363633
321e021503d20c1c312425311c0c132439263062350c1d302525301d0c0a
1a291f202a170a4a99535b7d4d22220a0f0a05050a0f0a01fd414a351d46
43fdaf0a0f0a05050a0f0a037c0a0f0a05050a0f0a6750503c678a61>QJJAAA+CIDFont+F1 AddT42Char 
2 2406 381 <00020048ffe9040403d700130027006fb10102435558bf00140275000000
1e0275000a0019ffe8b40b0f014c19b8011a40090f4a23180b0f014c23b8
011cb240054d00183f1aed2b3fed2b012fedd4ed30311bb90019ffe8b40b
0f014c19b8011a40090f4a23180b0f014c23b8011cb240054d00183f1aed
2b3fed2b30315901140e0223222e0235343e0233321e0205342e0223220e
0215141e0233323e0204043c7ab87b77b074383d7ab77b78b07338fefd15
32533f3854361b1631543e3954361a01e972bc884a427eb87672bd874a41
7eb881426f522e294f6f47426f522d294e6f>QJJAAA+CIDFont+F1 AddT42Char 
2 2886 410 <00010017ffec028e04b1003a0091b10102435558b711110d3b2900232db8
025fb2170d2db8ffe8b40b0f014c2db8011fb323481d0db8ffe8b40b0f01
4c0db8011fb2174831b80147b240074d00183f1aed3fed2bcd3fed2b012f
33fd32c4321112392f30311bb9002dffe8b40b0f014c2db8011fb323481d
0db8ffe8b40b0f014c0db8011fb2174831b80147b240074d00183f1aed3f
ed2bcd3fed2b30315925140e0423222e02351123222635343e0233333534
3e0233321e02151533321e02151406232311141633323e0233321e02028e
0b12232f371c4b6e48226b1314050a0f0a6a0b1d312425311c0cc20a0f0a
051413c32e3b1420191107060b06057a2c2f130f0b06264f785201c92f37
1d28170ac70a100b05050b100ac70a17281d372ffe5d4949070907071524
>QJJAAA+CIDFont+F1 AddT42Char 
2 3186 437 <00010079ffe903cc03c600320069b10102435558b10b27bb025e0000001f
025f400f132d49270b05194924180b0f014c24b8014db4400e4d054c0018
3f3f1aed2b3f1239393f012fedd4ed3930311b400e2d49270b0519492418
0b0f014c24b8014db4400e4d054c00183f3f1aed2b3f1239393f30315925
140e0223222e023535060623222e023511343e0233321e021511141e0233
32363711343e0233321e021503cc0a19291f2129180a4a99525c7d4d210b
1d312425301d0c122539263061370b1d302525301c0c220a0f0a05050a0f
0a6750503c68896602220a0f0a05050a0f0afe08464a351d464302510a0f
0a05050a0f0a>QJJAAA+CIDFont+F1 AddT42Char 
2 3432 454 <00010020fffa038d03c6002f0085b10102435558bc0022028a0018002402
2a40092e182e182e00170b0cb80261400d0016010e03160b2f0023230b0a
b802b5400e00400b2949230b111d49114c054c00183f3f3f1239393f0119
2f1a18dded1239192f12391810dd5f5e5ded12391239392f2f10ed10ed30
311b400b2949230b111d49114c054c00183f3f3f1239393f30315925160e
0223222e022703030e0323222e023713032626363633321e021713133e03
33321616060703038508011c3a302d371f0f04a5a5040e1d342a2c341801
09f7e409011a39312c351e0e059f9e030c1a2d272c3517010bde3411160e
0503090d0a013dfec30a0d0903050e161101b7019c12190e0603060d0afe
d6012a080c0804040e1914fe6b00>QJJAAA+CIDFont+F1 AddT42Char 
2 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3031011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>QJJAAA+CIDFont+F1 AddT42Char 
QJJAAA+CIDFont+F1 /CharStrings get begin
/space 3 def
/hyphen 882 def
/F 38 def
/P 87 def
/d 282 def
/e 286 def
/i 349 def
/n 374 def
/o 381 def
/t 410 def
/u 437 def
/x 454 def
end
QJJAAA+CIDFont+F1 /Encoding get
dup 32 /space put
dup 45 /hyphen put
dup 70 /F put
dup 80 /P put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 116 /t put
dup 117 /u put
dup 120 /x put
pop
end
%ADOEndSubsetFont
/FWUQJI+CIDFont+F1 /QJJAAA+CIDFont+F1 findfont ct_VMDictPut
/FWUQJI+CIDFont+F1*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 24{/.notdef}rp /F 9{/.notdef}rp /P 
19{/.notdef}rp /d /e 3{/.notdef}rp /i 4{/.notdef}rp /n /o 
4{/.notdef}rp /t /u 2{/.notdef}rp /x 135{/.notdef}rp]
FWUQJI+CIDFont+F1 nf
FWUQJI+CIDFont+F1*1 [0 -14.0405 -14.04 0 0 0 ]msf
69.8949 487.308 mo
(Fixed-Point )
[-6.45856 -3.51007 -6.17786 -7.02026 -7.58179 -4.35254 -7.16058 -7.58197 -3.36963 -7.44147 -4.914 0 
]ysh
86.6977 480.349 mo
(Finetune)
[-6.45856 -3.51013 -7.58173 -6.88 -4.914 -7.44147 -7.58179 0 ]ysh
gsave
-1.50348 9.35107 mo
-1.50348 495.711 li
327.776 495.711 li
327.776 9.35107 li
cp
eclp
13.3765 390.951 mo
13.3765 391.791 li
10.4965 391.791 8.09653 389.391 8.09653 386.391 cv
8.09653 342.111 li
8.09653 339.231 10.4965 336.831 13.3765 336.831 cv
31.6165 336.831 li
34.4965 336.831 36.8965 339.231 36.8965 342.111 cv
36.8965 386.391 li
36.8965 389.391 34.4965 391.791 31.6165 391.791 cv
13.3765 391.791 li
13.3765 390.951 li
13.3765 390.231 li
31.6165 390.231 li
33.6565 390.231 35.3365 388.551 35.3365 386.391 cv
35.3365 342.111 li
35.3365 340.071 33.6565 338.391 31.6165 338.391 cv
13.3765 338.391 li
11.3365 338.391 9.65651 340.071 9.65651 342.111 cv
9.65651 386.391 li
9.65651 388.551 11.3365 390.231 13.3765 390.231 cv
13.3765 390.951 li
cp
.713893 .39527 1 .309056 cmyk
f
19.0165 377.031 mo
18.4165 376.911 18.0565 376.791 17.8165 376.671 cv
17.5765 376.551 17.3365 376.551 17.2165 376.431 cv
17.0965 376.311 17.0965 376.311 16.9765 376.191 cv
16.9765 376.071 16.8565 375.951 16.8565 375.711 cv
16.3765 375.591 li
16.3765 379.071 li
16.8565 379.191 li
16.8565 378.951 16.9765 378.711 17.0965 378.591 cv
17.0965 378.471 17.3365 378.351 17.5765 378.351 cv
17.9365 378.351 18.4165 378.471 19.0165 378.591 cv
25.7365 380.031 li
26.3365 380.151 26.6965 380.271 26.9365 380.391 cv
27.0565 380.391 27.2965 380.511 27.4165 380.511 cv
27.5365 380.631 27.6565 380.751 27.7765 380.871 cv
27.7765 380.991 27.8965 381.111 27.8965 381.351 cv
28.3765 381.471 li
28.3765 377.871 li
27.8965 377.871 li
27.8965 378.111 27.7765 378.351 27.6565 378.471 cv
27.5365 378.591 27.4165 378.711 27.1765 378.711 cv
26.9365 378.711 26.8165 378.711 26.5765 378.591 cv
26.4565 378.591 26.0965 378.591 25.7365 378.471 cv
19.0165 377.031 li
cp
.75021 .679683 .670222 .90164 cmyk
f
30.2965 374.751 mo
30.5365 374.871 30.7765 374.871 31.0165 374.991 cv
31.2565 374.991 31.3765 374.991 31.3765 375.111 cv
31.4965 375.231 31.6165 375.231 31.6165 375.351 cv
31.6165 375.471 31.7365 375.591 31.7365 375.711 cv
32.0965 375.711 li
32.0965 370.071 li
29.5765 369.351 li
29.5765 370.071 li
29.9365 370.311 30.2965 370.431 30.5365 370.551 cv
30.7765 370.671 31.0165 370.791 31.1365 371.031 cv
31.2565 371.151 31.2565 371.271 31.3765 371.511 cv
31.3765 371.631 31.3765 371.871 31.3765 372.111 cv
31.3765 373.791 li
25.6165 372.471 li
25.2565 372.351 25.0165 372.351 24.7765 372.231 cv
24.6565 372.231 24.5365 372.111 24.4165 372.111 cv
24.2965 371.991 24.2965 371.991 24.1765 371.871 cv
24.1765 371.751 24.1765 371.631 24.1765 371.511 cv
23.6965 371.391 li
23.6965 374.151 li
24.1765 374.271 li
24.1765 374.031 24.1765 373.791 24.2965 373.671 cv
24.2965 373.551 24.5365 373.551 24.6565 373.551 cv
24.7765 373.551 24.8965 373.551 25.0165 373.551 cv
25.1365 373.671 25.3765 373.671 25.4965 373.671 cv
30.2965 374.751 li
cp
f
30.5365 367.791 mo
30.8965 367.671 31.2565 367.671 31.6165 367.671 cv
31.8565 367.671 32.0965 367.671 32.3365 367.791 cv
32.5765 367.791 32.6965 367.911 32.9365 368.031 cv
33.0565 368.031 33.2965 368.271 33.5365 368.511 cv
33.8965 368.151 li
33.5365 367.671 33.2965 367.431 33.0565 367.191 cv
32.8165 366.951 32.5765 366.831 32.3365 366.711 cv
32.0965 366.591 31.7365 366.471 31.4965 366.471 cv
31.1365 366.471 30.8965 366.591 30.5365 366.591 cv
30.5365 367.791 li
cp
f
30.4165 361.311 mo
30.7765 361.671 31.0165 361.911 31.1365 362.151 cv
31.2565 362.391 31.3765 362.511 31.3765 362.751 cv
31.3765 362.991 31.2565 363.231 31.1365 363.351 cv
31.0165 363.351 30.7765 363.471 30.5365 363.471 cv
30.4165 363.471 30.2965 363.471 30.2965 363.471 cv
30.1765 363.471 30.0565 363.471 29.9365 363.471 cv
29.8165 363.351 29.6965 363.351 29.5765 363.351 cv
29.4565 363.351 29.2165 363.231 29.0965 363.231 cv
26.3365 362.631 li
26.3365 360.351 li
25.6165 360.231 li
25.6165 362.391 li
24.0565 362.031 li
24.0565 363.111 li
24.2965 363.111 24.4165 363.231 24.6565 363.231 cv
24.7765 363.351 24.8965 363.471 25.0165 363.471 cv
25.1365 363.591 25.2565 363.591 25.3765 363.711 cv
25.4965 363.711 25.4965 363.831 25.6165 363.831 cv
25.6165 363.951 25.7365 364.071 25.7365 364.191 cv
25.8565 364.311 25.8565 364.551 25.8565 364.791 cv
26.3365 364.911 li
26.3365 363.831 li
29.6965 364.551 li
29.9365 364.671 30.0565 364.671 30.2965 364.671 cv
30.4165 364.671 30.6565 364.671 30.7765 364.671 cv
31.2565 364.671 31.6165 364.551 31.8565 364.311 cv
32.0965 364.071 32.2165 363.711 32.2165 363.231 cv
32.2165 362.991 32.2165 362.871 32.0965 362.631 cv
32.0965 362.511 31.9765 362.271 31.8565 362.031 cv
31.7365 361.911 31.6165 361.671 31.4965 361.551 cv
31.2565 361.311 31.1365 361.071 30.8965 360.831 cv
30.4165 361.311 li
cp
f
25.4965 355.311 mo
25.3765 355.311 25.1365 355.311 25.0165 355.311 cv
24.7765 355.311 24.6565 355.311 24.4165 355.311 cv
24.2965 355.311 24.0565 355.311 23.8165 355.311 cv
23.8165 355.671 li
24.0565 356.271 24.4165 356.751 24.6565 357.351 cv
24.8965 357.831 25.2565 358.311 25.4965 358.911 cv
25.6165 358.791 25.7365 358.791 25.8565 358.791 cv
25.9765 358.671 25.9765 358.671 26.0965 358.551 cv
25.8565 358.191 25.6165 357.831 25.4965 357.591 cv
25.3765 357.351 25.2565 357.111 25.2565 356.991 cv
25.2565 356.871 25.3765 356.751 25.3765 356.751 cv
25.4965 356.631 25.6165 356.631 25.7365 356.631 cv
30.4165 356.631 li
30.5365 356.631 30.6565 356.631 30.7765 356.631 cv
30.8965 356.631 30.8965 356.631 31.0165 356.631 cv
31.1365 356.751 31.1365 356.751 31.1365 356.751 cv
31.2565 356.871 31.2565 356.871 31.2565 356.991 cv
31.3765 356.991 31.3765 357.111 31.3765 357.111 cv
31.3765 357.231 31.4965 357.351 31.4965 357.471 cv
31.4965 357.591 31.4965 357.711 31.4965 357.831 cv
31.4965 358.071 31.4965 358.311 31.4965 358.551 cv
32.0965 358.551 li
32.0965 353.391 li
31.4965 353.391 li
31.4965 353.631 31.4965 353.871 31.4965 354.111 cv
31.4965 354.231 31.4965 354.471 31.4965 354.591 cv
31.4965 354.711 31.3765 354.831 31.3765 354.951 cv
31.3765 354.951 31.3765 355.071 31.2565 355.071 cv
31.2565 355.191 31.2565 355.191 31.1365 355.191 cv
31.1365 355.311 31.0165 355.311 31.0165 355.311 cv
30.8965 355.311 30.7765 355.311 30.7765 355.311 cv
30.6565 355.311 30.5365 355.311 30.4165 355.311 cv
25.4965 355.311 li
cp
f
13.3765 259.191 mo
13.3765 260.031 li
10.4965 260.031 8.09653 257.631 8.09653 254.631 cv
8.09653 210.351 li
8.09653 207.471 10.4965 205.071 13.3765 205.071 cv
31.6165 205.071 li
34.4965 205.071 36.8965 207.471 36.8965 210.351 cv
36.8965 254.631 li
36.8965 257.631 34.4965 260.031 31.6165 260.031 cv
13.3765 260.031 li
13.3765 259.191 li
13.3765 258.471 li
31.6165 258.471 li
33.6565 258.471 35.3365 256.791 35.3365 254.631 cv
35.3365 210.351 li
35.3365 208.311 33.6565 206.631 31.6165 206.631 cv
13.3765 206.631 li
11.3365 206.631 9.65651 208.311 9.65651 210.351 cv
9.65651 254.631 li
9.65651 256.791 11.3365 258.471 13.3765 258.471 cv
13.3765 259.191 li
cp
.713893 .39527 1 .309056 cmyk
f
19.0165 245.151 mo
18.4165 245.031 18.0565 244.911 17.8165 244.791 cv
17.5765 244.791 17.3365 244.671 17.2165 244.551 cv
17.0965 244.551 17.0965 244.431 16.9765 244.311 cv
16.9765 244.191 16.8565 244.071 16.8565 243.831 cv
16.3765 243.711 li
16.3765 247.311 li
16.8565 247.311 li
16.8565 247.071 16.9765 246.831 17.0965 246.711 cv
17.0965 246.591 17.3365 246.471 17.5765 246.471 cv
17.9365 246.471 18.4165 246.591 19.0165 246.711 cv
25.7365 248.151 li
26.3365 248.271 26.6965 248.391 26.9365 248.511 cv
27.0565 248.511 27.2965 248.631 27.4165 248.631 cv
27.5365 248.751 27.6565 248.871 27.7765 248.991 cv
27.7765 249.111 27.8965 249.231 27.8965 249.471 cv
28.3765 249.591 li
28.3765 246.111 li
27.8965 245.991 li
27.8965 246.231 27.7765 246.471 27.6565 246.591 cv
27.5365 246.711 27.4165 246.831 27.1765 246.831 cv
26.9365 246.831 26.8165 246.831 26.5765 246.831 cv
26.4565 246.711 26.0965 246.711 25.7365 246.591 cv
19.0165 245.151 li
cp
.75021 .679683 .670222 .90164 cmyk
f
30.2965 242.871 mo
30.5365 242.991 30.7765 242.991 31.0165 243.111 cv
31.2565 243.111 31.3765 243.231 31.3765 243.231 cv
31.4965 243.351 31.6165 243.351 31.6165 243.471 cv
31.6165 243.591 31.7365 243.711 31.7365 243.831 cv
32.0965 243.831 li
32.0965 238.191 li
29.5765 237.591 li
29.5765 238.311 li
29.9365 238.431 30.2965 238.551 30.5365 238.671 cv
30.7765 238.791 31.0165 239.031 31.1365 239.151 cv
31.2565 239.271 31.2565 239.391 31.3765 239.631 cv
31.3765 239.751 31.3765 239.991 31.3765 240.231 cv
31.3765 241.911 li
25.6165 240.591 li
25.2565 240.471 25.0165 240.471 24.7765 240.351 cv
24.6565 240.351 24.5365 240.231 24.4165 240.231 cv
24.2965 240.111 24.2965 240.111 24.1765 239.991 cv
24.1765 239.871 24.1765 239.751 24.1765 239.631 cv
23.6965 239.631 li
23.6965 242.271 li
24.1765 242.391 li
24.1765 242.151 24.1765 241.911 24.2965 241.791 cv
24.2965 241.791 24.5365 241.671 24.6565 241.671 cv
24.7765 241.671 24.8965 241.671 25.0165 241.791 cv
25.1365 241.791 25.3765 241.791 25.4965 241.791 cv
30.2965 242.871 li
cp
f
30.5365 235.911 mo
30.8965 235.911 31.2565 235.791 31.6165 235.791 cv
31.8565 235.791 32.0965 235.911 32.3365 235.911 cv
32.5765 235.911 32.6965 236.031 32.9365 236.151 cv
33.0565 236.271 33.2965 236.391 33.5365 236.631 cv
33.8965 236.271 li
33.5365 235.911 33.2965 235.551 33.0565 235.311 cv
32.8165 235.071 32.5765 234.951 32.3365 234.831 cv
32.0965 234.711 31.7365 234.711 31.4965 234.711 cv
31.1365 234.711 30.8965 234.711 30.5365 234.711 cv
30.5365 235.911 li
cp
f
30.4165 229.431 mo
30.7765 229.791 31.0165 230.031 31.1365 230.271 cv
31.2565 230.511 31.3765 230.751 31.3765 230.871 cv
31.3765 231.111 31.2565 231.351 31.1365 231.471 cv
31.0165 231.591 30.7765 231.591 30.5365 231.591 cv
30.4165 231.591 30.2965 231.591 30.2965 231.591 cv
30.1765 231.591 30.0565 231.591 29.9365 231.591 cv
29.8165 231.591 29.6965 231.471 29.5765 231.471 cv
29.4565 231.471 29.2165 231.471 29.0965 231.351 cv
26.3365 230.751 li
26.3365 228.591 li
25.6165 228.351 li
25.6165 230.631 li
24.0565 230.271 li
24.0565 231.231 li
24.2965 231.351 24.4165 231.351 24.6565 231.471 cv
24.7765 231.471 24.8965 231.591 25.0165 231.591 cv
25.1365 231.711 25.2565 231.711 25.3765 231.831 cv
25.4965 231.831 25.4965 231.951 25.6165 231.951 cv
25.6165 232.071 25.7365 232.191 25.7365 232.311 cv
25.8565 232.431 25.8565 232.671 25.8565 232.911 cv
26.3365 233.031 li
26.3365 231.951 li
29.6965 232.791 li
29.9365 232.791 30.0565 232.791 30.2965 232.791 cv
30.4165 232.911 30.6565 232.911 30.7765 232.911 cv
31.2565 232.911 31.6165 232.791 31.8565 232.551 cv
32.0965 232.191 32.2165 231.831 32.2165 231.351 cv
32.2165 231.111 32.2165 230.991 32.0965 230.751 cv
32.0965 230.631 31.9765 230.391 31.8565 230.271 cv
31.7365 230.031 31.6165 229.791 31.4965 229.671 cv
31.2565 229.431 31.1365 229.191 30.8965 229.071 cv
30.4165 229.431 li
cp
f
31.0165 225.951 mo
30.8965 225.831 30.6565 225.711 30.4165 225.471 cv
30.2965 225.351 30.0565 225.111 29.8165 224.871 cv
29.5765 224.751 29.4565 224.511 29.2165 224.271 cv
28.9765 224.031 28.7365 223.791 28.4965 223.671 cv
28.3765 223.431 28.1365 223.191 27.8965 223.071 cv
27.7765 222.951 27.6565 222.711 27.4165 222.591 cv
27.2965 222.471 27.1765 222.351 27.0565 222.351 cv
26.9365 222.231 26.6965 222.111 26.5765 222.111 cv
26.4565 221.991 26.3365 221.991 26.2165 221.991 cv
25.9765 221.871 25.8565 221.871 25.7365 221.871 cv
25.3765 221.871 25.1365 221.991 24.8965 221.991 cv
24.6565 222.111 24.5365 222.231 24.2965 222.471 cv
24.1765 222.711 24.0565 222.951 23.9365 223.191 cv
23.8165 223.551 23.6965 223.911 23.6965 224.391 cv
23.6965 224.751 23.8165 225.111 23.9365 225.591 cv
24.0565 226.071 24.1765 226.551 24.4165 227.151 cv
25.6165 227.151 li
25.6165 226.311 li
25.2565 226.191 24.8965 225.951 24.6565 225.711 cv
24.5365 225.351 24.4165 225.111 24.4165 224.631 cv
24.4165 224.391 24.4165 224.271 24.5365 224.031 cv
24.5365 223.911 24.6565 223.671 24.7765 223.551 cv
24.8965 223.551 25.1365 223.431 25.2565 223.311 cv
25.4965 223.311 25.6165 223.191 25.8565 223.191 cv
26.0965 223.191 26.3365 223.311 26.4565 223.311 cv
26.6965 223.431 26.8165 223.431 27.0565 223.671 cv
27.2965 223.791 27.5365 224.031 27.8965 224.271 cv
28.1365 224.511 28.4965 224.751 28.8565 225.231 cv
29.2165 225.471 29.4565 225.711 29.6965 225.951 cv
29.9365 226.191 30.1765 226.311 30.4165 226.551 cv
30.6565 226.671 30.8965 226.911 31.0165 227.031 cv
31.2565 227.151 31.4965 227.271 31.7365 227.391 cv
32.0965 227.391 li
32.0965 221.871 li
31.7365 221.871 31.4965 221.871 31.1365 221.871 cv
30.8965 221.871 30.5365 221.751 30.2965 221.751 cv
30.2965 222.351 li
30.4165 222.471 30.5365 222.471 30.6565 222.591 cv
30.7765 222.591 30.8965 222.711 30.8965 222.711 cv
31.0165 222.831 31.0165 222.951 31.0165 223.071 cv
31.0165 223.191 31.0165 223.311 31.0165 223.551 cv
31.0165 225.951 li
cp
f
120.537 269.271 mo
91.0165 232.551 li
120.537 195.951 li
cp
.465492 0 .126467 0 cmyk
ef
120.537 269.271 mo
120.177 269.511 li
90.4165 232.551 li
121.017 194.511 li
121.017 270.591 li
120.177 269.511 li
120.537 269.271 li
120.057 269.271 li
120.057 197.271 li
91.6165 232.551 li
120.897 268.911 li
120.537 269.271 li
120.057 269.271 li
120.537 269.271 li
cp
0 .504082 .208499 0 cmyk
f
61.4965 195.951 mo
91.0165 232.551 li
61.4965 269.271 li
cp
.465492 0 .126467 0 cmyk
ef
61.4965 195.951 mo
61.8565 195.591 li
91.6165 232.551 li
61.0165 270.591 li
61.0165 194.511 li
61.8565 195.591 li
61.4965 195.951 li
61.9765 195.951 li
61.9765 267.831 li
90.4165 232.551 li
61.1365 196.191 li
61.4965 195.951 li
61.9765 195.951 li
61.4965 195.951 li
cp
0 .504082 .208499 0 cmyk
f
grestore
62.6965 326.631 mo
84.8965 326.631 li
84.8965 402.111 li
62.6965 402.111 li
cp
.467353 0 .87747 0 cmyk
f
84.7765 402.111 mo
84.2965 402.111 li
84.2965 327.231 li
63.1765 327.231 li
63.1765 401.631 li
84.7765 401.631 li
84.7765 402.111 li
84.2965 402.111 li
84.7765 402.111 li
84.7765 402.591 li
62.2165 402.591 li
62.2165 326.271 li
85.2565 326.271 li
85.2565 402.591 li
84.7765 402.591 li
84.7765 402.111 li
cp
0 .504082 .208499 0 cmyk
f
0 0 0 0 cmyk
%ADOBeginSubsetFont: GFNBAA+CIDFont+F2 Initial
ct_T42Dict begin
-0.5 -0.313 1.238 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /GFNBAA+CIDFont+F2
Type42DictBegin
[<00010000000c000c000c000c4f532f329dc1385f000000cc000000606376
7420b970d8350000012c000005bc6670676d7ede0337000006e800000d2b
676c7966da579f1e0000b1580000144068656164f7ca23fb000014140000
0036686865610dad06da0000144c00000024686d74783ec806fe00001470
00003c2a6c6f6361d394d0430000509c000034fa6d6178702d4f256b0000
8598000000206e616d65666303c5000085b8000006b27072657013672219
00008c6c000024eb676469720000000000000000000000000003042b0190
00050008059905330000011e05990533000003d0008602000800020f0502
020204030204e0002effc000247b00000009000000004d53202000400000
00760600fe0001c4079e0226200001ff0000000003b7050e000000200014
0000079e0000fe930000000000000000000000000050006a007300800080
0086008d009300bf00db006200830093009900a000a600a900b000c100c9
00d700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe79056d000c03b700060013
0000fffaffedfea6ffedfeb8050e000600130000fffaffedfe93050e0013
0420000600130000fffaffedff10ffee050e00130420000600130000fffa
ffeefe93ff10feb80612000a050e0006000d02d2fffafff301fdfffa023f
0006000dff36fffafff302870006000f0000fffafff1079efeaffea70000
0000000000000000000000500051005a005b005c005d0060006100620064
00680069006a006b006c006d006e00680069006e00600067006e00660068
005f00610063006400660068006a006b006c006d006e006f0070006f0072
0074007500760076007000720073007400750076006f0070007100720073
00750077007700780079007a007b007c007d007b007c007d00770079007a
007c0078007a007c007d0078007d007e007f008000810082007e007f0081
0082007e007f008000810082008300840085008600870088008900830084
008500860087008800890083008400850086008700880089008900860087
00880089008a008b008c008d008e008f008a008b008c008d008e008f008a
008b008c008d008e008f008d008a008b008c008d008e008f009000900091
0092009300940095009600980099009b009c009000910092009300940095
0096009700980099009a009e009f00a60090009100950098009f00900091
0096009700bc00c600b500ae00af00b6006800690063006a006f00700071
006f0070007100720066006c006d00700079007c007f0083008600870088
0089008a0074007500760077007a007b007c007d007e008200850086008a
0088008900830078007b00820083008600870088008900760079007a007c
007d007e0083008500880089008a0073007400750077007a007d00880089
008a008b008c008d008e00900094008b008c008d00910092009300940095
008c008d00910095008f009000910092009300940095008b008c008d008e
008f009000910092009300940095008b008c008d008e008f009000910092
00930096009700980099009c0096009700980099009a009b009c00960099
009a009c0096009700980099009a009b009c009700980099009a009b009c
009700980099009a009b009c0096009d00a000a1009d009e009f00a000a1
00a2009d009f00a000a1009f00a2009d009e009f00a000a100a2009d009e
00a000a1009d009e00a000a2009d00a300a400a500a600a700a300a400a6
00a700a300a400a500a600a700a600a300a700a800a900aa00ab00ac00ac
00a800a900aa00ab00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae
00ad00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00ad
00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00af00b0
00b100b200b300b400b500b600b700b800b300ae00af00b000b200b500b6
00b700b800b900ba00bb00bc00be00c000c100c200c200b900ba00bb00bc
00bd00be00bf00c000c100c200c400ba00bb00be00bf00c000c200c300c4
00b900ba00bf00c000c200c600c700c900ca00cb00cc00cf00c500c700ce
00c500c700c800cf00d000d200d300d7010d00d000d100e900d000fd00d0
05e4000e0041000005ba009c009c005e005e000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000051a001500a0fff8ff77
fff803480066015401cc00ac00a200b4008c0101006e0000000000000000
0000011f000a04e2001400b4fff6035c00140028fdda0568fea2ffef405a
868574737271706f6e6d6c6b6a696867666564625f5e5d5c5b5a59585554
535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a39383736
352f2e2d2c2826252423221f181411100f0d0b0a09080706050403020100
2c4523466020b02660b004262348482d2c452346236120b02661b0042623
48482d2c45234660b0206120b04660b004262348482d2c4523462361b020
6020b02661b02061b004262348482d2c45234660b0406120b06660b00426
2348482d2c4523462361b0406020b02661b04061b004262348482d2c0110
203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed
51582320b04d44235920b0042651582320b00d44235921212d2c20204518
684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c00
b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228453ab102
00080d2d2c2045b00325456164b050515845441b2121592d2c2045b00043
60442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb8
100062602b0c642364615c58b00361592d2c8a03458a8a87b0112bb02923
44b0297ae4182d2c4565b02c234445b02b23442d2c4b525845441b212159
2d2c01b005251023208af500b0016023edec2d2c01b005251023208af500
b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d
2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c6423648b
b84000622d2c21b08051580c6423648bb82000621bb200402f2b59b00260
2d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c64
23648bb84000626023212d2c4523456023456023456023766818b0806220
2d2cb00426b00426b00425b0042545234520b003266062636820b0032661
658a2344442d2c2045b0005458b040442045b04061441b2121592d2c45b1
302f4523456160b0016069442d2c4b5158b02f2370b01423421b2121592d
2c4b515820b0032545695358441b2121591b2121592d2c45b01443b00060
63b0016069442d2cb02f45442d2c452320458a60442d2c45234560442d2c
4b235158b90033ffe0b134201bb3330034005944442d2cb0164358b00326
458a586466b01f601b64b020606620581b21b04059b001615923586559b0
2923442310b029e01b2121212121592d2cb0164358b004254564b0206066
20581b21b04059b0016123586559b0292344b00425b00725082058021b03
59b0052510b004252046b0042523423cb0072510b006252046b00425b001
6023423c2058011b0059b0052510b00425b029e0b0072510b00625b029e0
b00425b00725082058021b0359b00425b003254348b00625b00325b00160
43481b2159212121212121212d2cb0164358b004254564b020606620581b
21b04059b0016123581b6559b0292344b00525b00825082058021b0359b0
042510b005252046b0042523423cb00425b0072508b0072510b006252046
b00425b0016023423c2058011b0059b0042510b00525b029e0b029204565
44b0072510b00625b029e0b00525b00825082058021b0359b00525b00325
4348b00425b0072508b00625b00325b0016043481b215921212121212121
2d2c02b00425202046b004252342b0052508b003254548212121212d2c02
b0032520b0042508b0022543482121212d2c452320451820b00050205823
652359236820b040505821b04059235865598a60442d2c4b53234b515a58
20458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b51
5a58381b2121592d2cb000214b5458381b2121592d2cb002435458b0462b
1b21212121592d2cb002435458b0472b1b212121592d2cb002435458b048
2b1b21212121592d2cb002435458b0492b1b212121592d2c2320b000508a
8a64b10003255458b0401bb10103255458b005438b59b04f2b5923b0622b
2321235865592d2cb108000c215460432d2c014623466023466123201020
468a61b8ff80628ab140408a704560683a2d2c208a2349648a2353583c1b
21592d2c4b52587d1b7a592d2cb012004b014b54422d2cb1020042b12301
8851b1400188535a58b910000020885458b202010243604259b124018851
58b920000040885458b2020202436042b12401885458b202200243604200
4b014b5258b2020802436042591bb940000080885458b202040243604259
b94000008063b80100885458b202080243604259b94000010063b8020088
5458b202100243604259b12601885158b94000020063b80400885458b202
400243604259b94000040063b80800885458b202800243604259b1280188
5158b94000080063b81000885458ba000201000002436042595959595959
59b10002435458400a0540084009400c020d021bb10102435458b2054008
ba010000090100b30c010d011bb18002435258b2054008b80180b109401b
b901000002435258b2054008ba0180000901401bb901800002435258b205
4008b80200b109401bb2054008ba010000090100595959b9400000808855
b94000020063b8040088555a58b30c000d011bb30c000d01595959424242
42422d2c451868234b51582320452064b04050587c59688a6059442d2cb0
0016b00225b0022501b001233e00b002233eb10102060cb00a236542b00b
234201b001233f00b002233fb10102060cb006236542b0072342b0011601
2d2c20b82000628a6023622d2cb0072558001b0159b0042510b00325b002
2520b8ffff545821cd1bed5921b006255cb006255a58b0092b5920b00525
4ab0042547b004254760b0062547b0806361b00225b0005558b00325b007
25496359b0082558001b0159b00425b0062549b009255cb009255a58b009
2b59b0072546b0806361b0032520b0005558631b2159612320b0005558b0
80631b21b08059b0592bb006255c586959b00425202010b00048233ab006
2658001b0159b0052658b003252f598a12233221212d2cb00625b00a2587
b00625b009254ab0005358b00625b00a251bb00925b0072559b00225b002
25070cb005256323b00625636020b94000040063535821b00426b00426b0
0a1bb94000040063655158b0042665b0042665b00a1bb00426b00426b000
b00325b003250b0d0ab0092eb00725b007250b0d0ab00b2eb00525b00525
07595920b0005558b00525b0052587b00725b007250bb0092510b00b25b0
092620b8ffff545821cd1bed59b00525b0052507b00825b00b254923b006
25b0062587b00a2510b00b25c15920b00051b800522378b00161b00225b0
0725b0072507b00a25b00d254961b08062b00525b005250bb00a252338b0
0625b0062587b00825b008250bb00a2510b00b25c4b00625b0062507b009
25b00c2549b0032554b8ffa723792121212121212121212121212d2c23b0
005458b9400000001bb900004000598ab0005458b9400000001bb9000040
0059b05b2b2d2c08b0005458b9400000001bb900004000590db05b2b2d2c
8a8a080d8ab0005458b9400000001bb90000400059b05b2b2d2cb00426b0
0426080db00426b00426080db05b2b2d2cb0022563b0206066b00225b820
00626023622d2c204569442d2c234ab1024e2b2d2c234ab1014e2b2d2c23
8a4a234564b0022564b002256164b00343525821206459b1024e2b23b000
505865592d2c238a4a234564b0022564b002256164b00343525821206459
b1014e2b23b000505865592d2c20b003254ab1024e2b8a103b2d2c20b003
254ab1014e2b8a103b2d2cb00325b003258ab0672b8a103b2d2cb00325b0
03258ab0682b8a103b2d2cb0032546b003254660b004252eb00425b00425
b0042620b000505821b06a1bb06c592bb0032546b00325466061b0806220
8a2010233a232010233a2d2cb0032547b003254760b0052547b0806361b0
0225b00625496323b005254ab080632058621b2159b0042646608a468a46
60b02063612d2cb00426b00425b00425b00426b06e2b208a2010233a2320
10233a2d2c2320b001545821b00225b1024e2bb0805020605920606020b0
01515821211b20b005515821206661b0402361b100032550b00325b00325
505a5820b00325618a535821b000591b21591bb00754582066616523211b
2121b000595959b1024e2b2d2cb00225b004254ab0005358b0001b8a8a23
8ab00159b004254620666120b00526b0062649b00526b00526b0702b2361
65b02060206661b02061652d2cb0022546208a20b000505821b1024e2b1b
452321596165b00225103b2d2cb0042620b802006220b80200638a236120
b05d602bb00525118a128a20398a58ba005d10000004266356602b232120
10204620b1024e2b23611b2321208a201049b1024e2b593b2d2cba005d10
000009256356602bb00525b00525b00526b06d2bb15d0725602bb00525b0
0525b00525b00525b06f2bba005d10000008266356602b20b0005258b050
2bb00525b00525b00725b00725b00525b0712bb0021738b00052b00225b0
01525a58b00425b0062549b00325b00525496020b0405258211bb0005258
20b0025458b00425b00425b00725b0072549b00217381bb00425b00425b0
0425b0062549b0021738595959595921212121212d2cb12801885158b940
00040063b8080088545c1bb001592d2cb12801885158b94000040063b808
0088545c1bb001592d0000010000000638523e2f16f95f0f3cf500190800
00000000bbeb7ccc00000000d6c62429fbfafd8009ec0836000000090002
000000000000000100000600fe0001c40aa0fbfafaa009ec000100000000
000000000000000000000399040e00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000044400610000
00000000000000000000000000000000000004ec00ac0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000003ad00ac000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000006d700ac052a00ac0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0434006000000000000000000000000003fb005d00000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000001d6
008500000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000438005a0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000043400990000
00000000000002ca00990000000000000000000000000321005100000000
000000000000000000000000000000000000000000000000000000000000
000002ae0021000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000039d002200000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000335
008b00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000>
<000000bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf00bf
00bf00bf00bf00bf01570157015701570157015701d401d401d401d401d4
01d401d401d401d401d401d401d401d401d4025002500250025002500250
025002500250025002500250025002500250025002500250025002500250
025002500250025002500250025002500250031203bd03bd03bd03bd03bd
03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd
03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd
03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd
03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd
03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd
03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd
03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd
03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd
03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd
03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd
03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd
03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd
03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd
03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd03bd046c046c
046c046c052b052b052b052b052b052b052b052b052b052b052b052b052b
052b052b052b052b052b052b052b052b052b052b052b052b052b052b052b
052b052b052b052b052b052b052b052b052b052b052b052b052b052b052b
052b052b052b052b052b052b052b052b052b052b052b052b052b052b052b
052b052b052b052b052b05b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b105b105b105b105b105b105b105b105b1
05b105b105b105b105b105b105b106500650065006500650065006500650
065006500650065006ff06ff06ff07890789078907890870087008700870
087008700870087008700870090209020902090209020902090209020902
090209020902090209020902090209020902090209020902090209020902
0902090209020902090209020902090209020902090209020902090209ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce09ce
09ce09ce09ce09ce09ce0a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200a200a200a200a200a200a200a200a200a200a200a200a200a200a20
0a200000000100001a7c004f00050000000000020010002f008700001236
24eb000000000000000e00ae000000030000000002100000000000030000
00070076021000010000000000000108028600010000000000030009038e
00010000000000040009038e00010000000000060009038e000100000000
0007003b03970003000104090000021203d20003000104090001001205e4
0003000104090002000e05f60003000104090003001205e4000300010409
0004001205e40003000104090006001205e4000300010409000700760210
00a9002000320030003100380020004d006900630072006f0073006f0066
007400200043006f00720070006f0072006100740069006f006e002e0020
0041006c006c002000520069006700680074007300200052006500730065
0072007600650064002e000d0048006500620072006500770020004f0070
0065006e00540079007000650020004c00610079006f007500740020006c
006f00670069006300200063006f00700079007200690067006800740020
00a9002000320030003000330020002600200032003000300037002c0020
00520061006c00700068002000480061006e0063006f0063006b00200026
0020004a006f0068006e00200048007500640073006f006e002e00200054
0068006900730020006c00610079006f007500740020006c006f00670069
006300200066006f00720020004200690062006c006900630061006c0020
0048006500620072006500770020006900730020006f00700065006e0020
0073006f007500720063006500200073006f006600740077006100720065
00200075006e00640065007200200074006800650020004d004900540020
004c006900630065006e00730065003b002000730065006500200065006d
0062006500640064006500640020006c006900630065006e007300650020
006400650073006300720069007000740069006f006e00200066006f0072
002000640065007400610069006c0073002e00430061006c006900620072
006900200069007300200061002000740072006100640065006d00610072
006b0020006f006600200074006800650020004d006900630072006f0073
006f00660074002000670072006f007500700020006f006600200063006f
006d00700061006e006900650073002ea92032303138204d6963726f736f
667420436f72706f726174696f6e2e20416c6c2052696768747320526573
65727665642e0d486562726577204f70656e54797065204c61796f757420
6c6f67696320636f7079726967687420a92032303033202620323030372c
2052616c70682048616e636f636b2026204a6f686e20487564736f6e2e20
54686973206c61796f7574206c6f67696320666f72204269626c6963616c
20486562726577206973206f70656e20736f7572636520736f6674776172
6520756e64657220746865204d4954204c6963656e73653b207365652065
6d626564646564206c6963656e7365206465736372697074696f6e20666f
722064657461696c732e5a405236312e746d7043616c6962726920697320
612074726164656d61726b206f6620746865204d6963726f736f66742067
726f7570206f6620636f6d70616e6965732e00a900200032003000310038
0020004d006900630072006f0073006f0066007400200043006f00720070
006f0072006100740069006f006e002e00200041006c006c002000520069
0067006800740073002000520065007300650072007600650064002e000d
000a0048006500620072006500770020004f00700065006e005400790070
00650020004c00610079006f007500740020006c006f0067006900630020
0063006f0070007900720069006700680074002000a90020003200300030
00330020002600200032003000300037002c002000520061006c00700068
002000480061006e0063006f0063006b002000260020004a006f0068006e
00200048007500640073006f006e002e002000540068006900730020006c
00610079006f007500740020006c006f00670069006300200066006f0072
0020004200690062006c006900630061006c002000480065006200720065
00770020006900730020006f00700065006e00200073006f007500720063
006500200073006f00660074007700610072006500200075006e00640065
007200200074006800650020004d004900540020004c006900630065006e
00730065003b002000730065006500200065006d00620065006400640065
00640020006c006900630065006e00730065002000640065007300630072
0069007000740069006f006e00200066006f007200200064006500740061
0069006c0073002e005a0040005200360031002e0074006d007000520065
00670075006c006100720000b10903415302c802c60038001f02c702c600
38001f02dd003802da005502d9003802d7005502d8003802d7005502d600
3802d5005502d4003802d3005502d2003802d1005502bf003802be005502
bd003802bc0055000402db003402db005402db0003003402db005402db00
6402db00a402db00d402db0005006b02d50001000b02d10001001402c200
4402c2006402c2007402c2009402c2000500a402be000100a402bc000100
200284b40918014a20b80283b40918014a20b80282b40918014a20b80281
b40918014a20b80280b40918014a20b8027fb40918014a20b8027eb40918
014a20b8027db40918014a20b8027cb40918014a20b8027bb40918014a20
b8027ab40918014a20b80279b40918014a20b80278b40918014a20b80277
b40918014a20b80276b40918014a20b80275b40918014a20b80274b40918
014a20b80273b40918014a20b80271b40918014a20b80270b40918014a20
b8026fb40918014a20b8026eb40918014a20b8026db40918014a20b8026c
b40918014a20b8026bb40918014a20b8026ab40918014a20b80269b40918
014a20b80268b40918014a20b80267b40918014a20b80266b40918014a20
b80265b40918014a20b80264b40918014a20b80263b40918014a20b80262
b40918014a20b80261b40918014a20b80260b40918014a20b8025fb40918
014a20b8025eb40918014a20b8025db40918014a20b8025cb40918014a20
b8025bb40918014a20b8025ab40918014a20b80259b40918014a20b80258
b40918014a20b80257b40918014a20b80256b40918014a20b80255b40918
014a20b80254b40918014a20b80253b40918014a20b80252b40918014a20
b80251b40918014a20b80250b40918014a20b8024fb40918014a20b8024e
b40918014a20b8024db40918014a20b8024cb40918014a20b8024bb40918
014a20b8024ab40918014a20b80249b40918014a20b80248b40918014a20
b80247b40918014a20b80246b40918014a20b80245b40918014a20b80244
b40918014a20b80243b40918014a20b80242b40918014a20b80241b40918
014a20b80240b40918014a20b8023fb40918014a20b8023eb40918014a20
b8023db40918014a20b8023cb40918014a20b8023bb40918014a20b8023a
b40918014a20b80239b40918014a20b80238b40918014a20b80237b40918
014a20b80236b40918014a20b80235b40918014a20b80234b40918014a20
b80233b40918014a20b80232b40918014a20b80231b40918014a20b80230
b40918014a20b8022fb40918014a20b8022eb40918014a20b8022db40918
014a20b8022cb40918014a20b8022bb40918014a20b8022ab40918014a20
b80229b40918014a20b80228b40918014a20b80227b40918014a20b80226
b40918014a20b80225b40918014a20b80224b40918014a20b80223b40918
014a20b80222b40918014a20b80221b40918014a20b80220b40918014a20
b8021fb40918014a20b8021eb40918014a20b8021db40918014a20b8021c
b40918014a20b8021bb40918014a20b8021ab40918014a20b80219b40918
014a20b80218b40918014a20b80217b40918014a20b80216b40918014a20
b80215b40918014a20b80214b40918014a20b80213b40918014a20b80212
b40918014a20b80211b40918014a20b80210b40918014a20b8020fb40918
014a20b8020eb40918014a20b8020db40918014a20b8020cb40918014a20
b8020bb40918014a20b8020ab40918014a20b80209b40918014a20b80208
b40918014a20b80207b40918014a20b80206b40918014a20b80205b40918
014a20b80204b40918014a20b80203b40918014a20b80202b40918014a20
b80201b40918014a20b80200b40918014a20b801ffb40918014a20b801fe
b40918014a20b801fdb40918014a20b801fcb40918014a20b801fbb40918
014a20b801fab40918014a20b801f9b40918014a20b801f8b40918014a20
b801f7b40918014a20b801f6b40918014a20b801f5b40918014a20b801f4
b40918014a20b801f3b40918014a20b801f2b40918014a20b801f1b40918
014a20b801f0b40918014a20b801efb40918014a20b801eeb40918014a20
b801edb40918014a20b801ecb40918014a20b801ebb40918014a20b801ea
b40918014a20b801e9b40918014a20b801e8b40918014a20b801e7b40918
014a20b801e6b40918014a20b801e5b40918014a20b801e4b40918014a20
b801e3b40918014a20b801e2b40918014a20b801e1b40918014a20b801e0
b40918014a20b801dfb40918014a20b801deb40918014a20b801ddb40918
014a20b801dcb40918014a20b801dbb40918014a20b801dab40918014a20
b801d9b40918014a20b801d8b40918014a20b801d7b40918014a20b801d6
b40918014a20b801d5b40918014a20b801d4b40918014a20b801d3b40918
014a20b801d2b40918014a20b801d1b40918014a20b801d0b40918014a20
b801cfb40918014a20b801ceb40918014a20b801cdb40918014a20b801cc
b40918014a20b801cbb40918014a20b801cab40918014a20b801c9b40918
014a20b801c8b40918014a20b801c7b40918014a20b801c6b40918014a20
b801c5b40918014a20b801c4b40918014a20b801c3b40918014a20b801c2
b40918014a20b801c1b40918014a20b801c0b40918014a20b801bfb40918
014a20b801beb40918014a20b801bdb40918014a20b801bcb40918014a20
b801bbb40918014a20b801bab40918014a20b801b9b40918014a20b801b8
b40918014a20b801b7b40918014a20b801b6b40918014a20b801b5b40918
014a20b801b4b40918014a20b801b3b40918014a20b801b2b40918014a20
b801b1b40918014a20b801b0b40918014a20b801afb40918014a20b801ae
b40918014a20b801adb40918014a20b801acb40918014a20b801abb40918
014a20b801aab40918014a20b801a9b40918014a20b801a8b40918014a20
b801a7b40918014a20b801a6b40918014a20b801a5b40918014a20b801a4
b40918014a20b801a3b40918014a20b801a2b40918014a20b801a1b40918
014a20b801a0b40918014a20b8019fb40918014a20b8019eb40918014a20
b8019db40918014a20b8019cb40918014a20b8019bb40918014a20b8019a
b40918014a20b80199b40918014a20b80198b40918014a20b80197b40918
014a20b80196b40918014a20b80195b40918014a20b80194b40918014a20
b80193b40918014a20b80192b40918014a20b80191b40918014a20b80190
b40918014a20b8018fb40918014a20b8018eb40918014a20b8018db40918
014a20b8018cb40918014a20b8018bb40918014a20b8018ab40918014a20
b80189b40918014a20b80188b40918014a20b80187b40918014a20b80186
b40918014a20b80185b40918014a20b80184b40918014a20b80183b40918
014a20b80182b40918014a20b80181b40918014a20b80180b40918014a20
b8017fb40918014a20b8017eb40918014a20b8017db40918014a20b8017c
b40918014a20b8017bb40918014a20b8017ab40918014a20b80179b40918
014a20b80178b40918014a20b80177b40918014a20b80176b40918014a20
b80175b40918014a20b80174b40918014a20b80173b40918014a20b80172
b40918014a20b80171b40918014a20b80170b40918014a20b8016fb40918
014a20b8016eb40918014a20b8016db40918014a20b8016cb40918014a20
b8016bb40918014a20b8016ab40918014a20b80169b40918014a20b80168
b40918014a20b80167b40918014a20b80166b40918014a20b80165b40918
014a20b80164b40918014a20b80163b40918014a20b80162b40918014a20
b80161b40918014a20b80160b40918014a20b8015fb40918014a20b8015e
b40918014a20b8015db40918014a20b8015cb40918014a20b8015bb40918
014a20b8015ab40918014a20b80159b40918014a20b80158b40918014a20
b80157b40918014a20b80156b40918014a20b80155b40918014a20b80154
b40918014a20b80153b40918014a20b80152b40918014a20b80150b40918
014a20b8014fb40918014a20b8014eb40918014a20b8014cb40918014a20
b8014bb40918014a20b8014ab40918014a20b80149b40918014a20b80148
b40918014a20b80147b40918014a20b80146b40918014a20b80145b40918
014a20b80144b40918014a20b80143b30918014ab80284b21e3e1fb80283
b21e151fb80282b21e3e1fb80281b21e3a1fb80280b21e3e1fb8027fb21e
3e1fb8027eb21e0c1fb8027db21e3e1fb8027cb21e3e1fb8027bb21e3e1f
b8027ab21e3e1fb80279b21d411fb80278b21d431fb80277b21d431fb802
76b21d431fb80275b21d411fb80274b21d431fb80273b21d431fb80272b2
1d411fb80271b21d421fb80270b21d421fb8026fb21d421fb8026eb21d43
1fb8026db21d431fb8026cb21d431fb8026bb21c451fb8026ab21c451fb8
0269b21c451fb80268b21c451fb80267b21c451fb80266b21c441fb80265
b21c451fb80264b21c451fb80263b21c451fb80262b21c451fb80261b21c
451fb80260b21c451fb8025fb21c451fb8025eb21c441fb8025db21c451f
b8025cb21c451fb8025bb21c451fb8025ab21c451fb80259b21c451fb802
58b21c451fb80257b21c451fb80256b21c451fb80255b21c451fb80254b2
1c451fb80253b21c451fb80252b21c451fb80251b21c451fb80250b21c45
1fb8024fb21c451fb8024eb21c451fb8024db21c451fb8024cb21c451fb8
024bb21c451fb8024ab21b491fb80249b21b491fb80248b21b4a1fb80247
b21b4a1fb80246b21b4b1fb80245b21b4c1fb80244b21b4c1fb80243b21b
4c1fb80242b21b4b1fb80241b21b491fb80240b21b491fb8023fb21b4a1f
b8023eb21b4a1fb8023db21b4a1fb8023cb21b4b1fb8023bb21b4b1fb802
3ab21b4c1fb80239b21b4c1fb80238b21b4c1fb80237b21b4c1fb80236b2
1b4c1fb80235b21b491fb80234b21b491fb80233b21b4a1fb80232b21b4a
1fb80231b21b4a1fb80230b21b4b1fb8022fb21b4b1fb8022eb21b4c1fb8
022db21b4c1fb8022cb21b4c1fb8022bb21b4c1fb8022ab21b4c1fb80229
b21b4c1fb80228b21b4c1fb80227b21b491fb80226b21b491fb80225b21b
4a1fb80224b21b4a1fb80223b21b4a1fb80222b21b4b1fb80221b21b4b1f
b80220b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8021db21b4c1fb802
1cb21b4c1fb8021bb21b4c1fb8021ab21a4e1fb80219b21a4e1fb80218b2
1a4f1fb80217b21a4f1fb80216b21a4e1fb80215b21a4e1fb80214b21a4f
1fb80213b21a4f1fb80212b21a4f1fb80211b21a4e1fb80210b21a4e1fb8
020fb21a4f1fb8020eb21a4f1fb8020db21a4f1fb8020cb21a4e1fb8020b
b21a4e1fb8020ab21a4e1fb80209b21a4f1fb80208b21a4f1fb80207b21a
4f1fb80206b219501fb80205b219511fb80204b219511fb80203b219501f
b80202b219511fb80201b219511fb80200b219511fb801ffb219511fb801
feb219501fb801fdb219511fb801fcb219511fb801fbb219511fb801fab2
19501fb801f9b219511fb801f8b219511fb801f7b219511fb801f6b21951
1fb801f5b218541fb801f4b218531fb801f3b218541fb801f2b218541fb8
01f1b218541fb801f0b218531fb801efb218541fb801eeb218541fb801ed
b218541fb801ecb218531fb801ebb218531fb801eab218541fb801e9b218
541fb801e8b218541fb801e7b218541fb801e6b218531fb801e5b218541f
b801e4b218531fb801e3b218541fb801e2b218541fb801e1b218541fb801
e0b218531fb801dfb218531fb801deb218541fb801ddb218541fb801dcb2
18541fb801dbb218541fb801dab218531fb801d9b218541fb801d8b21854
1fb801d7b217571fb801d6b217561fb801d5b217561fb801d4b217571fb8
01d3b217571fb801d2b217571fb801d1b217571fb801d0b217561fb801cf
b217561fb801ceb217571fb801cdb217571fb801ccb217571fb801cbb217
571fb801cab217561fb801c9b217561fb801c8b217571fb801c7b217571f
b801c6b217571fb801c5b217571fb801c4b217571fb801c3b217561fb801
c2b217571fb801c1b217571fb801c0b217571fb801bfb217561fb801beb2
17561fb801bdb217571fb801bcb217571fb801bbb217571fb801bab21757
1fb801b9b217571fb801b8b217561fb801b7b217571fb801b6b217571fb8
01b5b217571fb801b4b217571fb801b3b2163f1fb801b2b2165b1fb801b1
b2165b1fb801b0b2165b1fb801afb2165b1fb801aeb2165b1fb801adb216
5b1fb801acb2165b1fb801abb2165b1fb801aab2163e1fb801a9b2163f1f
b801a8b2163f1fb801a7b2165b1fb801a6b2165b1fb801a5b2165b1fb801
a4b2165b1fb801a3b2165b1fb801a2b2165b1fb801a1b2165b1fb801a0b2
165b1fb8019fb2163e1fb8019eb2163f1fb8019db2163f1fb8019cb2165b
1fb8019bb2165b1fb8019ab2165b1fb80199b2165b1fb80198b2163e1fb8
0197b2165b1fb80196b2165b1fb80195b2165b1fb80194b2163e1fb80193
b2163f1fb80192b2163f1fb80191b2165b1fb80190b2165b1fb8018fb216
5b1fb8018eb2165b1fb8018db2165b1fb8018cb2163f1fb8018bb2165b1f
b8018ab2165b1fb80189b2165b1fb80188b2165b1fb80187b2165b1fb801
86b215611fb80185b215621fb80184b215621fb80183b215661fb80182b2
15661fb80181b215551fb80180b215451fb8017fb215361fb8017eb21536
1fb8017db215611fb8017cb215621fb8017bb215621fb8017ab215641fb8
0179b215661fb80178b215661fb80177b215661fb80176b215661fb80175
b215661fb80174b215661fb80173b215451fb80172b215621fb80171b215
621fb80170b215631fb8016fb215641fb8016eb215661fb8016db215661f
b8016cb215661fb8016bb215661fb8016ab215661fb80169b215621fb801
68b215621fb80167b215611fb80166b215641fb80165b215641fb80164b2
15661fb80163b215661fb80162b215661fb80161b215661fb80160b21566
1fb8015fb215661fb8015eb215551fb8015db215451fb8015cb215451fb8
015bb215361fb8015ab215611fb80159b215621fb80158b215621fb80157
b215631fb80156b215641fb80155b215661fb80154b215661fb80153b215
661fb80152b215661fb80151b214401fb80150b214551fb8014fb214561f
b8014eb214831fb8014db2142d1fb8014cb214401fb8014bb214401fb801
4ab214411fb80149b214401fb80148b214401fb80147b214411fb80146b2
147e1fb80145b214871fb80144b2147f1fb80143b214801fb80142b21246
1fb80141b212461fb80140b212461fb8013fb212461fb8013eb212441fb8
013db212461fb8013cb211591fb8013bb211591fb8013ab2115b1fb80139
b2115b1fb80138b211471fb80137b211581fb80136b2115a1fb80135b211
5b1fb80134b2115b1fb80133b2112c1fb80132b211471fb80131b211551f
b80130b211571fb8012fb211571fb8012eb211581fb8012db211591fb801
2cb211591fb8012bb2115a1fb8012ab2115a1fb80129b2115b1fb80128b2
115b1fb80127b2115b1fb80126b2115b1fb80125b211561fb80124b21156
1fb80123b211571fb80122b211581fb80121b211591fb80120b2115a1fb8
011fb2115a1fb8011eb2115b1fb8011db2115b1fb8011cb2115b1fb8011b
b2115b1fb8011ab2115b1fb80119b2105d1fb80118b2105e1fb80117b210
5f1fb80116b2105f1fb80115b2105f1fb80114b2105f1fb80113b2105f1f
b80112b2105d1fb80111b2105e1fb80110b2105f1fb8010fb2105f1fb801
0eb2105f1fb8010db2105f1fb8010cb2105d1fb8010bb2105e1fb8010ab2
105f1fb80109b2105f1fb80108b2105f1fb80107b2105f1fb80106b2105d
1fb80105b2105e1fb80104b2105f1fb80103b2105f1fb80102b2105f1fb8
0101b2105f1fb8010040ff0f621fff0f621ffe0f631ffd0f641ffc0f621f
fb0f621ffa0f621ff90f631ff80f641ff70f641ff60f641ff50f641ff40f
621ff30f621ff20f631ff10f641ff00f641fef0f641fee0f641fed0f621f
ec0f621feb0f631fea0f641fe90f641fe80f641fe70f641fe60e671fe50e
681fe40e681fe30e681fe20e681fe10e671fe00e681fdf0e681fde0e681f
dd0e671fdc0e681fdb0e681fda0e681fd90e681fd80d6b1fd70d311fd60d
6b1fd50d6c1fd40d261fd30d261fd20d6c1fd10d2b1fd00d2b1fcf0d2b1f
ce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1fc90d6d1fc80d6a1fc70d
691fc60d681fc50d671fc40d261fc30d311fc20d311fc10d311f40ffc00d
311fbf0d311fbe0d311fbd0c711fbc0c721fbb0c731fba0c741fb90c741f
b80c741fb70c711fb60c711fb50c721fb40c731fb30c741fb20c741fb10c
741fb00c741faf0b791fae0b7a1fad0b7c1fac0b7d1fab0b7e1faa0b7e1f
a90b7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1fa40b7e1fa30b7e1fa20b
791fa10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b7e1f9c0b791f9b0b7a1f
9a0b7c1f990b7d1f980b7e1f970b7e1f960b7e1f950b7e1f940b7e1f930b
7e1f920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a671f8d0aa51f8c0aa71f
8503251f8403381f8301381f8255805581ab80557f557d557eab7d550b7d
010b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a557bab7a557955775578
ab7755ba028600660285403c5576ab755504751475747503f47501ab7501
44750130750102007510752075030c7455725573ab7255007250728072b0
72043bb072e072020072010ab8ffc0b3721b1e46b8ffc0407c720d104671
556f5570ab6f556e666d556a03251f6938675568ab67556638645565ab64
5563386255613860555f385d555eab5d555c385a555bab5a555938585557
03251f5638545555ab54555338515552ab51554f384e554e03251f4d384b
554cab4b554a38485549ab4855473846554503381f001c101c201c0310b8
ffc0404e1c1b1e46001b0142301b401be01bf01b04001bb01bc01b03120f
1a1f1a02290f1901434f19016f197f198f19030f18cf18024018292c460f
17cf17df17ef1704134017292e460016101620160315b8ffc0b3164d5446
b8ffc0b3163f4446b8ffc0b316313546b8ffc0401f162326460f15010f15
1f150245ef1501860003012001010001100120010308b8ffc0b401151f46
03bd0100010000050001019000542b4bb80800524bb008505bb00188b025
53b00188b040515ab00688b000555a5b58b101018e59b101024354b0144b
515a58b101018e59858d8d001d424bb01d5358b203a0a01d42594bb08053
58b20340401d42594bb0ff5358b20300001d42592b5e7375732b58403d00
11e011f0110315bf10cf10020f0f010f0fff0f02400f3135460f0e1f0e02
0f0e1f0eff0e03400e3137460f0d1f0d020f0d1f0dff0d0316400d313746
b8ffc040270c5054460f0b1f0b02553f0b4f0b02400b3f4346400b2d3046
0003012001010001100120010308b8ffc0b301151f462b5e7375732b2b74
5e732b2b5e73742b73742b7374745e735901755e73742b2b2b2b5e732b5e
732b7374755e735e735e73755e732b5e73002b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b5e735f7373
7373742b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2bb1000243545841ff02840064028300
64028200640281006402800064027f0064027e0064027d0064027c006402
7b0064027a00640279006402780064027700640276006402750064027400
64027300640271006402700064026f0064026e0064026d0064026c006402
6b0064026a00640269006402680064026700640266006402650064026400
6402630064026200640261006402600064025f0064025e0064025d006402
5c0064025b0064025a006402590064025800640257006402560064025500
640254006402530064025200640251006402500064024f0064024e006402
4d0064024c0064024b0064024a0064024900640248006402470064024600
64024500640244006402430064024200640241006402400064023f006402
3e0064023d0064023c0064023b0064023a00640239006402380064023700
640236006402350064023400640233006402320064023100640230006402
2f0064022e0064022d0064022c0064022b0064022a006402290064022800
640227006402260064022500640224006402230064022200640221006402
200064021f0064021e0064021d0064021c0064021b0064021a0064021900
640218006402170064021600640215006402140064021300640212006402
11006402100064020f0064020e0064020d0064020c0064020b0064020a00
640209006402080064020700640206006402050064020441ff0064020300
6402020064020100640200006401ff006401fe006401fd006401fc006401
fb006401fa006401f9006401f8006401f7006401f6006401f5006401f400
6401f3006401f2006401f1006401f0006401ef006401ee006401ed006401
ec006401eb006401ea006401e9006401e8006401e7006401e6006401e500
6401e4006401e3006401e2006401e1006401e0006401df006401de006401
dd006401dc006401db006401da006401d9006401d8006401d7006401d600
6401d5006401d4006401d3006401d2006401d1006401d0006401cf006401
ce006401cd006401cc006401cb006401ca006401c9006401c8006401c700
6401c6006401c5006401c4006401c3006401c2006401c1006401c0006401
bf006401be006401bd006401bc006401bb006401ba006401b9006401b800
6401b7006401b6006401b5006401b4006401b3006401b2006401b1006401
b0006401af006401ae006401ad006401ac006401ab006401aa006401a900
6401a8006401a7006401a6006401a5006401a4006401a3006401a2006401
a1006401a00064019f0064019e0064019d0064019c0064019b0064019a00
640199006401980064019700640196006401950064019400640193006401
9200640191006401900064018f0064018e0064018d0064018c0064018b00
64018a006401890064018800640187006401860064018500644180018400
6401830064018200640181006401800064017f0064017e0064017d006401
7c0064017b0064017a006401790064017800640177006401760064017500
640174006401730064017200640171006401700064016f0064016e006401
6d0064016c0064016b0064016a0064016900640168006401670064016600
64016500640164006401630064016200640161006401600064015f006401
5e0064015d0064015c0064015b0064015a00640159006401580064015700
64015600640155006401540064015300640152006401500064014f006401
4e0064014c0064014b0064014a0064014900640148006401470064014600
640145006401440064014300642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b0073737373737374
2b2b2b2b2b2b2b2b2b2b185f5e0000>
[5185 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 382 18 <00010061fff0040c051e00390097b0852b58b31c003b2bb8ffe8b310014d
2bb8fff0b30f014d2bb8ffecb30d014d2bb8ffeeb30c014d2bb8ffe8b30b
014d2bbe0233000e0018012f00210026012cb2135304bb012a0035003001
2eb10956003ffdd4ed3ffdd4ed012fe12b2b2b2b2b10d6c431301bb12118
b8012fb36c211326b8012cb46c13533504b8012ab36c350930b8012eb26c
095600183f2bc42b3f2bc42b30315925140e0623222e0235343e0233321e
0615140e0223222e0223220e0215141e0233323e0233321e02040c020508
14405f7b497ecb8f4d5396d17f386a5a461b08050304080b080e324f714f
568d64373563905b4d7351340f070a0603b71018120e1429271b54a4f19d
a1fcaf5c15202a1b0e131a12141c1309272f274586c17c7bbd7f41262f26
06111e00>GFNBAA+CIDFont+F2 AddT42Char 
2 1572 69 <000100acfffa047e0511003d00a6b0852b58b3270f0f14b8ffe8b310014d
14b8ffe8b30f014d14b8ffe8b30d014d14b8fff0b30c014d14b8ffe8b30b
014d14b80211401e1e0a2e2e321810014d32180f014d32180d014d32100c
014d32180b014d32b802114010001e38520a2e0f27041922511955065400
3f3f3f1217393f012fd4e12b2b2b2b2b32113310e12b2b2b2b2b322f3331
301b400e38520a2e0f27041922511955065400183f3f3f1217393f303159
25140e022323222e0227012626272316161511140e0223222e0235113436
3333321e0217011e03173326263511343e0233321e0215047e0d151a0d37
1a27232315fe6820411c02020208131f18181f12082c1a521d271f1d1101
3a1d3632311801020108131f191620120847141c12080b1d322702e0397d
3b48964afcf3070d070505070d0704aa28220a17291ffdc83463605d2f4f
ab4f02be070c090404090c07>GFNBAA+CIDFont+F2 AddT42Char 
2 2914 381 <0002005affed03de03ca0013002700c9b0852b58401c3f29012812012911
01260d01260c012608012607012a03012902011eb8ffe8b310014d1eb8ff
f0b30f014d1eb8ffe0b30d014d1eb8ffeeb30c014d1eb8ffe8b30b014d1e
b8020a401e2f0a010a141810014d14100f014d14200d014d14120c014d14
180b014d14ba020a0000ffc0b70f004d7000010019b80101b20f4a23b801
02b1054d003fed3fed012f5d2be12b2b2b2b2b2f5de12b2b2b2b2b31305d
5d5d5d5d5d5d5d5d1bb10f19b80101b46c0f4a0523b80102b26c054d0018
3f2b3f2b30315901140e0223222e0235343e0233321e0207342e0223220e
0215141e0233323e0203de3a73ad726fa56e363973ac736fa56e37ae1b3e
6a4f496944211b3f6a4f486a442001e56eb9864b427eb4726eb9864a427e
b47c49826239345f824d4a826139345e8200>GFNBAA+CIDFont+F2 AddT42Char 
2 4612 448 <00010022fffa037b03bc002c010db0852b58b90023fff840170b0c014c1f
080b0c014c251f011e080b0c014c251e0116b8fff0b30b014d15b8fff0b3
0b014d14b8ffe8b30b014d13b8ffe8b30b014d12b8ffe8b30b014d11b8ff
f040370b014d37110126110127100128050122280b014d3d220124220121
280b014d3f210124210120280b014d3d2001242001270f0176210121b8ff
d04009111548212013014d21b8ffe8400910014d21200f014d21b8ffe8b3
0c014d21b8fff0400c0b014d212849210b1a490b4c003f3f12393f012f2b
2b2b2b2b002b5d31305d5d5d2b5d5d2b5d5d2b015d5d5d5d2b2b2b2b2b2b
5d2b5d2b2b1bb5002101100521b8ffd0400b1115482849210b1a490b4c00
183f3f12393f2b5f5e5d30315901140e0207010e0323222e0227012e0235
343e0233321e0217131737133e0333321e02037b01020302fecd040d1a28
1e1e28190e04fece04050108131f171d23130904fe0403fb020a13211b17
1e1107039f04090a0c07fca90b0e080304080e0a03570c120903080c0702
03080c09fd1a0c0c02e6090c080302080b00>GFNBAA+CIDFont+F2 AddT42Char 
2 0 0 <00050000fe7303d2050e000300070039004d004e0097b0852b58bc000d01
520016003a01b5b5154444082d07be014300020020015400080001014340
0f04020db71a1a3f23b735068d031149b8012db43f078d0202003ffddefd
ce2ffddeed12392fed012fdde1dee110f1ce11392f33e1d4e131301b4014
1a0db76c1a1a3f3523b76c3503068d6c03113f49b8012d40096c3f400207
8d6c020200183f2b1ace2bce2f2bce2b12392f2b30315901112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>GFNBAA+CIDFont+F2 AddT42Char 
GFNBAA+CIDFont+F2 /CharStrings get begin
/C 18 def
/N 69 def
/o 381 def
/v 448 def
end
GFNBAA+CIDFont+F2 /Encoding get
dup 67 /C put
dup 78 /N put
dup 111 /o put
dup 118 /v put
pop
end
%ADOEndSubsetFont
/FWUQJJ+CIDFont+F2 /GFNBAA+CIDFont+F2 findfont ct_VMDictPut
/FWUQJJ+CIDFont+F2*1 
[67{/.notdef}rp /C 10{/.notdef}rp /N 32{/.notdef}rp /o 6{/.notdef}rp /v 
137{/.notdef}rp]
FWUQJJ+CIDFont+F2 nf
FWUQJJ+CIDFont+F2*1 [0 -18.0007 -18 0 0 0 ]msf
79.8603 389.627 mo
(CNNvo)
[-9.54034 -11.7006 -11.7006 -7.92035 0 ]ysh
99.5365 326.631 mo
121.617 326.631 li
121.617 402.111 li
99.5365 402.111 li
cp
.465492 0 .126467 0 cmyk
f
121.497 402.111 mo
121.017 402.111 li
121.017 327.231 li
100.017 327.231 li
100.017 401.631 li
121.497 401.631 li
121.497 402.111 li
121.017 402.111 li
121.497 402.111 li
121.497 402.591 li
99.0565 402.591 li
99.0565 326.271 li
121.977 326.271 li
121.977 402.591 li
121.497 402.591 li
121.497 402.111 li
cp
0 .504082 .208499 0 cmyk
f
0 0 0 0 cmyk
%ADOBeginSubsetFont: GFNBAA+CIDFont+F2 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal FWUQJJ+CIDFont+F2 gcheck setglobal} if
2 936 38 <000100acfffa0354050e00270083b0852b58b10713b8ffe8b310014d13b8
fff0b30f014d13b8fff0b30d014d13b8fff6b30c014d13b8ffe8b30b014d
13b80211b50d1d001e1d07b8010cb313131906b80128b322511955003f3f
ed12392fed012f2fc41139e12b2b2b2b2b3231301bb11307b8010cb56c13
13192206b80128b46c2251195500183f3f2b12392f2b30315901140e0223
211121321e0215140e02232111140e0223222e02351134363321321e0203
54040a0d07fe2601c0070d0a04040a0d07fe400814201a18221408291702
46070d0a0404c4131c1108fe4807101b15131b1109fde5070d070505070d
0704ae271f08121d>FWUQJJ+CIDFont+F2 AddT42Char 
FWUQJJ+CIDFont+F2 /CharStrings get begin
/F 38 def
end
FWUQJJ+CIDFont+F2 /Encoding get
dup 70 /F put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FWUQJJ+CIDFont+F2*1 
[67{/.notdef}rp /C 2{/.notdef}rp /F 7{/.notdef}rp /N 32{/.notdef}rp /o 
6{/.notdef}rp /v 137{/.notdef}rp]
FWUQJJ+CIDFont+F2 nf
FWUQJJ+CIDFont+F2*1 [0 -18.0007 -18 0 0 0 ]msf
116.572 382.068 mo
(FCvo)
[-8.10022 -9.72058 -7.92029 0 ]ysh
gsave
-1.50348 9.35107 mo
-1.50348 495.711 li
327.776 495.711 li
327.776 9.35107 li
cp
eclp
36.0565 363.951 mo
57.7765 363.951 li
57.7765 364.911 li
36.0565 364.911 li
cp
56.6965 361.431 mo
62.6965 364.431 li
56.6965 367.431 li
cp
.75021 .679683 .670222 .90164 cmyk
f
84.7765 363.951 mo
94.4965 363.951 li
94.4965 364.911 li
84.7765 364.911 li
cp
93.5365 361.431 mo
99.5365 364.431 li
93.5365 367.431 li
cp
f
36.0565 233.151 mo
56.4565 233.151 li
56.4565 232.191 li
36.0565 232.191 li
cp
55.4965 235.671 mo
61.4965 232.671 li
55.4965 229.671 li
cp
f
149.817 390.951 mo
147.297 390.951 145.377 388.911 145.377 386.511 cv
145.377 342.111 li
145.377 339.591 147.297 337.551 149.817 337.551 cv
167.937 337.551 li
170.457 337.551 172.497 339.591 172.497 342.111 cv
172.497 386.511 li
172.497 388.911 170.457 390.951 167.937 390.951 cv
cp
0 .504082 .208499 0 cmyk
ef
149.817 390.951 mo
149.817 391.791 li
146.937 391.791 144.537 389.391 144.537 386.511 cv
144.537 342.111 li
144.537 339.231 146.937 336.831 149.817 336.831 cv
167.937 336.831 li
170.817 336.831 173.217 339.231 173.217 342.111 cv
173.217 386.511 li
173.217 389.391 170.817 391.791 167.937 391.791 cv
149.817 391.791 li
149.817 390.951 li
149.817 390.231 li
167.937 390.231 li
169.977 390.231 171.657 388.551 171.657 386.511 cv
171.657 342.111 li
171.657 340.071 169.977 338.391 167.937 338.391 cv
149.817 338.391 li
147.777 338.391 146.097 340.071 146.097 342.111 cv
146.097 386.511 li
146.097 388.551 147.777 390.231 149.817 390.231 cv
149.817 390.951 li
cp
.205753 .823758 1 .105226 cmyk
f
164.577 380.631 mo
164.457 380.871 164.457 381.111 164.457 381.231 cv
164.337 381.351 164.337 381.471 164.217 381.471 cv
164.097 381.591 163.977 381.591 163.737 381.591 cv
163.617 381.591 163.497 381.591 163.377 381.591 cv
163.257 381.591 163.137 381.471 162.897 381.471 cv
162.777 381.471 162.657 381.471 162.417 381.351 cv
153.897 379.551 li
153.897 378.231 li
153.897 377.871 153.897 377.631 153.897 377.511 cv
154.017 377.391 154.137 377.391 154.257 377.271 cv
154.377 377.151 154.617 377.151 154.857 377.031 cv
155.097 377.031 155.577 377.031 156.177 377.031 cv
156.177 376.191 li
153.057 375.471 li
153.057 384.711 li
156.057 385.311 li
156.057 384.471 li
155.337 384.231 154.857 383.871 154.617 383.751 cv
154.257 383.511 154.137 383.271 154.017 383.031 cv
153.897 382.791 153.897 382.551 153.897 382.191 cv
153.897 381.111 li
162.297 382.911 li
162.897 383.031 163.257 383.151 163.497 383.271 cv
163.857 383.391 163.977 383.391 164.097 383.511 cv
164.217 383.631 164.337 383.751 164.337 383.751 cv
164.457 383.871 164.457 384.111 164.577 384.351 cv
165.057 384.471 li
165.057 380.751 li
164.577 380.631 li
cp
.75021 .679683 .670222 .90164 cmyk
f
167.697 374.871 mo
167.457 374.751 167.337 374.631 167.097 374.511 cv
166.857 374.271 166.737 374.151 166.497 373.911 cv
166.257 373.671 166.017 373.431 165.777 373.191 cv
165.537 373.071 165.417 372.831 165.177 372.591 cv
164.937 372.351 164.817 372.231 164.577 371.991 cv
164.457 371.871 164.217 371.751 164.097 371.631 cv
163.977 371.511 163.737 371.391 163.617 371.271 cv
163.497 371.151 163.377 371.151 163.257 371.031 cv
163.137 371.031 162.897 370.911 162.777 370.911 cv
162.657 370.911 162.537 370.911 162.297 370.911 cv
162.057 370.911 161.817 370.911 161.577 371.031 cv
161.337 371.151 161.097 371.271 160.977 371.391 cv
160.737 371.631 160.617 371.871 160.497 372.231 cv
160.377 372.471 160.377 372.951 160.377 373.311 cv
160.377 373.671 160.377 374.151 160.497 374.631 cv
160.617 375.111 160.857 375.591 160.977 376.071 cv
162.297 376.071 li
162.297 375.231 li
161.817 375.111 161.577 374.871 161.337 374.631 cv
161.097 374.391 160.977 374.031 160.977 373.671 cv
160.977 373.431 161.097 373.191 161.097 373.071 cv
161.217 372.831 161.337 372.711 161.457 372.591 cv
161.577 372.471 161.697 372.351 161.937 372.351 cv
162.057 372.231 162.297 372.231 162.537 372.231 cv
162.777 372.231 162.897 372.231 163.137 372.351 cv
163.257 372.351 163.497 372.471 163.737 372.591 cv
163.977 372.711 164.217 372.951 164.457 373.191 cv
164.817 373.431 165.177 373.791 165.537 374.151 cv
165.777 374.391 166.017 374.751 166.257 374.871 cv
166.497 375.111 166.737 375.351 166.977 375.471 cv
167.217 375.711 167.457 375.831 167.697 375.951 cv
167.937 376.071 168.177 376.191 168.417 376.311 cv
168.777 376.311 li
168.777 370.911 li
168.417 370.791 168.057 370.791 167.817 370.791 cv
167.457 370.791 167.217 370.791 166.857 370.791 cv
166.857 371.391 li
167.097 371.391 167.217 371.511 167.337 371.511 cv
167.457 371.631 167.457 371.631 167.577 371.751 cv
167.577 371.871 167.577 371.871 167.697 371.991 cv
167.697 372.111 167.697 372.351 167.697 372.471 cv
167.697 374.871 li
cp
f
166.977 365.031 mo
167.337 365.271 167.576 365.631 167.696 365.871 cv
167.937 366.111 167.937 366.231 167.937 366.471 cv
167.937 366.711 167.937 366.951 167.696 366.951 cv
167.576 367.071 167.457 367.191 167.097 367.191 cv
167.097 367.191 166.977 367.191 166.857 367.191 cv
166.736 367.191 166.736 367.191 166.617 367.071 cv
166.497 367.071 166.377 367.071 166.137 367.071 cv
166.016 367.071 165.896 366.951 165.657 366.951 cv
163.016 366.231 li
163.016 364.071 li
162.297 363.951 li
162.297 366.111 li
160.617 365.751 li
160.617 366.831 li
160.857 366.831 161.097 366.951 161.217 366.951 cv
161.457 367.071 161.576 367.071 161.696 367.191 cv
161.817 367.191 161.937 367.311 161.937 367.311 cv
162.057 367.431 162.177 367.431 162.177 367.551 cv
162.297 367.671 162.417 367.791 162.417 367.911 cv
162.417 368.031 162.537 368.271 162.537 368.511 cv
163.016 368.631 li
163.016 367.551 li
166.377 368.271 li
166.497 368.391 166.736 368.391 166.857 368.391 cv
167.097 368.391 167.217 368.391 167.457 368.391 cv
167.937 368.391 168.297 368.271 168.417 368.031 cv
168.777 367.791 168.896 367.431 168.896 366.951 cv
168.896 366.711 168.777 366.591 168.777 366.351 cv
168.657 366.111 168.657 365.991 168.537 365.751 cv
168.417 365.631 168.297 365.391 168.057 365.151 cv
167.937 365.031 167.696 364.791 167.457 364.551 cv
166.977 365.031 li
cp
f
168.537 359.151 mo
168.297 358.671 168.057 358.191 167.697 357.951 cv
167.217 357.591 166.857 357.351 166.257 357.111 cv
165.777 356.871 165.177 356.871 164.457 356.871 cv
164.217 356.871 163.857 356.871 163.617 356.991 cv
163.257 357.111 163.017 357.231 162.777 357.351 cv
162.657 357.591 162.417 357.831 162.297 358.071 cv
162.177 358.431 162.177 358.791 162.177 359.151 cv
162.177 359.631 162.297 360.231 162.537 360.591 cv
162.657 361.071 163.017 361.551 163.377 361.791 cv
163.857 362.151 164.217 362.391 164.817 362.631 cv
165.297 362.871 165.897 362.871 166.497 362.871 cv
166.857 362.871 167.217 362.871 167.457 362.751 cv
167.817 362.631 168.057 362.511 168.177 362.271 cv
168.417 362.151 168.537 361.911 168.657 361.551 cv
168.777 361.311 168.897 360.951 168.897 360.591 cv
168.897 360.111 168.777 359.631 168.537 359.151 cv
cp
165.777 361.551 mo
165.537 361.551 165.177 361.431 164.937 361.311 cv
164.577 361.191 164.337 361.071 164.097 360.951 cv
163.857 360.831 163.617 360.711 163.377 360.471 cv
163.137 360.351 163.017 360.111 162.897 359.991 cv
162.777 359.751 162.777 359.511 162.777 359.271 cv
162.777 358.911 162.897 358.551 163.137 358.311 cv
163.377 358.191 163.737 358.071 164.217 358.071 cv
164.577 358.071 164.817 358.071 165.177 358.191 cv
165.417 358.191 165.777 358.311 166.137 358.431 cv
166.377 358.431 166.617 358.551 166.857 358.671 cv
167.217 358.911 167.457 359.031 167.577 359.151 cv
167.817 359.391 167.937 359.511 168.057 359.751 cv
168.177 359.991 168.177 360.231 168.177 360.351 cv
168.177 360.831 168.057 361.191 167.817 361.311 cv
167.697 361.551 167.217 361.671 166.737 361.671 cv
166.497 361.671 166.137 361.671 165.777 361.551 cv
cp
f
162.177 351.231 mo
161.937 351.231 161.817 351.231 161.577 351.231 cv
161.457 351.231 161.217 351.231 161.097 351.231 cv
160.857 351.231 160.617 351.231 160.377 351.231 cv
160.377 351.591 li
160.736 352.191 160.977 352.671 161.337 353.271 cv
161.577 353.751 161.817 354.231 162.177 354.831 cv
162.297 354.711 162.417 354.711 162.417 354.591 cv
162.537 354.591 162.657 354.591 162.777 354.471 cv
162.537 354.111 162.297 353.751 162.177 353.511 cv
162.057 353.271 161.937 353.031 161.937 352.911 cv
161.937 352.791 161.937 352.671 162.057 352.551 cv
162.057 352.551 162.177 352.551 162.417 352.551 cv
166.977 352.551 li
167.217 352.551 167.337 352.551 167.337 352.551 cv
167.457 352.551 167.577 352.551 167.696 352.551 cv
167.696 352.671 167.817 352.671 167.817 352.671 cv
167.817 352.791 167.937 352.791 167.937 352.791 cv
167.937 352.911 168.057 353.031 168.057 353.031 cv
168.057 353.151 168.057 353.271 168.057 353.391 cv
168.057 353.511 168.177 353.631 168.177 353.751 cv
168.177 353.991 168.177 354.231 168.177 354.471 cv
168.777 354.471 li
168.777 349.311 li
168.177 349.311 li
168.177 349.551 168.177 349.791 168.177 350.031 cv
168.177 350.151 168.057 350.391 168.057 350.511 cv
168.057 350.631 168.057 350.751 168.057 350.871 cv
167.937 350.871 167.937 350.991 167.937 350.991 cv
167.817 351.111 167.817 351.111 167.817 351.111 cv
167.696 351.111 167.696 351.231 167.577 351.231 cv
167.577 351.231 167.457 351.231 167.337 351.231 cv
167.217 351.231 167.097 351.231 166.977 351.231 cv
162.177 351.231 li
cp
f
149.817 259.191 mo
147.297 259.191 145.377 257.151 145.377 254.751 cv
145.377 210.351 li
145.377 207.831 147.297 205.791 149.817 205.791 cv
167.937 205.791 li
170.457 205.791 172.497 207.831 172.497 210.351 cv
172.497 254.751 li
172.497 257.151 170.457 259.191 167.937 259.191 cv
cp
0 .504082 .208499 0 cmyk
ef
149.817 259.191 mo
149.817 260.031 li
146.937 260.031 144.537 257.631 144.537 254.751 cv
144.537 210.351 li
144.537 207.471 146.937 205.071 149.817 205.071 cv
167.937 205.071 li
170.817 205.071 173.217 207.471 173.217 210.351 cv
173.217 254.751 li
173.217 257.631 170.817 260.031 167.937 260.031 cv
149.817 260.031 li
149.817 259.191 li
149.817 258.471 li
167.937 258.471 li
169.977 258.471 171.657 256.791 171.657 254.751 cv
171.657 210.351 li
171.657 208.311 169.977 206.631 167.937 206.631 cv
149.817 206.631 li
147.777 206.631 146.097 208.311 146.097 210.351 cv
146.097 254.751 li
146.097 256.791 147.777 258.471 149.817 258.471 cv
149.817 259.191 li
cp
.205753 .823758 1 .105226 cmyk
f
152.817 250.071 mo
153.297 250.191 li
153.297 249.951 153.297 249.711 153.417 249.591 cv
153.537 249.471 153.777 249.351 154.017 249.351 cv
154.377 249.351 154.857 249.351 155.457 249.591 cv
162.177 251.031 li
162.777 251.151 163.137 251.271 163.377 251.271 cv
163.497 251.391 163.737 251.511 163.857 251.511 cv
163.977 251.631 164.097 251.751 164.217 251.871 cv
164.217 251.871 164.337 252.111 164.337 252.351 cv
164.817 252.351 li
164.817 248.751 li
164.817 248.031 164.697 247.311 164.577 246.831 cv
164.457 246.231 164.337 245.751 164.097 245.271 cv
163.857 244.911 163.497 244.431 163.017 243.951 cv
162.537 243.471 162.057 242.991 161.457 242.751 cv
160.857 242.391 160.137 242.151 159.417 241.911 cv
158.697 241.791 157.977 241.671 157.137 241.671 cv
156.417 241.671 155.697 241.791 155.097 242.031 cv
154.497 242.271 154.017 242.631 153.657 243.111 cv
153.297 243.591 153.057 244.071 152.937 244.671 cv
152.817 245.151 152.817 245.871 152.817 246.831 cv
152.817 250.071 li
cp
153.657 247.551 mo
153.657 247.311 153.657 246.951 153.657 246.711 cv
153.657 245.631 153.897 244.791 154.497 244.191 cv
155.097 243.591 156.057 243.351 157.257 243.351 cv
158.097 243.351 158.937 243.471 159.657 243.711 cv
160.497 243.951 161.217 244.311 161.937 244.791 cv
162.537 245.271 163.137 245.751 163.377 246.471 cv
163.737 247.191 163.977 247.911 163.977 248.871 cv
163.977 249.351 163.857 249.711 163.857 249.831 cv
153.657 247.551 li
cp
.75021 .679683 .670222 .90164 cmyk
f
166.617 240.111 mo
166.977 240.111 167.217 240.231 167.457 240.231 cv
167.577 240.351 167.697 240.351 167.817 240.471 cv
167.937 240.471 167.937 240.591 168.057 240.711 cv
168.057 240.831 168.057 240.831 168.057 241.071 cv
168.537 241.071 li
168.537 235.431 li
166.017 234.711 li
166.017 235.431 li
166.377 235.671 166.737 235.791 166.977 235.911 cv
167.217 236.031 167.337 236.151 167.457 236.271 cv
167.577 236.511 167.697 236.631 167.697 236.751 cv
167.817 236.991 167.817 237.231 167.817 237.471 cv
167.817 239.151 li
161.937 237.831 li
161.577 237.711 161.337 237.591 161.217 237.591 cv
160.977 237.591 160.857 237.471 160.737 237.471 cv
160.737 237.351 160.617 237.231 160.617 237.231 cv
160.617 237.111 160.497 236.991 160.497 236.871 cv
160.137 236.751 li
160.137 239.511 li
160.497 239.631 li
160.497 239.271 160.617 239.151 160.617 239.031 cv
160.737 238.911 160.857 238.911 161.097 238.911 cv
161.217 238.911 161.337 238.911 161.457 238.911 cv
161.577 238.911 161.697 239.031 161.937 239.031 cv
166.617 240.111 li
cp
f
166.977 233.031 mo
167.337 233.031 167.576 233.031 167.937 233.031 cv
168.297 233.031 168.537 233.031 168.777 233.151 cv
168.896 233.151 169.137 233.271 169.257 233.271 cv
169.497 233.391 169.617 233.631 169.857 233.751 cv
170.217 233.391 li
169.977 233.031 169.736 232.791 169.497 232.551 cv
169.257 232.311 168.896 232.071 168.657 232.071 cv
168.417 231.951 168.177 231.831 167.817 231.831 cv
167.576 231.831 167.337 231.951 166.977 231.951 cv
166.977 233.031 li
cp
f
166.737 226.671 mo
167.097 226.911 167.337 227.271 167.457 227.511 cv
167.697 227.631 167.697 227.871 167.697 228.111 cv
167.697 228.351 167.697 228.591 167.457 228.591 cv
167.337 228.711 167.217 228.831 166.857 228.831 cv
166.857 228.831 166.737 228.831 166.617 228.831 cv
166.497 228.831 166.497 228.831 166.377 228.711 cv
166.257 228.711 166.137 228.711 165.897 228.711 cv
165.777 228.711 165.657 228.591 165.417 228.591 cv
162.777 227.871 li
162.777 225.711 li
162.057 225.591 li
162.057 227.751 li
160.377 227.391 li
160.377 228.471 li
160.617 228.471 160.857 228.591 160.977 228.591 cv
161.217 228.711 161.337 228.711 161.457 228.831 cv
161.577 228.831 161.697 228.951 161.697 228.951 cv
161.817 229.071 161.937 229.071 161.937 229.191 cv
162.057 229.311 162.177 229.431 162.177 229.551 cv
162.177 229.671 162.297 229.911 162.297 230.151 cv
162.777 230.271 li
162.777 229.191 li
166.137 229.911 li
166.257 230.031 166.497 230.031 166.617 230.031 cv
166.857 230.031 166.977 230.031 167.217 230.031 cv
167.697 230.031 168.057 229.911 168.177 229.671 cv
168.537 229.431 168.657 229.071 168.657 228.591 cv
168.657 228.351 168.537 228.111 168.537 227.991 cv
168.417 227.751 168.417 227.631 168.297 227.391 cv
168.177 227.271 168.057 227.031 167.817 226.791 cv
167.697 226.671 167.457 226.431 167.217 226.191 cv
166.737 226.671 li
cp
f
167.457 223.191 mo
167.217 223.071 167.097 222.831 166.857 222.711 cv
166.617 222.471 166.497 222.351 166.257 222.111 cv
166.016 221.871 165.777 221.751 165.537 221.511 cv
165.297 221.271 165.177 221.031 164.937 220.791 cv
164.697 220.671 164.577 220.431 164.337 220.311 cv
164.217 220.071 163.977 219.951 163.857 219.831 cv
163.737 219.711 163.497 219.591 163.377 219.471 cv
163.257 219.351 163.137 219.351 163.016 219.231 cv
162.897 219.231 162.657 219.111 162.537 219.111 cv
162.417 219.111 162.297 219.111 162.057 219.111 cv
161.817 219.111 161.577 219.111 161.337 219.231 cv
161.097 219.351 160.857 219.471 160.737 219.711 cv
160.497 219.831 160.377 220.071 160.257 220.431 cv
160.137 220.791 160.137 221.151 160.137 221.631 cv
160.137 221.991 160.137 222.351 160.257 222.831 cv
160.377 223.311 160.617 223.791 160.737 224.391 cv
162.057 224.391 li
162.057 223.551 li
161.577 223.311 161.337 223.191 161.097 222.831 cv
160.857 222.591 160.737 222.231 160.737 221.871 cv
160.737 221.631 160.857 221.391 160.857 221.271 cv
160.977 221.031 161.097 220.911 161.217 220.791 cv
161.337 220.671 161.457 220.551 161.697 220.551 cv
161.817 220.431 162.057 220.431 162.297 220.431 cv
162.537 220.431 162.657 220.431 162.897 220.551 cv
163.016 220.551 163.257 220.671 163.497 220.791 cv
163.737 221.031 163.977 221.151 164.217 221.391 cv
164.577 221.631 164.937 221.991 165.297 222.471 cv
165.537 222.711 165.777 222.951 166.016 223.191 cv
166.257 223.311 166.497 223.551 166.737 223.671 cv
166.977 223.911 167.217 224.031 167.457 224.151 cv
167.697 224.391 167.937 224.511 168.177 224.511 cv
168.537 224.511 li
168.537 219.111 li
168.177 219.111 167.817 219.111 167.577 218.991 cv
167.217 218.991 166.977 218.991 166.617 218.991 cv
166.617 219.591 li
166.857 219.591 166.977 219.711 167.097 219.711 cv
167.217 219.831 167.217 219.831 167.337 219.951 cv
167.337 220.071 167.337 220.191 167.457 220.311 cv
167.457 220.431 167.457 220.551 167.457 220.791 cv
167.457 223.191 li
cp
f
121.497 363.951 mo
140.337 363.951 li
140.337 364.911 li
121.497 364.911 li
cp
139.257 361.431 mo
145.257 364.431 li
139.257 367.431 li
cp
f
120.537 232.191 mo
140.337 232.191 li
140.337 233.151 li
120.537 233.151 li
cp
139.257 229.671 mo
145.257 232.671 li
139.257 235.671 li
cp
f
149.817 127.431 mo
149.817 128.271 li
146.937 128.271 144.537 125.871 144.537 122.991 cv
144.537 78.5911 li
144.537 75.7111 146.937 73.3111 149.817 73.3111 cv
167.937 73.3111 li
170.817 73.3111 173.217 75.7111 173.217 78.5911 cv
173.217 122.991 li
173.217 125.871 170.817 128.271 167.937 128.271 cv
149.817 128.271 li
149.817 127.431 li
149.817 126.711 li
167.937 126.711 li
169.977 126.711 171.657 125.031 171.657 122.991 cv
171.657 78.5911 li
171.657 76.5511 169.977 74.8711 167.937 74.8711 cv
149.817 74.8711 li
147.777 74.8711 146.097 76.5511 146.097 78.5911 cv
146.097 122.991 li
146.097 125.031 147.777 126.711 149.817 126.711 cv
149.817 127.431 li
cp
.713893 .39527 1 .309056 cmyk
f
164.577 117.351 mo
164.457 117.711 164.457 117.831 164.457 117.951 cv
164.337 118.071 164.337 118.191 164.217 118.311 cv
164.097 118.311 163.977 118.311 163.737 118.311 cv
163.617 118.311 163.497 118.311 163.377 118.311 cv
163.257 118.311 163.137 118.311 162.897 118.311 cv
162.777 118.311 162.657 118.191 162.417 118.191 cv
153.897 116.271 li
153.897 114.951 li
153.897 114.711 153.897 114.471 153.897 114.351 cv
154.017 114.231 154.137 114.111 154.257 113.991 cv
154.377 113.991 154.617 113.871 154.857 113.871 cv
155.097 113.871 155.577 113.751 156.177 113.751 cv
156.177 112.911 li
153.057 112.311 li
153.057 121.431 li
156.057 122.151 li
156.057 121.311 li
155.337 120.951 154.857 120.711 154.617 120.471 cv
154.257 120.231 154.137 119.991 154.017 119.871 cv
153.897 119.631 153.897 119.271 153.897 118.911 cv
153.897 117.831 li
162.297 119.751 li
162.897 119.871 163.257 119.991 163.497 119.991 cv
163.857 120.111 163.977 120.231 164.097 120.231 cv
164.217 120.351 164.337 120.471 164.337 120.591 cv
164.457 120.711 164.457 120.831 164.577 121.071 cv
165.057 121.191 li
165.057 117.471 li
164.577 117.351 li
cp
.75021 .679683 .670222 .90164 cmyk
f
166.857 112.551 mo
167.217 112.671 167.457 112.671 167.697 112.791 cv
167.817 112.791 167.937 112.791 168.057 112.911 cv
168.177 113.031 168.177 113.031 168.297 113.151 cv
168.297 113.271 168.297 113.391 168.297 113.511 cv
168.777 113.511 li
168.777 107.871 li
166.257 107.151 li
166.257 107.871 li
166.617 108.111 166.977 108.231 167.217 108.351 cv
167.457 108.471 167.577 108.591 167.697 108.831 cv
167.817 108.951 167.937 109.071 167.937 109.311 cv
168.057 109.431 168.057 109.671 168.057 109.911 cv
168.057 111.591 li
162.177 110.271 li
161.817 110.151 161.577 110.151 161.457 110.031 cv
161.217 110.031 161.097 109.911 160.977 109.911 cv
160.977 109.791 160.857 109.791 160.857 109.671 cv
160.857 109.551 160.737 109.431 160.737 109.311 cv
160.377 109.191 li
160.377 111.951 li
160.737 112.071 li
160.737 111.831 160.857 111.591 160.857 111.471 cv
160.977 111.351 161.097 111.351 161.337 111.351 cv
161.457 111.351 161.577 111.351 161.697 111.351 cv
161.817 111.471 161.937 111.471 162.177 111.471 cv
166.857 112.551 li
cp
f
166.977 102.231 mo
167.337 102.591 167.576 102.831 167.696 103.071 cv
167.937 103.311 167.937 103.431 167.937 103.671 cv
167.937 103.911 167.937 104.151 167.696 104.271 cv
167.576 104.271 167.457 104.391 167.097 104.391 cv
167.097 104.391 166.977 104.391 166.857 104.391 cv
166.736 104.391 166.736 104.391 166.617 104.391 cv
166.497 104.271 166.377 104.271 166.137 104.271 cv
166.016 104.271 165.896 104.151 165.657 104.151 cv
163.016 103.551 li
163.016 101.271 li
162.297 101.151 li
162.297 103.311 li
160.617 102.951 li
160.617 104.031 li
160.857 104.031 161.097 104.151 161.217 104.151 cv
161.457 104.271 161.576 104.391 161.696 104.391 cv
161.817 104.511 161.937 104.511 161.937 104.631 cv
162.057 104.631 162.177 104.751 162.177 104.751 cv
162.297 104.871 162.417 104.991 162.417 105.111 cv
162.417 105.231 162.537 105.471 162.537 105.711 cv
163.016 105.831 li
163.016 104.751 li
166.377 105.471 li
166.497 105.591 166.736 105.591 166.857 105.591 cv
167.097 105.591 167.217 105.591 167.457 105.591 cv
167.937 105.591 168.297 105.471 168.417 105.231 cv
168.777 104.991 168.896 104.631 168.896 104.151 cv
168.896 103.911 168.777 103.791 168.777 103.551 cv
168.657 103.431 168.657 103.191 168.537 102.951 cv
168.417 102.831 168.297 102.591 168.057 102.471 cv
167.937 102.231 167.696 101.991 167.457 101.751 cv
166.977 102.231 li
cp
f
168.537 96.3511 mo
168.297 95.8711 168.057 95.5111 167.697 95.1511 cv
167.217 94.7911 166.857 94.5511 166.257 94.3111 cv
165.777 94.1911 165.177 94.0711 164.457 94.0711 cv
164.217 94.0711 163.857 94.0711 163.617 94.1911 cv
163.257 94.3111 163.017 94.4311 162.777 94.6711 cv
162.657 94.9111 162.417 95.1511 162.297 95.3911 cv
162.177 95.6311 162.177 95.9911 162.177 96.3511 cv
162.177 96.9511 162.297 97.4311 162.537 97.9111 cv
162.657 98.3911 163.017 98.7511 163.377 99.1111 cv
163.857 99.4711 164.217 99.7111 164.817 99.8311 cv
165.297 100.071 165.897 100.191 166.497 100.191 cv
166.857 100.191 167.217 100.071 167.457 100.071 cv
167.817 99.9511 168.057 99.7111 168.177 99.5911 cv
168.417 99.3511 168.537 99.1111 168.657 98.8711 cv
168.777 98.5111 168.897 98.2711 168.897 97.9111 cv
168.897 97.3111 168.777 96.8311 168.537 96.3511 cv
cp
165.777 98.8711 mo
165.537 98.7511 165.177 98.7511 164.937 98.6311 cv
164.577 98.5111 164.337 98.3911 164.097 98.2711 cv
163.857 98.1511 163.617 97.9111 163.377 97.7911 cv
163.137 97.5511 163.017 97.4311 162.897 97.1911 cv
162.777 96.9511 162.777 96.7111 162.777 96.4711 cv
162.777 96.1111 162.897 95.8711 163.137 95.6311 cv
163.377 95.3911 163.737 95.3911 164.217 95.3911 cv
164.577 95.3911 164.817 95.3911 165.177 95.3911 cv
165.417 95.5111 165.777 95.5111 166.137 95.6311 cv
166.377 95.7511 166.617 95.8711 166.857 95.9911 cv
167.217 96.1111 167.457 96.2311 167.577 96.4711 cv
167.817 96.5911 167.937 96.8311 168.057 97.0711 cv
168.177 97.1911 168.177 97.4311 168.177 97.6711 cv
168.177 98.0311 168.057 98.3911 167.817 98.6311 cv
167.697 98.7511 167.217 98.8711 166.737 98.8711 cv
166.497 98.8711 166.137 98.8711 165.777 98.8711 cv
cp
f
165.057 89.3911 mo
165.057 89.2711 165.057 89.0311 165.177 88.9111 cv
165.177 88.7911 165.177 88.7911 165.297 88.6711 cv
165.297 88.5511 165.417 88.5511 165.537 88.4311 cv
165.537 88.4311 165.777 88.3111 165.896 88.3111 cv
166.016 88.1911 166.257 88.1911 166.497 88.0711 cv
166.736 88.0711 167.097 87.9511 167.337 87.8311 cv
167.576 87.8311 167.817 87.7111 168.057 87.7111 cv
168.297 87.5911 168.537 87.5911 168.777 87.4711 cv
168.777 85.5511 li
168.297 85.5511 li
168.297 85.7911 168.297 85.9111 168.177 86.0311 cv
168.057 86.1511 168.057 86.2711 167.817 86.3911 cv
167.696 86.5111 167.576 86.5111 167.217 86.6311 cv
166.977 86.6311 166.736 86.7511 166.257 86.8711 cv
165.896 86.9911 165.657 87.1111 165.417 87.2311 cv
165.297 87.3511 165.057 87.4711 164.937 87.7111 cv
164.937 87.7111 li
164.937 87.7111 164.937 87.7111 164.817 87.7111 cv
164.696 86.8711 164.337 86.2711 163.857 85.9111 cv
163.497 85.5511 162.896 85.3111 162.297 85.3111 cv
162.057 85.3111 161.817 85.3111 161.576 85.4311 cv
161.337 85.5511 161.097 85.6711 160.977 85.9111 cv
160.736 86.1511 160.617 86.5111 160.497 86.8711 cv
160.377 87.2311 160.377 87.7111 160.377 88.3111 cv
160.377 91.1911 li
160.736 91.3111 li
160.736 91.0711 160.857 90.8311 160.857 90.8311 cv
160.977 90.7111 161.097 90.5911 161.337 90.5911 cv
161.457 90.5911 161.576 90.5911 161.696 90.7111 cv
161.817 90.7111 161.937 90.7111 162.177 90.7111 cv
166.857 91.7911 li
167.217 91.9111 167.457 91.9111 167.696 92.0311 cv
167.817 92.0311 167.937 92.1511 168.057 92.1511 cv
168.177 92.2711 168.177 92.3911 168.297 92.3911 cv
168.297 92.5111 168.297 92.6311 168.297 92.7511 cv
168.777 92.8711 li
168.777 90.1111 li
168.297 89.9911 li
168.297 90.1111 168.297 90.2311 168.297 90.3511 cv
168.297 90.4711 168.177 90.4711 168.177 90.5911 cv
168.177 90.5911 168.057 90.5911 168.057 90.7111 cv
167.937 90.7111 167.937 90.7111 167.817 90.7111 cv
167.696 90.7111 167.457 90.7111 167.337 90.5911 cv
167.097 90.5911 166.857 90.5911 166.617 90.4711 cv
166.377 90.4711 166.137 90.3511 165.777 90.3511 cv
165.537 90.2311 165.297 90.2311 165.057 90.1111 cv
165.057 89.3911 li
cp
164.457 89.9911 mo
161.097 89.2711 li
161.097 89.1511 161.097 89.0311 161.097 88.9111 cv
161.097 88.6711 161.097 88.5511 161.097 88.5511 cv
161.097 88.1911 161.097 87.8311 161.097 87.5911 cv
161.217 87.3511 161.217 87.2311 161.337 86.9911 cv
161.457 86.8711 161.576 86.7511 161.696 86.7511 cv
161.937 86.6311 162.057 86.6311 162.297 86.6311 cv
163.016 86.6311 163.617 86.8711 163.857 87.2311 cv
164.217 87.7111 164.457 88.4311 164.457 89.2711 cv
164.457 89.9911 li
cp
f
201.897 355.191 mo
198.537 355.191 195.897 352.551 195.897 349.191 cv
195.897 250.311 li
195.897 247.071 198.537 244.311 201.897 244.311 cv
225.897 244.311 li
229.257 244.311 232.017 247.071 232.017 250.311 cv
232.017 349.191 li
232.017 352.551 229.257 355.191 225.897 355.191 cv
cp
.364538 .0742809 0 0 cmyk
ef
201.897 355.191 mo
201.897 356.031 li
198.177 356.031 195.057 352.911 195.057 349.191 cv
195.057 250.311 li
195.057 246.591 198.177 243.591 201.897 243.591 cv
225.897 243.591 li
229.737 243.591 232.737 246.591 232.737 250.311 cv
232.737 349.191 li
232.737 352.911 229.737 356.031 225.897 356.031 cv
201.897 356.031 li
201.897 355.191 li
201.897 354.471 li
225.897 354.471 li
228.897 354.471 231.177 352.071 231.177 349.191 cv
231.177 250.311 li
231.177 247.431 228.897 245.151 225.897 245.151 cv
201.897 245.151 li
199.017 245.151 196.617 247.431 196.617 250.311 cv
196.617 349.191 li
196.617 352.071 199.017 354.471 201.897 354.471 cv
201.897 355.191 li
cp
.868376 .537469 0 0 cmyk
f
grestore
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: FWUQJK+CIDFont+F3-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (FWUQJK+CIDFont+F3-GBK-EUC-H)
%%Title: (FWUQJK+CIDFont+F3-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /FWUQJK+CIDFont+F3-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-141 -253 1151 954} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 29235 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 15 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
28634 <001C60D8A8C9B658EF0ADE51311B4F60408290DDB267DCF525F593A91
297D0756D42D6ECEFA80FDF00CFA2EFAAC8F27DB827EA9B19398BDE549A53D3B
11B5D7A0408D8FC620AEC7FCEAE4EB860E130A0D03E77D5BCD4D33E711B9D9C4
173931BB35280B5806F2E53450BEC0278D24FAA264C32EBF03909> |
28664 <001C60D8A8C9B7B9B9DE64C375A9DBACE95282B2312E3D85E750527CC
1CB7ECCD03A956DF6AAF4A7168B7148981EC76A8077847319739BD7AFC9C273C
D7ABB104CCAF232DF037808051A4E0AEF540B0A7B3AF3F3A775F4BE57DC95A2B
88BC481E3C3C5CD29A90412FD55B68E26377057408C4E5640926FF2E1A05E5CA
C44778E8205CC9A62299713EA1CA0206B13> |
28674 <001C60D8A8C9B7FE5AD20AE56213796D50B188B2C5CBFF678B1A9D104
AF97FCBEA6169C9DF4E313B2A55EC833C42B1AB0E8A13DA65F86C2C2AEDEA104
DE02E7F576D982DF30B78FB76CCFB07A8EB8179B2F3818BC620295E8F285682C
058E01E22BECBF493516051F07EB2FFD039B1F2347AD2EEC2F8D2F7E17A3B95F
D9B5890C6237E6820> |
28672 <001C60D8A8C9B6BC88CCA209E81BBB23118C1962F78530A6D2B1B22F4
C42E1E1780F3FAF3BA4D143D7AB9094600FB0A392F35595463AF65F814F8CFD2
FA68D1EBD08F24F882D398540EABDE5E14F3ED20707C55D17AFC142A349177EF
446C8B5CD5246C1A25D9E29ACD913B3DA4DA32F40D6AB2427E526FB3DBDEFA1C
762999B6CB00C8AB4BD2941F9E463EC30C1D40E11263ED534E30DB477FDAFCEB
E27BF40CE00> |
28679 <001C60D8A8C9B82C91E1D9CCF2FA7601C6026EBD33736DF344E87F732
E6204D98A966E57A2BEBF7AABB5C82E1C8966BD3BF60CBD042BFA41F5E6D694B
02FA7FC2341B98FA0788772F503A3DD89703A16E741DB3660B5C616> |
28677 <001C60D8A8C9B81947031993F366B7797E01770F0CCF402A3810F4860
85B72DA10BE6CC101E91F1F1C8B8F646643C5A8F34CC08EB50A8A38B409FF70F
C08890288922D85661D7A1EFC0CE23BA363CBFF61764B> |
28684 <001C60D8A8C9B747CAEFBC26A39BFF2819386B8EE1586C3CAC86C70F1
BAB44FD74F44D22A5C5DC757A66F0816E2C4932FBAD1CE3F09292C0B35BE69FC
446316A805AFF5DE4C4DCF6EE1023C859A9294B67999444465B2E58797F793D1
FFD7BE16AE4CE582B1E52CCD9D1A67897C4BBAC9E8DF1> |
28595 <001C60D8A8C9B8581AA5> |
28647 <001C60D8A8C9B7B5777CD30EEC2706247F18F2EFF0FCD8D1B2AAA4975
E3C181CDDE8> |
28660 <001C60D8A8C9B7A66FF208F1FFFF199CBF15DA40789B41A8940D81C59
F2725073E42964675E0DD202817D399E2FB17DEF0CEC97867EBCB7ADAAC507C9
72A055AF41A6B42F3641829E4746E9DE8C8DEC7FAD6AFE6EBAF1665BBE8EA5B5
A4B9F141EB4692A8EBE22B205223CA91FA890F02D7332206F1E0DCBF993E8459
4C8743CFA4B5ADE36A0FB102061281D6EFB1A65732FABB4B70E2A43CB34852E4
67727B0E2BBD33CA8A301D3BF82124C> |
28673 <001C60D8A8C9B795A0BECF06305EE87369211718D3EE2DE866B243806
8E9C56279E98DF67709852BED129643D4AB00494058DE56C3A2F59EF8337CDEA
A886E2F10A16806F6D040F0BA7348192390D4410BDA51BF850E2AE66992849BB
353A6DA88D5EB6C10AE42038B49> |
28678 <001C60D8A8C9B70582CC565B4883086947A53D700FC22CC37B8FFB6B8
A85AF70378C60D0C6B0C2EF31395945EDFB7DDDE1D0CC898F5B0E9FE9A7A1C3A
4C1BB863EE6725F120C3FDCDE3A35D1AD416BA23B64066650F85DCA6BABE2743
5AEFC317463C12AE039762DAEB1FA885BDDABB217799AFC3B5D24F6EB793F0F5
A070427208AF010078BB18257D47DFD185F390ACEF5FCC7BCA93E3E3197F813A
1D3153232223F7C7C1200BBEA57795F95EDA23BD6ECCB2B42F454E44B3FFBA32
4E2485F90A1F8549AFBDBA375D3F087391D68792DB8B3268EAA6F0D> |
28665 <001C60D8A8C9B844FACDE1262E660876C1C821F09A376508ACC1A69E7
44CCCB7E78648AFF64E5A36538462D4E62DC3E4EB2C79A256CD068EF675E11F5
BEC65134909B1991756C0B348400205629D9A2DBF4EF5> |
28668 <001C60D8A8C9B88A65BA9079859C0FCC394F785DDA5330D8BBC923C4A
04A6379E7CCB9> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /FWUQJK+CIDFont+F3-GBK-EUC-H-Identity-H /Identity-H 0 [/FWUQJK+CIDFont+F3-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/FWUQJK+CIDFont+F3-GBK-EUC-H-Identity-H findfont [0 -14.0405 -14.04 0 0 0 ]msf
210.179 329.511 mo
(o\332o\370p\002p\000o\370p\007p\005p\014o\263)
[-9.54745 -7.16055 -8.00302 -11.794 -7.16058 -4.49304 -4.77374 -6.59909 0 ]ysh
226.975 345.587 mo
(o\347p\005o\364p\001p\006o\371p\002p\005p\000o\364p\007o\374p\002p\001)
[-7.30112 -4.77371 -7.16061 -7.582 -5.75665 -4.21222 -8.00296 -4.77371 -11.794 -7.02023 -4.4931 -3.0889 
-8.00302 0 ]ysh
gsave
-1.50348 9.35107 mo
-1.50348 495.711 li
327.776 495.711 li
327.776 9.35107 li
cp
eclp
204.897 444.471 mo
204.897 445.311 li
202.017 445.311 199.617 442.911 199.617 440.031 cv
199.617 395.511 li
199.617 392.511 202.017 390.231 204.897 390.231 cv
222.897 390.231 li
225.777 390.231 228.177 392.511 228.177 395.511 cv
228.177 440.031 li
228.177 442.911 225.777 445.311 222.897 445.311 cv
204.897 445.311 li
204.897 444.471 li
204.897 443.751 li
222.897 443.751 li
224.937 443.751 226.617 442.071 226.617 440.031 cv
226.617 395.511 li
226.617 393.471 224.937 391.791 222.897 391.791 cv
204.897 391.791 li
202.857 391.791 201.177 393.471 201.177 395.511 cv
201.177 440.031 li
201.177 442.071 202.857 443.751 204.897 443.751 cv
204.897 444.471 li
cp
.713893 .39527 1 .309056 cmyk
f
210.417 430.311 mo
209.937 430.191 209.457 430.191 209.217 430.071 cv
208.977 429.951 208.857 429.951 208.737 429.831 cv
208.617 429.711 208.497 429.711 208.377 429.591 cv
208.377 429.471 208.377 429.351 208.257 429.111 cv
207.777 428.991 li
207.777 432.471 li
208.257 432.591 li
208.257 432.351 208.377 432.111 208.497 431.991 cv
208.617 431.751 208.737 431.751 208.977 431.751 cv
209.337 431.751 209.817 431.751 210.417 431.991 cv
217.137 433.431 li
217.737 433.551 218.097 433.671 218.337 433.671 cv
218.457 433.791 218.697 433.911 218.817 433.911 cv
218.937 434.031 219.057 434.151 219.177 434.151 cv
219.177 434.271 219.297 434.511 219.297 434.751 cv
219.777 434.751 li
219.777 431.271 li
219.297 431.151 li
219.297 431.511 219.177 431.751 219.057 431.871 cv
219.057 431.991 218.817 432.111 218.577 432.111 cv
218.457 432.111 218.217 431.991 217.977 431.991 cv
217.857 431.991 217.497 431.991 217.257 431.871 cv
210.417 430.311 li
cp
.75021 .679683 .670222 .90164 cmyk
f
221.697 428.151 mo
221.937 428.151 222.297 428.271 222.417 428.271 cv
222.657 428.391 222.777 428.391 222.897 428.511 cv
222.897 428.511 223.017 428.631 223.017 428.751 cv
223.017 428.751 223.137 428.871 223.137 428.991 cv
223.497 429.111 li
223.497 423.471 li
220.977 422.751 li
220.977 423.471 li
221.337 423.711 221.697 423.831 221.937 423.951 cv
222.177 424.071 222.417 424.191 222.537 424.311 cv
222.657 424.551 222.777 424.671 222.777 424.791 cv
222.777 425.031 222.777 425.271 222.777 425.391 cv
222.777 427.071 li
217.017 425.871 li
216.657 425.751 216.417 425.631 216.177 425.631 cv
216.057 425.631 215.937 425.511 215.817 425.511 cv
215.697 425.391 215.697 425.271 215.697 425.271 cv
215.577 425.151 215.577 425.031 215.577 424.911 cv
215.097 424.791 li
215.097 427.551 li
215.577 427.671 li
215.577 427.311 215.577 427.191 215.697 427.071 cv
215.817 426.951 215.937 426.951 216.057 426.951 cv
216.177 426.951 216.297 426.951 216.417 426.951 cv
216.657 426.951 216.777 427.071 217.017 427.071 cv
221.697 428.151 li
cp
f
222.057 421.071 mo
222.297 421.071 222.657 421.071 223.016 421.071 cv
223.257 421.071 223.617 421.071 223.736 421.191 cv
223.977 421.191 224.217 421.311 224.337 421.311 cv
224.457 421.431 224.696 421.671 224.937 421.791 cv
225.297 421.431 li
224.937 421.071 224.696 420.831 224.457 420.591 cv
224.217 420.351 223.977 420.111 223.736 420.111 cv
223.497 419.991 223.257 419.871 222.896 419.871 cv
222.657 419.871 222.297 419.991 222.057 419.991 cv
222.057 421.071 li
cp
f
221.817 414.711 mo
222.177 414.951 222.417 415.311 222.537 415.431 cv
222.657 415.671 222.777 415.911 222.777 416.151 cv
222.777 416.391 222.657 416.511 222.537 416.631 cv
222.417 416.751 222.177 416.871 221.937 416.871 cv
221.817 416.871 221.817 416.871 221.697 416.871 cv
221.577 416.871 221.457 416.751 221.337 416.751 cv
221.217 416.751 221.097 416.751 220.977 416.751 cv
220.857 416.751 220.617 416.631 220.497 416.631 cv
217.737 415.911 li
217.737 413.751 li
217.017 413.631 li
217.017 415.791 li
215.457 415.431 li
215.457 416.511 li
215.697 416.511 215.817 416.631 216.057 416.631 cv
216.177 416.751 216.297 416.751 216.417 416.871 cv
216.537 416.871 216.657 416.991 216.777 416.991 cv
216.897 417.111 216.897 417.111 217.017 417.231 cv
217.137 417.351 217.137 417.471 217.257 417.591 cv
217.257 417.711 217.257 417.951 217.257 418.191 cv
217.737 418.311 li
217.737 417.231 li
221.097 417.951 li
221.337 418.071 221.457 418.071 221.697 418.071 cv
221.817 418.071 222.057 418.071 222.177 418.071 cv
222.657 418.071 223.017 417.951 223.257 417.711 cv
223.497 417.471 223.617 417.111 223.617 416.631 cv
223.617 416.391 223.617 416.151 223.497 416.031 cv
223.497 415.791 223.377 415.671 223.257 415.431 cv
223.257 415.311 223.017 415.071 222.897 414.831 cv
222.777 414.711 222.537 414.471 222.297 414.231 cv
221.817 414.711 li
cp
f
216.897 408.711 mo
216.777 408.711 216.537 408.711 216.417 408.711 cv
216.177 408.711 216.057 408.711 215.817 408.711 cv
215.697 408.711 215.457 408.711 215.217 408.711 cv
215.217 409.071 li
215.457 409.671 215.817 410.151 216.057 410.631 cv
216.417 411.231 216.657 411.711 216.897 412.311 cv
217.017 412.191 217.137 412.191 217.257 412.071 cv
217.377 412.071 217.497 412.071 217.497 411.951 cv
217.257 411.591 217.137 411.231 216.897 410.991 cv
216.777 410.631 216.777 410.511 216.777 410.391 cv
216.777 410.271 216.777 410.151 216.777 410.031 cv
216.897 410.031 217.017 410.031 217.137 410.031 cv
221.817 410.031 li
221.937 410.031 222.057 410.031 222.177 410.031 cv
222.297 410.031 222.417 410.031 222.417 410.031 cv
222.537 410.031 222.537 410.151 222.657 410.151 cv
222.657 410.151 222.657 410.271 222.777 410.271 cv
222.777 410.391 222.777 410.391 222.777 410.511 cv
222.897 410.631 222.897 410.631 222.897 410.871 cv
222.897 410.991 222.897 411.111 222.897 411.231 cv
222.897 411.471 222.897 411.711 222.897 411.951 cv
223.497 411.951 li
223.497 406.791 li
222.897 406.791 li
222.897 407.031 222.897 407.271 222.897 407.511 cv
222.897 407.631 222.897 407.871 222.897 407.991 cv
222.897 408.111 222.897 408.231 222.777 408.231 cv
222.777 408.351 222.777 408.471 222.657 408.471 cv
222.657 408.471 222.657 408.591 222.537 408.591 cv
222.417 408.711 li
222.297 408.711 222.297 408.711 222.177 408.711 cv
222.057 408.711 221.937 408.711 221.817 408.711 cv
216.897 408.711 li
cp
f
204.897 74.0311 mo
204.897 74.8711 li
202.017 74.8711 199.617 72.4711 199.617 69.5911 cv
199.617 25.0711 li
199.617 22.0711 202.017 19.7911 204.897 19.7911 cv
222.897 19.7911 li
225.777 19.7911 228.177 22.0711 228.177 25.0711 cv
228.177 69.5911 li
228.177 72.4711 225.777 74.8711 222.897 74.8711 cv
204.897 74.8711 li
204.897 74.0311 li
204.897 73.3111 li
222.897 73.3111 li
224.937 73.3111 226.617 71.6311 226.617 69.5911 cv
226.617 25.0711 li
226.617 23.0311 224.937 21.3511 222.897 21.3511 cv
204.897 21.3511 li
202.857 21.3511 201.177 23.0311 201.177 25.0711 cv
201.177 69.5911 li
201.177 71.6311 202.857 73.3111 204.897 73.3111 cv
204.897 74.0311 li
cp
.713893 .39527 1 .309056 cmyk
f
210.417 60.7111 mo
209.937 60.4711 209.457 60.4711 209.217 60.3511 cv
208.977 60.2311 208.857 60.2311 208.737 60.1111 cv
208.617 59.9911 208.497 59.9911 208.377 59.8711 cv
208.377 59.7511 208.377 59.6311 208.257 59.3911 cv
207.777 59.2711 li
207.777 62.7511 li
208.257 62.8711 li
208.257 62.6311 208.377 62.3911 208.497 62.2711 cv
208.617 62.1511 208.737 62.0311 208.977 62.0311 cv
209.337 62.0311 209.817 62.0311 210.417 62.2711 cv
217.137 63.7111 li
217.737 63.8311 218.097 63.9511 218.337 63.9511 cv
218.457 64.0711 218.697 64.1911 218.817 64.1911 cv
218.937 64.3111 219.057 64.4311 219.177 64.5511 cv
219.177 64.5511 219.297 64.7911 219.297 65.0311 cv
219.777 65.0311 li
219.777 61.5511 li
219.297 61.4311 li
219.297 61.7911 219.177 62.0311 219.057 62.1511 cv
219.057 62.2711 218.817 62.3911 218.577 62.3911 cv
218.457 62.3911 218.217 62.2711 217.977 62.2711 cv
217.857 62.2711 217.497 62.2711 217.257 62.1511 cv
210.417 60.7111 li
cp
.75021 .679683 .670222 .90164 cmyk
f
219.897 55.9111 mo
219.897 55.7911 219.897 55.6711 219.897 55.5511 cv
219.897 55.4311 220.017 55.3111 220.017 55.1911 cv
220.137 55.1911 220.137 55.0711 220.257 55.0711 cv
220.377 54.9511 220.497 54.9511 220.737 54.8311 cv
220.857 54.8311 221.097 54.7111 221.337 54.7111 cv
221.577 54.5911 221.817 54.5911 222.177 54.4711 cv
222.417 54.4711 222.657 54.3511 222.897 54.2311 cv
223.137 54.2311 223.377 54.1111 223.497 54.1111 cv
223.497 52.1911 li
223.137 52.0711 li
223.137 52.3111 223.017 52.5511 223.017 52.6711 cv
222.897 52.7911 222.777 52.9111 222.657 53.0311 cv
222.537 53.0311 222.297 53.1511 222.057 53.1511 cv
221.817 53.2711 221.457 53.3911 221.097 53.5111 cv
220.737 53.5111 220.497 53.6311 220.257 53.7511 cv
220.017 53.8711 219.897 54.1111 219.777 54.2311 cv
219.777 54.2311 219.777 54.2311 219.657 54.2311 cv
219.657 54.2311 li
219.417 53.5111 219.057 52.9111 218.697 52.4311 cv
218.217 52.0711 217.737 51.9511 217.137 51.9511 cv
216.777 51.9511 216.537 51.9511 216.297 52.0711 cv
216.057 52.1911 215.937 52.3111 215.697 52.5511 cv
215.577 52.7911 215.457 53.0311 215.337 53.3911 cv
215.217 53.8711 215.097 54.2311 215.097 54.8311 cv
215.097 57.8311 li
215.577 57.9511 li
215.577 57.5911 215.577 57.4711 215.697 57.3511 cv
215.817 57.2311 215.937 57.2311 216.057 57.2311 cv
216.177 57.2311 216.297 57.2311 216.417 57.2311 cv
216.657 57.2311 216.777 57.3511 217.017 57.3511 cv
221.697 58.4311 li
221.937 58.4311 222.297 58.5511 222.417 58.5511 cv
222.657 58.6711 222.777 58.6711 222.897 58.7911 cv
222.897 58.9111 223.017 58.9111 223.017 59.0311 cv
223.017 59.1511 223.137 59.1511 223.137 59.3911 cv
223.497 59.3911 li
223.497 56.6311 li
223.137 56.5111 li
223.137 56.7511 223.137 56.8711 223.017 56.8711 cv
223.017 56.9911 223.017 57.1111 223.017 57.1111 cv
222.897 57.2311 222.897 57.2311 222.777 57.2311 cv
222.657 57.2311 li
222.417 57.2311 222.297 57.2311 222.057 57.2311 cv
221.817 57.2311 221.577 57.1111 221.337 57.1111 cv
221.097 56.9911 220.857 56.9911 220.617 56.8711 cv
220.377 56.8711 220.137 56.7511 219.897 56.7511 cv
219.897 55.9111 li
cp
219.177 56.6311 mo
215.817 55.7911 li
215.817 55.6711 215.817 55.5511 215.817 55.4311 cv
215.817 55.3111 215.817 55.1911 215.817 55.0711 cv
215.817 54.7111 215.817 54.4711 215.937 54.2311 cv
215.937 53.9911 216.057 53.7511 216.177 53.6311 cv
216.177 53.5111 216.417 53.3911 216.537 53.2711 cv
216.657 53.2711 216.897 53.1511 217.137 53.1511 cv
217.857 53.1511 218.337 53.3911 218.697 53.8711 cv
219.057 54.3511 219.177 54.9511 219.177 55.7911 cv
219.177 56.6311 li
cp
f
222.057 49.7911 mo
222.297 49.7911 222.657 49.7911 223.016 49.7911 cv
223.257 49.7911 223.617 49.7911 223.736 49.9111 cv
223.977 49.9111 224.217 50.0311 224.337 50.0311 cv
224.457 50.1511 224.696 50.3911 224.937 50.5111 cv
225.297 50.1511 li
224.937 49.7911 224.696 49.5511 224.457 49.3111 cv
224.217 49.0711 223.977 48.8311 223.736 48.8311 cv
223.497 48.7111 223.257 48.5911 222.896 48.5911 cv
222.657 48.5911 222.297 48.7111 222.057 48.7111 cv
222.057 49.7911 li
cp
f
221.817 43.4311 mo
222.177 43.6711 222.417 44.0311 222.537 44.2711 cv
222.657 44.3911 222.777 44.6311 222.777 44.8711 cv
222.777 45.1111 222.657 45.3511 222.537 45.3511 cv
222.417 45.4711 222.177 45.5911 221.937 45.5911 cv
221.817 45.5911 221.817 45.5911 221.697 45.5911 cv
221.577 45.5911 221.457 45.5911 221.337 45.4711 cv
221.217 45.4711 221.097 45.4711 220.977 45.4711 cv
220.857 45.4711 220.617 45.3511 220.497 45.3511 cv
217.737 44.6311 li
217.737 42.4711 li
217.017 42.3511 li
217.017 44.5111 li
215.457 44.1511 li
215.457 45.2311 li
215.697 45.2311 215.817 45.3511 216.057 45.3511 cv
216.177 45.4711 216.297 45.4711 216.417 45.5911 cv
216.537 45.5911 216.657 45.7111 216.777 45.7111 cv
216.897 45.8311 216.897 45.8311 217.017 45.9511 cv
217.137 46.0711 217.137 46.1911 217.257 46.3111 cv
217.257 46.4311 217.257 46.6711 217.257 46.9111 cv
217.737 47.0311 li
217.737 45.9511 li
221.097 46.6711 li
221.337 46.7911 221.457 46.7911 221.697 46.7911 cv
221.817 46.7911 222.057 46.7911 222.177 46.7911 cv
222.657 46.7911 223.017 46.6711 223.257 46.4311 cv
223.497 46.1911 223.617 45.8311 223.617 45.3511 cv
223.617 45.1111 223.617 44.8711 223.497 44.7511 cv
223.497 44.5111 223.377 44.3911 223.257 44.1511 cv
223.257 44.0311 223.017 43.7911 222.897 43.5511 cv
222.777 43.4311 222.537 43.1911 222.297 42.9511 cv
221.817 43.4311 li
cp
f
222.417 39.9511 mo
222.297 39.8311 222.057 39.5911 221.937 39.4711 cv
221.697 39.2311 221.457 39.1111 221.217 38.8711 cv
221.097 38.6311 220.857 38.5111 220.617 38.2711 cv
220.377 38.0311 220.137 37.7911 219.897 37.5511 cv
219.777 37.4311 219.537 37.1911 219.417 37.0711 cv
219.177 36.8311 219.057 36.7111 218.937 36.5911 cv
218.697 36.4711 218.577 36.3511 218.457 36.2311 cv
218.337 36.1111 218.217 36.1111 217.977 35.9911 cv
217.857 35.9911 217.737 35.8711 217.617 35.8711 cv
217.497 35.8711 217.257 35.8711 217.137 35.8711 cv
216.897 35.8711 216.537 35.8711 216.297 35.9911 cv
216.057 36.1111 215.937 36.2311 215.697 36.4711 cv
215.577 36.5911 215.457 36.8311 215.337 37.1911 cv
215.217 37.5511 215.217 37.9111 215.217 38.3911 cv
215.217 38.7511 215.217 39.1111 215.337 39.5911 cv
215.457 40.0711 215.577 40.5511 215.817 41.1511 cv
217.016 41.1511 li
217.016 40.3111 li
216.657 40.0711 216.297 39.9511 216.177 39.5911 cv
215.937 39.3511 215.817 38.9911 215.817 38.6311 cv
215.817 38.3911 215.817 38.1511 215.937 38.0311 cv
215.937 37.7911 216.057 37.6711 216.177 37.5511 cv
216.297 37.4311 216.537 37.3111 216.657 37.3111 cv
216.897 37.1911 217.016 37.1911 217.257 37.1911 cv
217.497 37.1911 217.737 37.1911 217.857 37.3111 cv
218.097 37.3111 218.337 37.4311 218.577 37.5511 cv
218.697 37.7911 219.057 37.9111 219.297 38.1511 cv
219.537 38.3911 219.897 38.7511 220.257 39.2311 cv
220.617 39.4711 220.857 39.7111 221.097 39.9511 cv
221.337 40.0711 221.577 40.3111 221.817 40.4311 cv
222.057 40.6711 222.297 40.7911 222.537 40.9111 cv
222.777 41.1511 222.897 41.2711 223.137 41.2711 cv
223.497 41.2711 li
223.497 35.8711 li
223.257 35.8711 222.897 35.8711 222.537 35.7511 cv
222.297 35.7511 221.937 35.7511 221.697 35.7511 cv
221.697 36.3511 li
221.817 36.3511 222.057 36.4711 222.057 36.4711 cv
222.177 36.5911 222.297 36.5911 222.297 36.7111 cv
222.417 36.8311 222.417 36.9511 222.417 37.0711 cv
222.417 37.1911 222.417 37.3111 222.417 37.5511 cv
222.417 39.9511 li
cp
f
213.417 391.071 mo
213.417 360.231 li
214.377 360.231 li
214.377 391.071 li
cp
210.897 361.191 mo
213.897 355.191 li
216.897 361.191 li
cp
f
250.857 326.031 mo
248.337 326.031 246.416 323.991 246.416 321.591 cv
246.416 277.191 li
246.416 274.671 248.337 272.631 250.857 272.631 cv
268.977 272.631 li
271.497 272.631 273.536 274.671 273.536 277.191 cv
273.536 321.591 li
273.536 323.991 271.497 326.031 268.977 326.031 cv
cp
0 .504082 .208499 0 cmyk
ef
250.857 326.031 mo
250.857 326.871 li
247.977 326.871 245.576 324.471 245.576 321.591 cv
245.576 277.191 li
245.576 274.311 247.977 271.911 250.857 271.911 cv
268.977 271.911 li
271.857 271.911 274.257 274.311 274.257 277.191 cv
274.257 321.591 li
274.257 324.471 271.857 326.871 268.977 326.871 cv
250.857 326.871 li
250.857 326.031 li
250.857 325.311 li
268.977 325.311 li
271.016 325.311 272.696 323.631 272.696 321.591 cv
272.696 277.191 li
272.696 275.151 271.016 273.471 268.977 273.471 cv
250.857 273.471 li
248.817 273.471 247.137 275.151 247.137 277.191 cv
247.137 321.591 li
247.137 323.631 248.817 325.311 250.857 325.311 cv
250.857 326.031 li
cp
.205753 .823758 1 .105226 cmyk
f
256.497 314.751 mo
255.897 314.631 255.537 314.511 255.297 314.511 cv
255.057 314.391 254.817 314.271 254.696 314.271 cv
254.577 314.151 254.577 314.031 254.457 314.031 cv
254.457 313.911 254.337 313.671 254.337 313.551 cv
253.857 313.431 li
253.857 316.911 li
254.337 317.031 li
254.337 316.671 254.337 316.551 254.457 316.311 cv
254.577 316.191 254.817 316.191 255.057 316.191 cv
255.417 316.191 255.897 316.191 256.497 316.311 cv
263.217 317.871 li
263.696 317.991 264.177 318.111 264.297 318.111 cv
264.536 318.231 264.656 318.231 264.897 318.351 cv
265.016 318.471 265.137 318.471 265.137 318.591 cv
265.257 318.711 265.257 318.951 265.377 319.071 cv
265.857 319.191 li
265.857 315.711 li
265.377 315.591 li
265.377 315.951 265.257 316.191 265.137 316.311 cv
265.016 316.431 264.897 316.431 264.536 316.431 cv
264.417 316.431 264.297 316.431 264.057 316.431 cv
263.817 316.431 263.577 316.311 263.217 316.311 cv
256.497 314.751 li
cp
.75021 .679683 .670222 .90164 cmyk
f
252.057 310.671 mo
257.456 311.871 li
257.696 311.151 li
252.657 308.991 li
252.057 308.991 li
252.057 310.671 li
cp
f
267.656 306.831 mo
268.016 306.831 268.257 306.951 268.497 306.951 cv
268.617 307.071 268.737 307.071 268.857 307.191 cv
268.977 307.191 269.096 307.311 269.096 307.431 cv
269.096 307.431 269.096 307.551 269.096 307.671 cv
269.577 307.791 li
269.577 302.151 li
267.057 301.431 li
267.057 302.151 li
267.417 302.271 267.776 302.511 268.016 302.631 cv
268.257 302.751 268.377 302.871 268.497 302.991 cv
268.617 303.111 268.737 303.351 268.857 303.471 cv
268.857 303.711 268.857 303.831 268.857 304.071 cv
268.857 305.751 li
262.977 304.431 li
262.737 304.431 262.377 304.311 262.257 304.311 cv
262.016 304.191 261.897 304.191 261.897 304.071 cv
261.776 304.071 261.656 303.951 261.656 303.951 cv
261.656 303.831 261.656 303.711 261.537 303.591 cv
261.177 303.471 li
261.177 306.231 li
261.537 306.231 li
261.537 305.991 261.656 305.871 261.656 305.751 cv
261.776 305.631 261.897 305.631 262.137 305.631 cv
262.257 305.631 262.377 305.631 262.497 305.631 cv
262.617 305.631 262.857 305.631 262.977 305.751 cv
267.656 306.831 li
cp
f
268.016 299.871 mo
268.376 299.871 268.737 299.871 268.977 299.871 cv
269.336 299.871 269.577 299.871 269.817 299.871 cv
270.056 299.991 270.177 299.991 270.417 300.111 cv
270.536 300.231 270.776 300.351 270.897 300.591 cv
271.376 300.231 li
271.016 299.871 270.776 299.511 270.536 299.271 cv
270.297 299.151 270.056 298.911 269.817 298.791 cv
269.456 298.791 269.216 298.671 268.977 298.671 cv
268.617 298.671 268.376 298.671 268.016 298.791 cv
268.016 299.871 li
cp
f
267.897 293.511 mo
268.137 293.751 268.377 293.991 268.617 294.231 cv
268.737 294.471 268.737 294.711 268.737 294.951 cv
268.737 295.191 268.737 295.311 268.617 295.431 cv
268.377 295.551 268.257 295.551 268.016 295.551 cv
267.897 295.551 267.777 295.551 267.656 295.551 cv
267.656 295.551 267.537 295.551 267.417 295.551 cv
267.297 295.551 267.177 295.551 267.057 295.551 cv
266.817 295.431 266.697 295.431 266.457 295.431 cv
263.817 294.711 li
263.817 292.551 li
263.096 292.431 li
263.096 294.591 li
261.417 294.231 li
261.417 295.191 li
261.656 295.311 261.897 295.431 262.016 295.431 cv
262.257 295.551 262.377 295.551 262.497 295.671 cv
262.617 295.671 262.737 295.791 262.857 295.791 cv
262.857 295.911 262.977 295.911 263.096 296.031 cv
263.096 296.031 263.217 296.271 263.217 296.391 cv
263.336 296.511 263.336 296.751 263.336 296.991 cv
263.817 297.111 li
263.817 296.031 li
267.177 296.751 li
267.297 296.751 267.537 296.871 267.656 296.871 cv
267.897 296.871 268.016 296.871 268.257 296.871 cv
268.737 296.871 269.096 296.751 269.336 296.511 cv
269.577 296.271 269.697 295.911 269.697 295.311 cv
269.697 295.191 269.577 294.951 269.577 294.831 cv
269.577 294.591 269.457 294.471 269.336 294.231 cv
269.217 293.991 269.096 293.871 268.977 293.631 cv
268.737 293.511 268.497 293.271 268.257 293.031 cv
267.897 293.511 li
cp
f
268.497 289.911 mo
268.377 289.791 268.137 289.671 267.897 289.551 cv
267.776 289.311 267.536 289.191 267.297 288.951 cv
267.057 288.711 266.817 288.471 266.577 288.231 cv
266.457 288.111 266.217 287.871 265.977 287.631 cv
265.737 287.391 265.617 287.271 265.377 287.031 cv
265.257 286.911 265.016 286.791 264.897 286.671 cv
264.776 286.551 264.656 286.431 264.417 286.311 cv
264.297 286.191 264.177 286.191 264.057 286.071 cv
263.937 286.071 263.817 285.951 263.577 285.951 cv
263.457 285.951 263.336 285.951 263.096 285.951 cv
262.857 285.951 262.617 285.951 262.377 286.071 cv
262.137 286.191 261.897 286.311 261.776 286.431 cv
261.536 286.671 261.417 286.911 261.297 287.271 cv
261.297 287.511 261.177 287.991 261.177 288.351 cv
261.177 288.711 261.297 289.191 261.297 289.671 cv
261.417 290.151 261.656 290.631 261.897 291.111 cv
263.096 291.111 li
263.096 290.271 li
262.737 290.151 262.377 289.911 262.137 289.671 cv
261.897 289.431 261.776 289.071 261.776 288.711 cv
261.776 288.471 261.897 288.231 261.897 288.111 cv
262.016 287.871 262.137 287.751 262.257 287.631 cv
262.377 287.511 262.497 287.391 262.737 287.391 cv
262.857 287.271 263.096 287.271 263.336 287.271 cv
263.577 287.271 263.696 287.271 263.937 287.391 cv
264.177 287.391 264.297 287.511 264.536 287.631 cv
264.776 287.751 265.016 287.991 265.257 288.231 cv
265.617 288.471 265.977 288.831 266.336 289.191 cv
266.577 289.431 266.817 289.791 267.057 289.911 cv
267.417 290.151 267.656 290.391 267.776 290.511 cv
268.016 290.751 268.257 290.871 268.497 290.991 cv
268.737 291.111 268.977 291.231 269.217 291.351 cv
269.577 291.351 li
269.577 285.951 li
269.217 285.831 268.977 285.831 268.617 285.831 cv
268.257 285.831 268.016 285.831 267.656 285.831 cv
267.656 286.431 li
267.897 286.431 268.016 286.551 268.137 286.551 cv
268.257 286.671 268.377 286.671 268.377 286.791 cv
268.377 286.911 268.497 286.911 268.497 287.031 cv
268.497 287.151 268.497 287.391 268.497 287.511 cv
268.497 289.911 li
cp
f
250.977 191.991 mo
248.457 191.991 246.537 190.071 246.537 187.551 cv
246.537 143.151 li
246.537 140.631 248.457 138.591 250.977 138.591 cv
268.977 138.591 li
271.497 138.591 273.537 140.631 273.537 143.151 cv
273.537 187.551 li
273.537 190.071 271.497 191.991 268.977 191.991 cv
cp
0 .504082 .208499 0 cmyk
ef
250.977 191.991 mo
250.977 192.831 li
248.097 192.831 245.697 190.431 245.697 187.551 cv
245.697 143.151 li
245.697 140.151 248.097 137.871 250.977 137.871 cv
268.977 137.871 li
271.857 137.871 274.257 140.151 274.257 143.151 cv
274.257 187.551 li
274.257 190.431 271.857 192.831 268.977 192.831 cv
250.977 192.831 li
250.977 191.991 li
250.977 191.271 li
268.977 191.271 li
271.016 191.271 272.697 189.591 272.697 187.551 cv
272.697 143.151 li
272.697 141.111 271.016 139.431 268.977 139.431 cv
250.977 139.431 li
248.937 139.431 247.257 141.111 247.257 143.151 cv
247.257 187.551 li
247.257 189.591 248.937 191.271 250.977 191.271 cv
250.977 191.991 li
cp
.205753 .823758 1 .105226 cmyk
f
256.497 180.711 mo
255.897 180.591 255.537 180.471 255.297 180.471 cv
255.057 180.351 254.817 180.231 254.696 180.231 cv
254.577 180.111 254.577 179.991 254.457 179.871 cv
254.457 179.871 254.337 179.631 254.337 179.391 cv
253.857 179.391 li
253.857 182.871 li
254.337 182.991 li
254.337 182.631 254.337 182.391 254.457 182.271 cv
254.577 182.151 254.817 182.151 255.057 182.151 cv
255.417 182.151 255.897 182.151 256.497 182.271 cv
263.217 183.831 li
263.696 183.951 264.177 183.951 264.297 184.071 cv
264.536 184.191 264.656 184.191 264.897 184.311 cv
265.016 184.311 265.137 184.431 265.137 184.551 cv
265.257 184.671 265.257 184.791 265.377 185.031 cv
265.857 185.151 li
265.857 181.671 li
265.377 181.551 li
265.377 181.911 265.257 182.031 265.137 182.271 cv
265.016 182.391 264.897 182.391 264.536 182.391 cv
264.417 182.391 264.297 182.391 264.057 182.391 cv
263.817 182.391 263.577 182.271 263.217 182.271 cv
256.497 180.711 li
cp
.75021 .679683 .670222 .90164 cmyk
f
252.057 176.631 mo
257.456 177.831 li
257.696 177.111 li
252.657 174.951 li
252.057 174.951 li
252.057 176.631 li
cp
f
267.656 172.671 mo
268.016 172.791 268.257 172.791 268.497 172.911 cv
268.617 172.911 268.737 173.031 268.857 173.031 cv
268.977 173.151 269.096 173.151 269.096 173.271 cv
269.096 173.391 269.096 173.511 269.096 173.631 cv
269.577 173.631 li
269.577 167.991 li
267.057 167.391 li
267.057 168.111 li
267.417 168.231 267.776 168.351 268.016 168.471 cv
268.257 168.591 268.377 168.831 268.497 168.951 cv
268.617 169.071 268.737 169.191 268.857 169.431 cv
268.857 169.551 268.857 169.791 268.857 170.031 cv
268.857 171.711 li
262.977 170.391 li
262.737 170.271 262.377 170.271 262.257 170.151 cv
262.016 170.151 261.897 170.031 261.897 170.031 cv
261.776 169.911 261.656 169.911 261.656 169.791 cv
261.656 169.671 261.656 169.551 261.537 169.431 cv
261.177 169.431 li
261.177 172.071 li
261.537 172.191 li
261.537 171.951 261.656 171.711 261.656 171.591 cv
261.776 171.591 261.897 171.471 262.137 171.471 cv
262.257 171.471 262.377 171.471 262.497 171.591 cv
262.617 171.591 262.857 171.591 262.977 171.591 cv
267.656 172.671 li
cp
f
268.016 165.831 mo
268.376 165.831 268.737 165.711 268.977 165.711 cv
269.336 165.711 269.577 165.831 269.817 165.831 cv
270.056 165.831 270.177 165.951 270.417 166.071 cv
270.536 166.191 270.776 166.311 270.897 166.551 cv
271.376 166.191 li
271.016 165.831 270.776 165.471 270.536 165.231 cv
270.297 164.991 270.056 164.871 269.817 164.751 cv
269.456 164.631 269.216 164.631 268.977 164.631 cv
268.617 164.631 268.376 164.631 268.016 164.631 cv
268.016 165.831 li
cp
f
267.897 159.351 mo
268.137 159.711 268.377 159.951 268.617 160.191 cv
268.737 160.431 268.737 160.671 268.737 160.791 cv
268.737 161.031 268.737 161.271 268.617 161.391 cv
268.377 161.511 268.257 161.511 268.016 161.511 cv
267.897 161.511 267.777 161.511 267.656 161.511 cv
267.656 161.511 267.537 161.511 267.417 161.511 cv
267.297 161.511 267.177 161.391 267.057 161.391 cv
266.817 161.391 266.697 161.391 266.457 161.271 cv
263.817 160.671 li
263.817 158.511 li
263.096 158.271 li
263.096 160.551 li
261.417 160.191 li
261.417 161.151 li
261.656 161.271 261.897 161.271 262.016 161.391 cv
262.257 161.391 262.377 161.511 262.497 161.511 cv
262.617 161.631 262.737 161.631 262.857 161.751 cv
262.857 161.751 262.977 161.871 263.096 161.871 cv
263.096 161.991 263.217 162.111 263.217 162.231 cv
263.336 162.351 263.336 162.591 263.336 162.831 cv
263.817 162.951 li
263.817 161.871 li
267.177 162.711 li
267.297 162.711 267.537 162.711 267.656 162.711 cv
267.897 162.831 268.016 162.831 268.257 162.831 cv
268.737 162.831 269.096 162.711 269.336 162.471 cv
269.577 162.111 269.697 161.751 269.697 161.271 cv
269.697 161.031 269.577 160.911 269.577 160.671 cv
269.577 160.551 269.457 160.311 269.336 160.191 cv
269.217 159.951 269.096 159.711 268.977 159.591 cv
268.737 159.351 268.497 159.111 268.257 158.991 cv
267.897 159.351 li
cp
f
268.497 155.871 mo
268.377 155.751 268.137 155.631 267.897 155.391 cv
267.776 155.271 267.536 155.031 267.297 154.791 cv
267.057 154.671 266.817 154.431 266.577 154.191 cv
266.457 153.951 266.217 153.711 265.977 153.591 cv
265.737 153.351 265.617 153.111 265.377 152.991 cv
265.257 152.871 265.016 152.631 264.897 152.511 cv
264.776 152.391 264.656 152.271 264.417 152.271 cv
264.297 152.151 264.177 152.031 264.057 152.031 cv
263.937 151.911 263.817 151.911 263.577 151.911 cv
263.457 151.791 263.336 151.791 263.096 151.791 cv
262.857 151.791 262.617 151.911 262.377 151.911 cv
262.137 152.031 261.897 152.151 261.776 152.391 cv
261.536 152.631 261.417 152.871 261.297 153.111 cv
261.297 153.471 261.177 153.831 261.177 154.311 cv
261.177 154.671 261.297 155.031 261.297 155.511 cv
261.417 155.991 261.656 156.471 261.897 157.071 cv
263.096 157.071 li
263.096 156.231 li
262.737 156.111 262.377 155.871 262.137 155.631 cv
261.897 155.271 261.776 155.031 261.776 154.551 cv
261.776 154.311 261.897 154.191 261.897 153.951 cv
262.016 153.831 262.137 153.591 262.257 153.471 cv
262.377 153.471 262.497 153.351 262.737 153.231 cv
262.857 153.231 263.096 153.111 263.336 153.111 cv
263.577 153.111 263.696 153.231 263.937 153.231 cv
264.177 153.351 264.297 153.351 264.536 153.591 cv
264.776 153.711 265.016 153.951 265.257 154.191 cv
265.617 154.431 265.977 154.671 266.336 155.151 cv
266.577 155.391 266.817 155.631 267.057 155.871 cv
267.417 156.111 267.656 156.231 267.776 156.471 cv
268.016 156.591 268.257 156.831 268.497 156.951 cv
268.737 157.071 268.977 157.191 269.217 157.311 cv
269.577 157.311 li
269.577 151.791 li
269.217 151.791 268.977 151.791 268.617 151.791 cv
268.257 151.791 268.016 151.671 267.656 151.671 cv
267.656 152.271 li
267.897 152.391 268.016 152.391 268.137 152.511 cv
268.257 152.511 268.377 152.631 268.377 152.631 cv
268.377 152.751 268.497 152.871 268.497 152.991 cv
268.497 153.111 268.497 153.231 268.497 153.471 cv
268.497 155.871 li
cp
f
294.297 326.031 mo
291.777 326.031 289.857 324.111 289.857 321.591 cv
289.857 143.151 li
289.857 140.631 291.777 138.591 294.297 138.591 cv
312.297 138.591 li
314.817 138.591 316.857 140.631 316.857 143.151 cv
316.857 321.591 li
316.857 324.111 314.817 326.031 312.297 326.031 cv
cp
.0231327 .240543 .62359 0 cmyk
ef
294.297 326.031 mo
294.297 326.871 li
291.417 326.871 289.017 324.471 289.017 321.591 cv
289.017 143.151 li
289.017 140.151 291.417 137.871 294.297 137.871 cv
312.297 137.871 li
315.177 137.871 317.577 140.151 317.577 143.151 cv
317.577 321.591 li
317.577 324.471 315.177 326.871 312.297 326.871 cv
294.297 326.871 li
294.297 326.031 li
294.297 325.311 li
312.297 325.311 li
314.336 325.311 316.017 323.631 316.017 321.591 cv
316.017 143.151 li
316.017 141.111 314.336 139.431 312.297 139.431 cv
294.297 139.431 li
292.257 139.431 290.577 141.111 290.577 143.151 cv
290.577 321.591 li
290.577 323.631 292.257 325.311 294.297 325.311 cv
294.297 326.031 li
cp
.229557 .558068 1 .0688792 cmyk
f
grestore
%ADOBeginSubsetFont: FWUQJK+CIDFont+F3-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/FWUQJK+CIDFont+F3-GBK-EUC-H 6 GetGlyphDirectory
28636 <001C60D8A8C9B875744C21AD59FDCBB2749B2268B75FB3> |
28666 <001C60D8A8C9B7FD849A70FBAF5CA9A13C8E26C143A1DF6AC1FE547EA
3C5232E736DB519B3D3AA4EEB5C6BE5BAE3CF35795226E06AD4DC645F74CE709
D6D91E4316CA064CD0C4D0AE7D15A7DAFFFD0C871FB60DBABB3A2AAE10728B75
305448C7B5C7B5F2A56A6D5ABB66520DBD6D65AA03F04B1782EFFFBBC14C56FE
36F36723CB545DCDED9B40F166550D83238B31668EF901F0353888C1B5A6781A
E1D7629C16539B99012D949BB473BAE8FE8799FB00BF6C746B0B7BB5491EAECF
A034F56A464F3951098755CEB00> |
28645 <001C60D8A8C9B7FA1378253013ECBC2E2375A528708F98127351381D8
D6D4621D951E8F5F697D02315B161674B3B669EC72DC9FB775331F6348CFA7EA
DF53D1E65E2A1653259F1DF90BA621D0BA605DBDCF6462367C15F1F9BCD37860
53893E0E997109E5787E293F736D944B821F2A5> |
28662 <001C60D8A8C9B776A06C6FC231F3BF82B95E430F6D347A409EECD485F
9B406FA6336964C8BF7664E2AB055B44D3A06959A7781CE4D2FEDDD996C546F2
2FC5837E64BBC80EF4699966E80B1E4ED4A9C3550A8BDD97A63B0696CF3EE432
A03807D55000A523F2214> |
28680 <001C60D8A8C9B794D31A1053B9961E70BFFA47467F8C115DB76858BE9
1B87F72C52941282A1449AD31A6C6FC3341ED63E1F429CA97F8F026C9971DD20
E5603656286CABFF4097310E86D85B7B38F800E217098445F68487CB3737B3CF
9E030780CD291611690AE824EE2> |
28639 <001C60D8A8C9B74B0CB5DF6C84CF353B772D85B4038C184407812FD2> |
!
end
end end
%ADOEndSubsetFont
/FWUQJK+CIDFont+F3-GBK-EUC-H-Identity-H findfont [0 -14.0405 -14.04 0 0 0 ]msf
307.981 312.945 mo
(o\334p\000o\364o\372o\370o\263o\345o\370o\366p\002p\001p\006p\007p\005p\010o\366p\007o\374p\002p\001o\263o\337p\002p\006p\006)
[-3.51013 -11.794 -7.02026 -8.0032 -7.16058 -3.93134 -8.00317 -7.16058 -6.45856 -8.00293 -7.72235 -5.75665 
-4.35254 -4.77374 -7.72229 -6.31821 -4.49307 -3.08893 -8.14349 -7.58203 -4.21198 -6.45874 -8.14349 -5.61636 
0 ]ysh
201.897 220.671 mo
198.537 220.671 195.897 218.031 195.897 214.671 cv
195.897 115.791 li
195.897 112.551 198.537 109.791 201.897 109.791 cv
225.897 109.791 li
229.257 109.791 232.017 112.551 232.017 115.791 cv
232.017 214.671 li
232.017 218.031 229.257 220.671 225.897 220.671 cv
cp
.364538 .0742809 0 0 cmyk
ef
201.897 220.671 mo
201.897 221.511 li
198.177 221.511 195.057 218.391 195.057 214.671 cv
195.057 115.791 li
195.057 112.071 198.177 109.071 201.897 109.071 cv
225.897 109.071 li
229.737 109.071 232.737 112.071 232.737 115.791 cv
232.737 214.671 li
232.737 218.391 229.737 221.511 225.897 221.511 cv
201.897 221.511 li
201.897 220.671 li
201.897 219.951 li
225.897 219.951 li
228.897 219.951 231.177 217.551 231.177 214.671 cv
231.177 115.791 li
231.177 112.911 228.897 110.631 225.897 110.631 cv
201.897 110.631 li
199.017 110.631 196.617 112.911 196.617 115.791 cv
196.617 214.671 li
196.617 217.551 199.017 219.951 201.897 219.951 cv
201.897 220.671 li
cp
.868376 .537469 0 0 cmyk
f
.75021 .679683 .670222 .90164 cmyk
/FWUQJK+CIDFont+F3-GBK-EUC-H-Identity-H findfont [0 -14.0405 -14.04 0 0 0 ]msf
210.179 194.988 mo
(o\332o\370p\002p\000o\370p\007p\005p\014o\263)
[-9.4071 -7.30112 -8.00299 -11.794 -7.16061 -4.49304 -4.77374 -6.59903 0 ]ysh
226.975 211.071 mo
(o\347p\005o\364p\001p\006o\371p\002p\005p\000o\364p\007o\374p\002p\001)
[-7.30112 -4.77374 -7.16058 -7.582 -5.75665 -4.21222 -8.00296 -4.77374 -11.794 -7.02026 -4.49307 -3.08893 
-8.00296 0 ]ysh
gsave
-1.50348 9.35107 mo
-1.50348 495.711 li
327.776 495.711 li
327.776 9.35107 li
cp
eclp
171.897 364.191 mo
193.737 304.431 li
194.577 304.671 li
172.857 364.551 li
cp
190.977 304.431 mo
195.897 299.871 li
196.617 306.471 li
cp
f
171.897 232.791 mo
193.737 295.311 li
194.697 294.951 li
172.857 232.431 li
cp
191.097 295.191 mo
195.897 299.871 li
196.737 293.151 li
cp
f
171.897 232.431 mo
193.737 169.911 li
194.697 170.271 li
172.857 232.791 li
cp
191.097 170.031 mo
195.897 165.351 li
196.737 172.071 li
cp
f
171.897 100.911 mo
193.737 160.791 li
194.577 160.431 li
172.857 100.551 li
cp
190.977 160.671 mo
195.897 165.351 li
196.617 158.631 li
cp
f
213.417 74.0311 mo
213.417 104.871 li
214.377 104.871 li
214.377 74.0311 li
cp
210.897 103.911 mo
213.897 109.911 li
216.897 103.911 li
cp
f
231.897 299.391 mo
241.377 299.031 li
241.377 300.111 li
231.897 300.351 li
cp
240.297 296.631 mo
246.417 299.391 li
240.417 302.631 li
cp
f
231.897 164.871 mo
241.377 164.871 li
241.377 165.831 li
231.897 165.831 li
cp
240.417 162.351 mo
246.417 165.351 li
240.417 168.351 li
cp
f
273.417 299.871 mo
284.696 300.231 li
284.817 299.271 li
273.417 298.911 li
cp
283.617 302.631 mo
289.737 299.871 li
283.857 296.631 li
cp
f
273.417 164.871 mo
284.696 164.871 li
284.696 165.831 li
273.417 165.831 li
cp
283.737 162.351 mo
289.737 165.351 li
283.737 168.351 li
cp
f
54.0565 401.511 mo
54.0565 399.231 li
56.3365 399.231 li
56.3365 401.511 li
cp
54.0565 392.391 mo
54.0565 383.271 li
56.3365 383.271 li
56.3365 392.391 li
cp
54.0565 376.431 mo
54.0565 374.151 li
56.3365 374.151 li
56.3365 376.431 li
cp
54.0565 367.311 mo
54.0565 358.191 li
56.3365 358.191 li
56.3365 367.311 li
cp
54.0565 351.351 mo
54.0565 349.071 li
56.3365 349.071 li
56.3365 351.351 li
cp
54.0565 342.231 mo
54.0565 333.111 li
56.3365 333.111 li
56.3365 342.231 li
cp
54.0565 326.271 mo
54.0565 323.991 li
56.3365 323.991 li
56.3365 326.271 li
cp
56.0965 316.791 mo
57.4165 315.231 59.3365 314.391 61.4965 314.391 cv
65.4565 314.391 li
65.4565 316.671 li
61.4965 316.671 li
60.0565 316.671 58.7365 317.271 57.7765 318.351 cv
56.0965 316.791 li
cp
72.2965 314.391 mo
74.5765 314.391 li
74.5765 316.671 li
72.2965 316.671 li
cp
81.4165 314.391 mo
86.9365 314.391 li
88.3765 314.391 89.8165 314.751 91.0165 315.591 cv
89.6965 317.511 li
88.9765 316.911 87.8965 316.671 86.9365 316.671 cv
81.4165 316.671 li
81.4165 314.391 li
cp
94.3765 322.311 mo
94.3765 324.591 li
92.0965 324.591 li
92.0965 322.311 li
cp
94.3765 331.431 mo
94.3765 340.551 li
92.0965 340.551 li
92.0965 331.431 li
cp
94.3765 347.391 mo
94.3765 349.671 li
92.0965 349.671 li
92.0965 347.391 li
cp
94.3765 356.511 mo
94.3765 365.631 li
92.0965 365.631 li
92.0965 356.511 li
cp
94.3765 372.471 mo
94.3765 374.751 li
92.0965 374.751 li
92.0965 372.471 li
cp
94.3765 381.591 mo
94.3765 390.711 li
92.0965 390.711 li
92.0965 381.591 li
cp
94.3765 397.551 mo
94.3765 399.831 li
92.0965 399.831 li
92.0965 397.551 li
cp
94.3765 406.671 mo
94.3765 407.391 li
94.3765 410.991 91.9765 413.871 88.7365 414.711 cv
88.1365 412.551 li
90.4165 411.951 92.0965 409.911 92.0965 407.391 cv
92.0965 406.671 li
94.3765 406.671 li
cp
81.6565 414.951 mo
79.3765 414.951 li
79.3765 412.671 li
81.6565 412.671 li
cp
72.5365 414.951 mo
63.4165 414.951 li
63.4165 412.671 li
72.5365 412.671 li
cp
61.4965 414.951 mo
57.7765 414.951 54.6565 412.071 54.1765 408.471 cv
56.4565 408.111 li
56.6965 410.631 58.8565 412.671 61.4965 412.671 cv
61.4965 414.951 li
cp
.167788 1 1 .0855116 cmyk
f
grestore
%ADOBeginSubsetFont: GFNBAA+CIDFont+F2 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal FWUQJJ+CIDFont+F2 gcheck setglobal} if
2 686 24 <000200ac0000048f050e0012001f0098b0852b58401d3f2101131810014d
13100f014d13140d014d13120c014d13180b014d13bb02320000001affe8
b310014d1ab8fff0b30f014d1ab8fff0b30d014d1ab8fff6b30c014d1ab8
ffe8b30b014d1abb021100090018010cb20e511bb80126b10554003fed3f
ed012fe12b2b2b2b2bd4e12b2b2b2b2b31305d1bb10e18b8010cb46c0e51
051bb80126b26c055400183f2b3f2b30315901140e022321222635113436
3321321e0207342e0223231133323e02048f56a5f0a6feee172929170125
a8e89d51b5346faa86afb17caa7239029aa8fba5521f270482271f57a3e8
9969b5844afc113e80c1>FWUQJJ+CIDFont+F2 AddT42Char 
2 2264 286 <0002005dffed039903ca002b003400eab0852b58402a2f363f366f360313
200d014d13200f014d1313212c100c014d2c180b014d2c100d014d2c100f
10014c2cb801f9b5442ba42b022bb8fff0b50f014d2b3404b8ffe0b30d01
4d04b8ffeeb30c014d04b8ffe0b30b014d04b8ffe8b40f10014c04b8020a
4021212cc78004900402c00401d0040104041c2fdc264a18ea600e700e02
0e09ea1c4d003ffdd45ded3fed12392f5d7172ed012fe12b2b2b2b32dd2b
5de12b2b2b2b12392f2b2b31305d1b4022042cc76c76040104041c262fdc
6c264a0e18ea6c000e100e020f030e1c09ea6c1c4d00183f2bc45f5e5d2b
3f2b12392f5d2b3031590114062321141e0233323e0233321e0215140e06
23222e0235343e0233321e021527362623220e020703992719fdb21e4670
514064492f0c070b06030203070b365671406fa7723a3c71a0636a95602d
a60379773d5c3e2202020227214b78562e151a15070e19120d130f0c0b19
18133e7ab87a74b9814544739b581382942e4c653700>FWUQJJ+CIDFont+F2 AddT42Char 
2 2646 349 <00020085fffa0151052f0015002100a7b0852b58b73f234f236f230316b8
ffe8b30d014d16b8fff6b30c014d16b8ffe8b313014d16b8ffe0b310014d
16b8fff0b30f014d16b8ffe8b30b014d16bb0271001c0015fff0b30d014d
15b8fff6b30c014d15b8ffe8b30b014d15b8fff0b40f10014c15b801f8b6
0a1f400f014d1fb8013eb4191049054c003f3fd6ed2b012fe12b2b2b2bd4
e12b2b2b2b2b2b31305d1bb1191fb8013eb56c191049054c00183f3fc62b
30315925140e0223222e023511343e0233321e0215131406232226353436
333216013e08122019182013070713201819201208132c3b3a2b2c3b3a2b
19080b080404080b080384070c080404080c0701303a2a29393a2a29>FWUQJJ+CIDFont+F2 AddT42Char 
2 3232 393 <00020099fe9403d503ca002a003d00b1b0852b58b53f3f0121360ab8fff0
b30d014d0ab8fff6b30c014d0ab8fff0b40f10014c0ab8ffe8b30b014d0a
b801f84017152b200d014d2b120c014d2b180f10014c2b180b014d2bb802
0a400900150a363521040530b80105b6264a1b49104f39b80105b1054d00
3fed3f3f3fed121739012fd4e12b2b2b2b10e12b2b2b2b323931305d1bb7
0a36352104052630b8010540096c264a1b49104f0539b80105b26c054d00
183f2b3f3f3f2b12173930315901140e0223222e022711140e0223222e02
3511343e0233321e0215153e0333321e0207342e0223220e020711161633
323e0203d53363925e2844414024081220191820130706121c14151b1207
294c4d512d628a5728ae15335640203e404627447a433e59371a01e976bc
834710223423fe3e080c080404080c0804e9090b080303080b09792a3e29
154c84af754581643c13294331fe9a53583c647c>FWUQJJ+CIDFont+F2 AddT42Char 
2 3858 400 <00010051ffed02ce03ca00490110b0852b58400c2f4b3f4b4f4b7f4baf4b
0541b8fff0b30d014d41b8fff6b30c014d41b8fff0b30f014d41b8ffc0b3
13014d41b8fff0b310014d41b8fff0b30b014d41b801dc401f243224320c
1b100d014d1b0a0c014d1b1010014d1b100b014d1b100f014d1bba01f600
00ffc0400a0f014d000c400b014d0cb8ffc0402613014d3f0caf0c020c2e
dd370aeb115011601170110337113711163cdb411b05294a16e8054d003f
ed3f123939ed1139392f2f5d10ed10ed012f5d2b2bd42be12b2b2b2b2b12
39392f2fe12b2b2b2b2b2b31305d1b4025372edd6c110aeb6c0011101120
11030e033711371116293cdb6c411b05294a0516e86c054d00183f2b3f12
39392b1139392f2f5f5e5d2b2b30315901140e0223222e0435343e023332
1e0233323e0235342e0635343e0233321e0615140e0223222e0223220e02
15141e0602ce335e824e30574530160a04060b070b2b3f56382a44321b27
40505551402729527b5224483a291507030303070a06092236492f2a4029
1528405255534027010e456c4a260f171914241f131a10071b201b122336
252634281f222b3e563c3561492c0c1215100c0f16101119100716191613
23301c27352820222a3c5400>FWUQJJ+CIDFont+F2 AddT42Char 
2 4320 410 <00010021ffef026d04ad003a0089b0852b58b4290011232db8fff0b30f01
4d2db8fff0b30d014d2db8fff6b30c014d2db8ffe8b310014d2db8ffe8b3
0b014d2db801f8400c170d2ded23481d0ded174831b80104b1074d003fed
3fedcd3fed012f33e12b2b2b2b2b32cdc43231301b4011232ded6c23481d
1740170ded6c17480731b80104b26c074d00183f2b3f2b1a10cd3f2b3031
5925140e0423222e02351123222635343e02333335343e0233321e021515
33321e02151406232311141633323e0233321e02026d081020292e174664
401d7e0f1205080d087d0713201819201208e7080c0904120fe737471724
1c1408050905045b1d22100e0906254b734e020e2024131a1107d6070c09
0404090c07d607111a132420fe0a5d5f090a09050e18>FWUQJJ+CIDFont+F2 AddT42Char 
FWUQJJ+CIDFont+F2 /CharStrings get begin
/D 24 def
/e 286 def
/i 349 def
/p 393 def
/s 400 def
/t 410 def
end
FWUQJJ+CIDFont+F2 /Encoding get
dup 68 /D put
dup 101 /e put
dup 105 /i put
dup 112 /p put
dup 115 /s put
dup 116 /t put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/FWUQJJ+CIDFont+F2*1 
[67{/.notdef}rp /C /D /.notdef /F 7{/.notdef}rp /N 22{/.notdef}rp 
/e 3{/.notdef}rp /i 5{/.notdef}rp /o /p 2{/.notdef}rp /s 
/t /.notdef /v 137{/.notdef}rp]
FWUQJJ+CIDFont+F2 nf
FWUQJJ+CIDFont+F2*1 [0 -14.0405 -14.04 0 0 0 ]msf
95.2191 206.869 mo
(DispNet)
[-8.70526 -3.22949 -5.47577 -7.3009 -9.12646 -6.87973 0 ]ysh
35.5765 232.671 mo
61.2565 359.631 li
62.2165 359.391 li
36.5365 232.551 li
cp
58.6165 359.151 mo
62.6965 364.431 li
64.4965 357.951 li
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/FWUQJK+CIDFont+F3-GBK-EUC-H-Identity-H uf
/FWUQJK+CIDFont+F3-GBK-EUC-H /CIDFont ur
/FWUQJI+CIDFont+F1*1 uf
/FWUQJI+CIDFont+F1 uf
/QJJAAA+CIDFont+F1 uf
/FWUQJJ+CIDFont+F2*1 uf
/FWUQJJ+CIDFont+F2 uf
/GFNBAA+CIDFont+F2 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
