%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: sequence_09.pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: gaof
%%CreationDate: 19.2.25, 19:04:30
%%BoundingBox: 0 0 406 595
%%HiResBoundingBox: 0 0 405.8748 594.0563
%%CropBox: 0 0 405.8748 594.0563
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 571 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2019-02-25T19:02:41+08:00"
   xmp:CreatorTool="matplotlib 2.2.3, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend 2.2.3"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -594.056 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 594.056 li
405.875 594.056 li
405.875 0 li
cp
clp
gsave
0 594.056 mo
406 594.056 li
406 -.94375 li
0 -.94375 li
0 594.056 li
clp
0 594.056 mo
405.875 594.056 li
405.875 0 li
0 0 li
0 594.056 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
59.2656 557.9 mo
402.375 557.9 li
402.375 3.50003 li
59.2656 3.50003 li
59.2656 557.9 li
f
98.4655 557.9 mo
98.4655 561.4 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
98.4655 557.9 mo
98.4655 561.4 li
@
93.1263 573.696 mo
95.2193 573.696 li
95.2193 566.468 li
92.9443 566.923 li
92.9443 565.753 li
95.2063 565.298 li
96.4933 565.298 li
96.4933 573.696 li
98.5863 573.696 li
98.5863 574.775 li
93.1263 574.775 li
93.1263 573.696 li
f
103.916 566.143 mo
103.253 566.143 102.759 566.468 102.421 567.118 cv
102.083 567.768 101.927 568.743 101.927 570.043 cv
101.927 571.343 102.083 572.318 102.421 572.968 cv
102.759 573.618 103.253 573.943 103.916 573.943 cv
104.579 573.943 105.073 573.618 105.411 572.968 cv
105.736 572.318 105.905 571.343 105.905 570.043 cv
105.905 568.743 105.736 567.768 105.411 567.118 cv
105.073 566.468 104.579 566.143 103.916 566.143 cv
103.916 565.129 mo
104.969 565.129 105.775 565.558 106.347 566.39 cv
106.906 567.235 107.192 568.457 107.192 570.043 cv
107.192 571.642 106.906 572.864 106.347 573.696 cv
105.775 574.528 104.969 574.944 103.916 574.944 cv
102.85 574.944 102.031 574.528 101.472 573.696 cv
100.913 572.864 100.64 571.642 100.64 570.043 cv
100.64 568.457 100.913 567.235 101.472 566.39 cv
102.031 565.558 102.85 565.129 103.916 565.129 cv
f
112.184 566.143 mo
111.521 566.143 111.027 566.468 110.689 567.118 cv
110.351 567.768 110.195 568.743 110.195 570.043 cv
110.195 571.343 110.351 572.318 110.689 572.968 cv
111.027 573.618 111.521 573.943 112.184 573.943 cv
112.847 573.943 113.341 573.618 113.679 572.968 cv
114.004 572.318 114.173 571.343 114.173 570.043 cv
114.173 568.743 114.004 567.768 113.679 567.118 cv
113.341 566.468 112.847 566.143 112.184 566.143 cv
112.184 565.129 mo
113.237 565.129 114.043 565.558 114.615 566.39 cv
115.174 567.235 115.46 568.457 115.46 570.043 cv
115.46 571.642 115.174 572.864 114.615 573.696 cv
114.043 574.528 113.237 574.944 112.184 574.944 cv
111.118 574.944 110.299 574.528 109.74 573.696 cv
109.181 572.864 108.908 571.642 108.908 570.043 cv
108.908 568.457 109.181 567.235 109.74 566.39 cv
110.299 565.558 111.118 565.129 112.184 565.129 cv
f
81.9998 570.16 mo
90.1378 570.16 li
90.1378 571.239 li
81.9998 571.239 li
81.9998 570.16 li
f
160.891 557.9 mo
160.891 561.4 li
f
160.891 557.9 mo
160.891 561.4 li
@
160.892 566.143 mo
160.229 566.143 159.735 566.468 159.397 567.118 cv
159.059 567.768 158.903 568.743 158.903 570.043 cv
158.903 571.343 159.059 572.318 159.397 572.968 cv
159.735 573.618 160.229 573.943 160.892 573.943 cv
161.555 573.943 162.049 573.618 162.387 572.968 cv
162.712 572.318 162.881 571.343 162.881 570.043 cv
162.881 568.743 162.712 567.768 162.387 567.118 cv
162.049 566.468 161.555 566.143 160.892 566.143 cv
160.892 565.129 mo
161.945 565.129 162.751 565.558 163.323 566.39 cv
163.882 567.235 164.168 568.457 164.168 570.043 cv
164.168 571.642 163.882 572.864 163.323 573.696 cv
162.751 574.528 161.945 574.944 160.892 574.944 cv
159.826 574.944 159.007 574.528 158.448 573.696 cv
157.889 572.864 157.616 571.642 157.616 570.043 cv
157.616 568.457 157.889 567.235 158.448 566.39 cv
159.007 565.558 159.826 565.129 160.892 565.129 cv
f
223.316 557.9 mo
223.316 561.4 li
f
223.316 557.9 mo
223.316 561.4 li
@
212.529 573.696 mo
214.622 573.696 li
214.622 566.468 li
212.347 566.923 li
212.347 565.753 li
214.609 565.298 li
215.896 565.298 li
215.896 573.696 li
217.989 573.696 li
217.989 574.775 li
212.529 574.775 li
212.529 573.696 li
f
223.319 566.143 mo
222.656 566.143 222.162 566.468 221.824 567.118 cv
221.486 567.768 221.33 568.743 221.33 570.043 cv
221.33 571.343 221.486 572.318 221.824 572.968 cv
222.162 573.618 222.656 573.943 223.319 573.943 cv
223.982 573.943 224.476 573.618 224.814 572.968 cv
225.139 572.318 225.308 571.343 225.308 570.043 cv
225.308 568.743 225.139 567.768 224.814 567.118 cv
224.476 566.468 223.982 566.143 223.319 566.143 cv
223.319 565.129 mo
224.372 565.129 225.178 565.558 225.75 566.39 cv
226.309 567.235 226.595 568.457 226.595 570.043 cv
226.595 571.642 226.309 572.864 225.75 573.696 cv
225.178 574.528 224.372 574.944 223.319 574.944 cv
222.253 574.944 221.434 574.528 220.875 573.696 cv
220.316 572.864 220.043 571.642 220.043 570.043 cv
220.043 568.457 220.316 567.235 220.875 566.39 cv
221.434 565.558 222.253 565.129 223.319 565.129 cv
f
231.587 566.143 mo
230.924 566.143 230.43 566.468 230.092 567.118 cv
229.754 567.768 229.598 568.743 229.598 570.043 cv
229.598 571.343 229.754 572.318 230.092 572.968 cv
230.43 573.618 230.924 573.943 231.587 573.943 cv
232.25 573.943 232.744 573.618 233.082 572.968 cv
233.407 572.318 233.576 571.343 233.576 570.043 cv
233.576 568.743 233.407 567.768 233.082 567.118 cv
232.744 566.468 232.25 566.143 231.587 566.143 cv
231.587 565.129 mo
232.64 565.129 233.446 565.558 234.018 566.39 cv
234.577 567.235 234.863 568.457 234.863 570.043 cv
234.863 571.642 234.577 572.864 234.018 573.696 cv
233.446 574.528 232.64 574.944 231.587 574.944 cv
230.521 574.944 229.702 574.528 229.143 573.696 cv
228.584 572.864 228.311 571.642 228.311 570.043 cv
228.311 568.457 228.584 567.235 229.143 566.39 cv
229.702 565.558 230.521 565.129 231.587 565.129 cv
f
285.741 557.9 mo
285.741 561.4 li
f
285.741 557.9 mo
285.741 561.4 li
@
275.838 573.696 mo
280.31 573.696 li
280.31 574.775 li
274.291 574.775 li
274.291 573.696 li
274.772 573.202 275.435 572.526 276.28 571.668 cv
277.112 570.823 277.645 570.277 277.866 570.03 cv
278.282 569.575 278.568 569.185 278.724 568.86 cv
278.88 568.548 278.971 568.223 278.971 567.911 cv
278.971 567.417 278.789 567.001 278.438 566.689 cv
278.087 566.377 277.632 566.208 277.06 566.208 cv
276.657 566.208 276.228 566.286 275.786 566.416 cv
275.344 566.559 274.863 566.767 274.356 567.053 cv
274.356 565.753 li
274.876 565.545 275.357 565.389 275.799 565.285 cv
276.241 565.181 276.657 565.129 277.034 565.129 cv
278.009 565.129 278.789 565.376 279.374 565.87 cv
279.959 566.364 280.258 567.014 280.258 567.833 cv
280.258 568.223 280.18 568.6 280.037 568.938 cv
279.894 569.289 279.634 569.705 279.244 570.173 cv
279.14 570.303 278.802 570.654 278.23 571.239 cv
277.658 571.824 276.865 572.643 275.838 573.696 cv
f
285.744 566.143 mo
285.081 566.143 284.587 566.468 284.249 567.118 cv
283.911 567.768 283.755 568.743 283.755 570.043 cv
283.755 571.343 283.911 572.318 284.249 572.968 cv
284.587 573.618 285.081 573.943 285.744 573.943 cv
286.407 573.943 286.901 573.618 287.239 572.968 cv
287.564 572.318 287.733 571.343 287.733 570.043 cv
287.733 568.743 287.564 567.768 287.239 567.118 cv
286.901 566.468 286.407 566.143 285.744 566.143 cv
285.744 565.129 mo
286.797 565.129 287.603 565.558 288.175 566.39 cv
288.734 567.235 289.02 568.457 289.02 570.043 cv
289.02 571.642 288.734 572.864 288.175 573.696 cv
287.603 574.528 286.797 574.944 285.744 574.944 cv
284.678 574.944 283.859 574.528 283.3 573.696 cv
282.741 572.864 282.468 571.642 282.468 570.043 cv
282.468 568.457 282.741 567.235 283.3 566.39 cv
283.859 565.558 284.678 565.129 285.744 565.129 cv
f
294.012 566.143 mo
293.349 566.143 292.855 566.468 292.517 567.118 cv
292.179 567.768 292.023 568.743 292.023 570.043 cv
292.023 571.343 292.179 572.318 292.517 572.968 cv
292.855 573.618 293.349 573.943 294.012 573.943 cv
294.675 573.943 295.169 573.618 295.507 572.968 cv
295.832 572.318 296.001 571.343 296.001 570.043 cv
296.001 568.743 295.832 567.768 295.507 567.118 cv
295.169 566.468 294.675 566.143 294.012 566.143 cv
294.012 565.129 mo
295.065 565.129 295.871 565.558 296.443 566.39 cv
297.002 567.235 297.288 568.457 297.288 570.043 cv
297.288 571.642 297.002 572.864 296.443 573.696 cv
295.871 574.528 295.065 574.944 294.012 574.944 cv
292.946 574.944 292.127 574.528 291.568 573.696 cv
291.009 572.864 290.736 571.642 290.736 570.043 cv
290.736 568.457 291.009 567.235 291.568 566.39 cv
292.127 565.558 292.946 565.129 294.012 565.129 cv
f
348.166 557.9 mo
348.166 561.4 li
f
348.166 557.9 mo
348.166 561.4 li
@
341.045 569.666 mo
341.656 569.796 342.137 570.069 342.475 570.485 cv
342.813 570.901 342.995 571.421 342.995 572.019 cv
342.995 572.955 342.67 573.683 342.033 574.19 cv
341.383 574.697 340.473 574.944 339.29 574.944 cv
338.887 574.944 338.471 574.905 338.055 574.827 cv
337.639 574.762 337.197 574.645 336.755 574.489 cv
336.755 573.254 li
337.106 573.462 337.496 573.618 337.925 573.722 cv
338.341 573.826 338.783 573.878 339.251 573.878 cv
340.057 573.878 340.668 573.722 341.084 573.41 cv
341.5 573.098 341.721 572.63 341.721 572.019 cv
341.721 571.473 341.526 571.031 341.136 570.719 cv
340.746 570.407 340.2 570.238 339.498 570.238 cv
338.393 570.238 li
338.393 569.185 li
339.55 569.185 li
340.174 569.185 340.655 569.068 340.993 568.808 cv
341.331 568.561 341.5 568.197 341.5 567.716 cv
341.5 567.235 341.318 566.858 340.98 566.598 cv
340.629 566.338 340.135 566.208 339.498 566.208 cv
339.147 566.208 338.77 566.247 338.367 566.325 cv
337.964 566.403 337.522 566.52 337.041 566.676 cv
337.041 565.532 li
337.522 565.402 337.977 565.298 338.406 565.233 cv
338.822 565.168 339.225 565.129 339.615 565.129 cv
340.577 565.129 341.344 565.35 341.916 565.792 cv
342.488 566.234 342.774 566.832 342.774 567.586 cv
342.774 568.106 342.618 568.548 342.319 568.912 cv
342.02 569.276 341.591 569.536 341.045 569.666 cv
f
348.169 566.143 mo
347.506 566.143 347.012 566.468 346.674 567.118 cv
346.336 567.768 346.18 568.743 346.18 570.043 cv
346.18 571.343 346.336 572.318 346.674 572.968 cv
347.012 573.618 347.506 573.943 348.169 573.943 cv
348.832 573.943 349.326 573.618 349.664 572.968 cv
349.989 572.318 350.158 571.343 350.158 570.043 cv
350.158 568.743 349.989 567.768 349.664 567.118 cv
349.326 566.468 348.832 566.143 348.169 566.143 cv
348.169 565.129 mo
349.222 565.129 350.028 565.558 350.6 566.39 cv
351.159 567.235 351.445 568.457 351.445 570.043 cv
351.445 571.642 351.159 572.864 350.6 573.696 cv
350.028 574.528 349.222 574.944 348.169 574.944 cv
347.103 574.944 346.284 574.528 345.725 573.696 cv
345.166 572.864 344.893 571.642 344.893 570.043 cv
344.893 568.457 345.166 567.235 345.725 566.39 cv
346.284 565.558 347.103 565.129 348.169 565.129 cv
f
356.437 566.143 mo
355.774 566.143 355.28 566.468 354.942 567.118 cv
354.604 567.768 354.448 568.743 354.448 570.043 cv
354.448 571.343 354.604 572.318 354.942 572.968 cv
355.28 573.618 355.774 573.943 356.437 573.943 cv
357.1 573.943 357.594 573.618 357.932 572.968 cv
358.257 572.318 358.426 571.343 358.426 570.043 cv
358.426 568.743 358.257 567.768 357.932 567.118 cv
357.594 566.468 357.1 566.143 356.437 566.143 cv
356.437 565.129 mo
357.49 565.129 358.296 565.558 358.868 566.39 cv
359.427 567.235 359.713 568.457 359.713 570.043 cv
359.713 571.642 359.427 572.864 358.868 573.696 cv
358.296 574.528 357.49 574.944 356.437 574.944 cv
355.371 574.944 354.552 574.528 353.993 573.696 cv
353.434 572.864 353.161 571.642 353.161 570.043 cv
353.161 568.457 353.434 567.235 353.993 566.39 cv
354.552 565.558 355.371 565.129 356.437 565.129 cv
f
220.629 584.242 mo
218.055 587.7 li
220.759 591.353 li
219.381 591.353 li
217.314 588.558 li
215.247 591.353 li
213.869 591.353 li
216.625 587.635 li
214.103 584.242 li
215.481 584.242 li
217.366 586.777 li
219.251 584.242 li
220.629 584.242 li
f
229.352 581.486 mo
228.78 582.474 228.364 583.436 228.091 584.385 cv
227.805 585.334 227.675 586.296 227.675 587.271 cv
227.675 588.259 227.805 589.221 228.091 590.17 cv
228.364 591.132 228.78 592.081 229.352 593.056 cv
228.338 593.056 li
227.701 592.055 227.22 591.093 226.908 590.131 cv
226.596 589.169 226.44 588.22 226.44 587.271 cv
226.44 586.335 226.596 585.386 226.908 584.424 cv
227.22 583.462 227.688 582.487 228.338 581.486 cv
229.352 581.486 li
f
237.152 585.607 mo
237.438 585.087 237.789 584.71 238.192 584.45 cv
238.595 584.203 239.076 584.073 239.635 584.073 cv
240.363 584.073 240.935 584.333 241.338 584.853 cv
241.741 585.373 241.949 586.114 241.949 587.063 cv
241.949 591.353 li
240.779 591.353 li
240.779 587.102 li
240.779 586.426 240.649 585.919 240.415 585.581 cv
240.168 585.256 239.804 585.087 239.31 585.087 cv
238.699 585.087 238.218 585.295 237.867 585.698 cv
237.516 586.101 237.347 586.647 237.347 587.336 cv
237.347 591.353 li
236.177 591.353 li
236.177 587.102 li
236.177 586.426 236.047 585.919 235.813 585.581 cv
235.566 585.256 235.189 585.087 234.695 585.087 cv
234.097 585.087 233.616 585.295 233.265 585.698 cv
232.914 586.101 232.745 586.647 232.745 587.336 cv
232.745 591.353 li
231.575 591.353 li
231.575 584.242 li
232.745 584.242 li
232.745 585.347 li
233.005 584.918 233.33 584.593 233.707 584.385 cv
234.071 584.177 234.513 584.073 235.033 584.073 cv
235.553 584.073 235.982 584.203 236.346 584.463 cv
236.71 584.723 236.97 585.113 237.152 585.607 cv
f
244.094 581.486 mo
245.108 581.486 li
245.732 582.487 246.213 583.462 246.525 584.424 cv
246.837 585.386 247.006 586.335 247.006 587.271 cv
247.006 588.22 246.837 589.169 246.525 590.131 cv
246.213 591.093 245.732 592.055 245.108 593.056 cv
244.094 593.056 li
244.653 592.081 245.069 591.132 245.355 590.17 cv
245.628 589.221 245.771 588.259 245.771 587.271 cv
245.771 586.296 245.628 585.334 245.355 584.385 cv
245.069 583.436 244.653 582.474 244.094 581.486 cv
f
59.2656 554.203 mo
55.7656 554.203 li
f
59.2656 554.203 mo
55.7656 554.203 li
@
32.7487 554.031 mo
33.3597 554.161 33.8407 554.435 34.1787 554.851 cv
34.5167 555.266 34.6987 555.786 34.6987 556.385 cv
34.6987 557.32 34.3737 558.049 33.7367 558.555 cv
33.0867 559.063 32.1767 559.31 30.9937 559.31 cv
30.5907 559.31 30.1747 559.271 29.7587 559.193 cv
29.3427 559.128 28.9007 559.01 28.4587 558.854 cv
28.4587 557.62 li
28.8097 557.828 29.1997 557.984 29.6287 558.088 cv
30.0447 558.192 30.4867 558.244 30.9547 558.244 cv
31.7607 558.244 32.3717 558.088 32.7877 557.776 cv
33.2037 557.464 33.4247 556.995 33.4247 556.385 cv
33.4247 555.839 33.2297 555.396 32.8397 555.084 cv
32.4497 554.773 31.9037 554.604 31.2017 554.604 cv
30.0967 554.604 li
30.0967 553.55 li
31.2537 553.55 li
31.8777 553.55 32.3587 553.434 32.6967 553.174 cv
33.0347 552.927 33.2037 552.563 33.2037 552.081 cv
33.2037 551.601 33.0217 551.224 32.6837 550.964 cv
32.3327 550.703 31.8387 550.573 31.2017 550.573 cv
30.8507 550.573 30.4737 550.612 30.0707 550.69 cv
29.6677 550.768 29.2257 550.885 28.7447 551.042 cv
28.7447 549.898 li
29.2257 549.768 29.6807 549.664 30.1097 549.599 cv
30.5257 549.534 30.9287 549.495 31.3187 549.495 cv
32.2807 549.495 33.0477 549.716 33.6197 550.158 cv
34.1917 550.599 34.4777 551.198 34.4777 551.951 cv
34.4777 552.471 34.3217 552.914 34.0227 553.278 cv
33.7237 553.641 33.2947 553.901 32.7487 554.031 cv
f
39.8727 550.508 mo
39.2097 550.508 38.7157 550.833 38.3777 551.484 cv
38.0397 552.133 37.8837 553.109 37.8837 554.409 cv
37.8837 555.708 38.0397 556.684 38.3777 557.333 cv
38.7157 557.984 39.2097 558.309 39.8727 558.309 cv
40.5357 558.309 41.0297 557.984 41.3677 557.333 cv
41.6927 556.684 41.8617 555.708 41.8617 554.409 cv
41.8617 553.109 41.6927 552.133 41.3677 551.484 cv
41.0297 550.833 40.5357 550.508 39.8727 550.508 cv
39.8727 549.495 mo
40.9257 549.495 41.7317 549.924 42.3037 550.755 cv
42.8627 551.601 43.1487 552.823 43.1487 554.409 cv
43.1487 556.008 42.8627 557.229 42.3037 558.062 cv
41.7317 558.893 40.9257 559.31 39.8727 559.31 cv
38.8067 559.31 37.9877 558.893 37.4287 558.062 cv
36.8697 557.229 36.5967 556.008 36.5967 554.409 cv
36.5967 552.823 36.8697 551.601 37.4287 550.755 cv
37.9877 549.924 38.8067 549.495 39.8727 549.495 cv
f
48.1407 550.508 mo
47.4777 550.508 46.9837 550.833 46.6457 551.484 cv
46.3077 552.133 46.1517 553.109 46.1517 554.409 cv
46.1517 555.708 46.3077 556.684 46.6457 557.333 cv
46.9837 557.984 47.4777 558.309 48.1407 558.309 cv
48.8037 558.309 49.2977 557.984 49.6357 557.333 cv
49.9607 556.684 50.1297 555.708 50.1297 554.409 cv
50.1297 553.109 49.9607 552.133 49.6357 551.484 cv
49.2977 550.833 48.8037 550.508 48.1407 550.508 cv
48.1407 549.495 mo
49.1937 549.495 49.9997 549.924 50.5717 550.755 cv
51.1307 551.601 51.4167 552.823 51.4167 554.409 cv
51.4167 556.008 51.1307 557.229 50.5717 558.062 cv
49.9997 558.893 49.1937 559.31 48.1407 559.31 cv
47.0747 559.31 46.2557 558.893 45.6967 558.062 cv
45.1377 557.229 44.8647 556.008 44.8647 554.409 cv
44.8647 552.823 45.1377 551.601 45.6967 550.755 cv
46.2557 549.924 47.0747 549.495 48.1407 549.495 cv
f
17.9561 554.526 mo
26.0941 554.526 li
26.0941 555.604 li
17.9561 555.604 li
17.9561 554.526 li
f
59.2656 491.778 mo
55.7656 491.778 li
f
59.2656 491.778 mo
55.7656 491.778 li
@
29.9667 495.637 mo
34.4387 495.637 li
34.4387 496.716 li
28.4197 496.716 li
28.4197 495.637 li
28.9007 495.143 29.5637 494.467 30.4087 493.609 cv
31.2407 492.764 31.7737 492.218 31.9947 491.971 cv
32.4107 491.516 32.6967 491.126 32.8527 490.801 cv
33.0087 490.489 33.0997 490.164 33.0997 489.852 cv
33.0997 489.358 32.9177 488.942 32.5667 488.63 cv
32.2157 488.318 31.7607 488.149 31.1887 488.149 cv
30.7857 488.149 30.3567 488.227 29.9147 488.357 cv
29.4727 488.5 28.9917 488.708 28.4847 488.994 cv
28.4847 487.694 li
29.0047 487.486 29.4857 487.33 29.9277 487.226 cv
30.3697 487.122 30.7857 487.07 31.1627 487.07 cv
32.1377 487.07 32.9177 487.317 33.5027 487.811 cv
34.0877 488.305 34.3867 488.955 34.3867 489.774 cv
34.3867 490.164 34.3087 490.541 34.1657 490.879 cv
34.0227 491.23 33.7627 491.646 33.3727 492.114 cv
33.2687 492.244 32.9307 492.595 32.3587 493.18 cv
31.7867 493.765 30.9937 494.584 29.9667 495.637 cv
f
39.8727 488.084 mo
39.2097 488.084 38.7157 488.409 38.3777 489.059 cv
38.0397 489.709 37.8837 490.684 37.8837 491.984 cv
37.8837 493.284 38.0397 494.259 38.3777 494.909 cv
38.7157 495.559 39.2097 495.884 39.8727 495.884 cv
40.5357 495.884 41.0297 495.559 41.3677 494.909 cv
41.6927 494.259 41.8617 493.284 41.8617 491.984 cv
41.8617 490.684 41.6927 489.709 41.3677 489.059 cv
41.0297 488.409 40.5357 488.084 39.8727 488.084 cv
39.8727 487.07 mo
40.9257 487.07 41.7317 487.499 42.3037 488.331 cv
42.8627 489.176 43.1487 490.398 43.1487 491.984 cv
43.1487 493.583 42.8627 494.805 42.3037 495.637 cv
41.7317 496.469 40.9257 496.885 39.8727 496.885 cv
38.8067 496.885 37.9877 496.469 37.4287 495.637 cv
36.8697 494.805 36.5967 493.583 36.5967 491.984 cv
36.5967 490.398 36.8697 489.176 37.4287 488.331 cv
37.9877 487.499 38.8067 487.07 39.8727 487.07 cv
f
48.1407 488.084 mo
47.4777 488.084 46.9837 488.409 46.6457 489.059 cv
46.3077 489.709 46.1517 490.684 46.1517 491.984 cv
46.1517 493.284 46.3077 494.259 46.6457 494.909 cv
46.9837 495.559 47.4777 495.884 48.1407 495.884 cv
48.8037 495.884 49.2977 495.559 49.6357 494.909 cv
49.9607 494.259 50.1297 493.284 50.1297 491.984 cv
50.1297 490.684 49.9607 489.709 49.6357 489.059 cv
49.2977 488.409 48.8037 488.084 48.1407 488.084 cv
48.1407 487.07 mo
49.1937 487.07 49.9997 487.499 50.5717 488.331 cv
51.1307 489.176 51.4167 490.398 51.4167 491.984 cv
51.4167 493.583 51.1307 494.805 50.5717 495.637 cv
49.9997 496.469 49.1937 496.885 48.1407 496.885 cv
47.0747 496.885 46.2557 496.469 45.6967 495.637 cv
45.1377 494.805 44.8647 493.583 44.8647 491.984 cv
44.8647 490.398 45.1377 489.176 45.6967 488.331 cv
46.2557 487.499 47.0747 487.07 48.1407 487.07 cv
f
17.9561 492.101 mo
26.0941 492.101 li
26.0941 493.18 li
17.9561 493.18 li
17.9561 492.101 li
f
59.2656 429.353 mo
55.7656 429.353 li
f
59.2656 429.353 mo
55.7656 429.353 li
@
29.0827 433.212 mo
31.1757 433.212 li
31.1757 425.984 li
28.9007 426.439 li
28.9007 425.269 li
31.1627 424.814 li
32.4497 424.814 li
32.4497 433.212 li
34.5427 433.212 li
34.5427 434.291 li
29.0827 434.291 li
29.0827 433.212 li
f
39.8727 425.659 mo
39.2097 425.659 38.7157 425.984 38.3777 426.634 cv
38.0397 427.284 37.8837 428.259 37.8837 429.559 cv
37.8837 430.859 38.0397 431.834 38.3777 432.484 cv
38.7157 433.134 39.2097 433.459 39.8727 433.459 cv
40.5357 433.459 41.0297 433.134 41.3677 432.484 cv
41.6927 431.834 41.8617 430.859 41.8617 429.559 cv
41.8617 428.259 41.6927 427.284 41.3677 426.634 cv
41.0297 425.984 40.5357 425.659 39.8727 425.659 cv
39.8727 424.645 mo
40.9257 424.645 41.7317 425.074 42.3037 425.906 cv
42.8627 426.751 43.1487 427.973 43.1487 429.559 cv
43.1487 431.158 42.8627 432.38 42.3037 433.212 cv
41.7317 434.044 40.9257 434.46 39.8727 434.46 cv
38.8067 434.46 37.9877 434.044 37.4287 433.212 cv
36.8697 432.38 36.5967 431.158 36.5967 429.559 cv
36.5967 427.973 36.8697 426.751 37.4287 425.906 cv
37.9877 425.074 38.8067 424.645 39.8727 424.645 cv
f
48.1407 425.659 mo
47.4777 425.659 46.9837 425.984 46.6457 426.634 cv
46.3077 427.284 46.1517 428.259 46.1517 429.559 cv
46.1517 430.859 46.3077 431.834 46.6457 432.484 cv
46.9837 433.134 47.4777 433.459 48.1407 433.459 cv
48.8037 433.459 49.2977 433.134 49.6357 432.484 cv
49.9607 431.834 50.1297 430.859 50.1297 429.559 cv
50.1297 428.259 49.9607 427.284 49.6357 426.634 cv
49.2977 425.984 48.8037 425.659 48.1407 425.659 cv
48.1407 424.645 mo
49.1937 424.645 49.9997 425.074 50.5717 425.906 cv
51.1307 426.751 51.4167 427.973 51.4167 429.559 cv
51.4167 431.158 51.1307 432.38 50.5717 433.212 cv
49.9997 434.044 49.1937 434.46 48.1407 434.46 cv
47.0747 434.46 46.2557 434.044 45.6967 433.212 cv
45.1377 432.38 44.8647 431.158 44.8647 429.559 cv
44.8647 427.973 45.1377 426.751 45.6967 425.906 cv
46.2557 425.074 47.0747 424.645 48.1407 424.645 cv
f
17.9561 429.676 mo
26.0941 429.676 li
26.0941 430.755 li
17.9561 430.755 li
17.9561 429.676 li
f
59.2656 366.928 mo
55.7656 366.928 li
f
59.2656 366.928 mo
55.7656 366.928 li
@
48.134 363.234 mo
47.471 363.234 46.977 363.559 46.639 364.208 cv
46.301 364.859 46.145 365.833 46.145 367.134 cv
46.145 368.434 46.301 369.409 46.639 370.059 cv
46.977 370.708 47.471 371.034 48.134 371.034 cv
48.797 371.034 49.291 370.708 49.629 370.059 cv
49.954 369.409 50.123 368.434 50.123 367.134 cv
50.123 365.833 49.954 364.859 49.629 364.208 cv
49.291 363.559 48.797 363.234 48.134 363.234 cv
48.134 362.22 mo
49.187 362.22 49.993 362.648 50.565 363.48 cv
51.124 364.326 51.41 365.548 51.41 367.134 cv
51.41 368.733 51.124 369.954 50.565 370.786 cv
49.993 371.618 49.187 372.035 48.134 372.035 cv
47.068 372.035 46.249 371.618 45.69 370.786 cv
45.131 369.954 44.858 368.733 44.858 367.134 cv
44.858 365.548 45.131 364.326 45.69 363.48 cv
46.249 362.648 47.068 362.22 48.134 362.22 cv
f
59.2656 304.503 mo
55.7656 304.503 li
f
59.2656 304.503 mo
55.7656 304.503 li
@
29.0807 308.361 mo
31.1737 308.361 li
31.1737 301.133 li
28.8988 301.589 li
28.8988 300.418 li
31.1607 299.964 li
32.4478 299.964 li
32.4478 308.361 li
34.5407 308.361 li
34.5407 309.44 li
29.0807 309.44 li
29.0807 308.361 li
f
39.8708 300.809 mo
39.2078 300.809 38.7138 301.133 38.3758 301.783 cv
38.0378 302.434 37.8818 303.408 37.8818 304.708 cv
37.8818 306.008 38.0378 306.983 38.3758 307.633 cv
38.7138 308.283 39.2078 308.608 39.8708 308.608 cv
40.5338 308.608 41.0278 308.283 41.3658 307.633 cv
41.6908 306.983 41.8598 306.008 41.8598 304.708 cv
41.8598 303.408 41.6908 302.434 41.3658 301.783 cv
41.0278 301.133 40.5338 300.809 39.8708 300.809 cv
39.8708 299.794 mo
40.9238 299.794 41.7298 300.223 42.3018 301.055 cv
42.8608 301.9 43.1468 303.122 43.1468 304.708 cv
43.1468 306.307 42.8608 307.529 42.3018 308.361 cv
41.7298 309.193 40.9238 309.609 39.8708 309.609 cv
38.8048 309.609 37.9858 309.193 37.4268 308.361 cv
36.8678 307.529 36.5948 306.307 36.5948 304.708 cv
36.5948 303.122 36.8678 301.9 37.4268 301.055 cv
37.9858 300.223 38.8048 299.794 39.8708 299.794 cv
f
48.1388 300.809 mo
47.4758 300.809 46.9818 301.133 46.6438 301.783 cv
46.3058 302.434 46.1498 303.408 46.1498 304.708 cv
46.1498 306.008 46.3058 306.983 46.6438 307.633 cv
46.9818 308.283 47.4758 308.608 48.1388 308.608 cv
48.8018 308.608 49.2958 308.283 49.6338 307.633 cv
49.9588 306.983 50.1278 306.008 50.1278 304.708 cv
50.1278 303.408 49.9588 302.434 49.6338 301.783 cv
49.2958 301.133 48.8018 300.809 48.1388 300.809 cv
48.1388 299.794 mo
49.1918 299.794 49.9978 300.223 50.5698 301.055 cv
51.1288 301.9 51.4148 303.122 51.4148 304.708 cv
51.4148 306.307 51.1288 307.529 50.5698 308.361 cv
49.9978 309.193 49.1918 309.609 48.1388 309.609 cv
47.0728 309.609 46.2538 309.193 45.6948 308.361 cv
45.1358 307.529 44.8628 306.307 44.8628 304.708 cv
44.8628 303.122 45.1358 301.9 45.6948 301.055 cv
46.2538 300.223 47.0728 299.794 48.1388 299.794 cv
f
59.2656 242.078 mo
55.7656 242.078 li
f
59.2656 242.078 mo
55.7656 242.078 li
@
29.9648 245.937 mo
34.4367 245.937 li
34.4367 247.016 li
28.4177 247.016 li
28.4177 245.937 li
28.8988 245.443 29.5618 244.767 30.4067 243.909 cv
31.2388 243.064 31.7717 242.518 31.9928 242.271 cv
32.4087 241.816 32.6948 241.426 32.8507 241.101 cv
33.0068 240.788 33.0978 240.464 33.0978 240.152 cv
33.0978 239.658 32.9157 239.242 32.5648 238.93 cv
32.2137 238.618 31.7588 238.449 31.1868 238.449 cv
30.7838 238.449 30.3547 238.527 29.9128 238.657 cv
29.4708 238.799 28.9897 239.008 28.4827 239.294 cv
28.4827 237.993 li
29.0028 237.786 29.4837 237.63 29.9258 237.525 cv
30.3678 237.422 30.7838 237.37 31.1607 237.37 cv
32.1357 237.37 32.9157 237.617 33.5008 238.111 cv
34.0858 238.605 34.3848 239.255 34.3848 240.074 cv
34.3848 240.464 34.3068 240.84 34.1637 241.178 cv
34.0208 241.53 33.7607 241.945 33.3708 242.413 cv
33.2668 242.544 32.9287 242.895 32.3568 243.48 cv
31.7847 244.064 30.9918 244.883 29.9648 245.937 cv
f
39.8708 238.383 mo
39.2078 238.383 38.7138 238.708 38.3758 239.359 cv
38.0378 240.008 37.8818 240.984 37.8818 242.284 cv
37.8818 243.583 38.0378 244.559 38.3758 245.208 cv
38.7138 245.859 39.2078 246.184 39.8708 246.184 cv
40.5338 246.184 41.0278 245.859 41.3658 245.208 cv
41.6908 244.559 41.8598 243.583 41.8598 242.284 cv
41.8598 240.984 41.6908 240.008 41.3658 239.359 cv
41.0278 238.708 40.5338 238.383 39.8708 238.383 cv
39.8708 237.37 mo
40.9238 237.37 41.7298 237.799 42.3018 238.631 cv
42.8608 239.476 43.1468 240.698 43.1468 242.284 cv
43.1468 243.883 42.8608 245.105 42.3018 245.937 cv
41.7298 246.769 40.9238 247.185 39.8708 247.185 cv
38.8048 247.185 37.9858 246.769 37.4268 245.937 cv
36.8678 245.105 36.5948 243.883 36.5948 242.284 cv
36.5948 240.698 36.8678 239.476 37.4268 238.631 cv
37.9858 237.799 38.8048 237.37 39.8708 237.37 cv
f
48.1388 238.383 mo
47.4758 238.383 46.9818 238.708 46.6438 239.359 cv
46.3058 240.008 46.1498 240.984 46.1498 242.284 cv
46.1498 243.583 46.3058 244.559 46.6438 245.208 cv
46.9818 245.859 47.4758 246.184 48.1388 246.184 cv
48.8018 246.184 49.2958 245.859 49.6338 245.208 cv
49.9588 244.559 50.1278 243.583 50.1278 242.284 cv
50.1278 240.984 49.9588 240.008 49.6338 239.359 cv
49.2958 238.708 48.8018 238.383 48.1388 238.383 cv
48.1388 237.37 mo
49.1918 237.37 49.9978 237.799 50.5698 238.631 cv
51.1288 239.476 51.4148 240.698 51.4148 242.284 cv
51.4148 243.883 51.1288 245.105 50.5698 245.937 cv
49.9978 246.769 49.1918 247.185 48.1388 247.185 cv
47.0728 247.185 46.2538 246.769 45.6948 245.937 cv
45.1358 245.105 44.8628 243.883 44.8628 242.284 cv
44.8628 240.698 45.1358 239.476 45.6948 238.631 cv
46.2538 237.799 47.0728 237.37 48.1388 237.37 cv
f
59.2656 179.653 mo
55.7656 179.653 li
f
59.2656 179.653 mo
55.7656 179.653 li
@
32.7467 179.481 mo
33.3577 179.611 33.8387 179.884 34.1768 180.3 cv
34.5148 180.716 34.6968 181.236 34.6968 181.834 cv
34.6968 182.77 34.3717 183.498 33.7347 184.005 cv
33.0848 184.512 32.1748 184.759 30.9918 184.759 cv
30.5888 184.759 30.1728 184.72 29.7568 184.642 cv
29.3407 184.577 28.8988 184.46 28.4568 184.304 cv
28.4568 183.069 li
28.8078 183.277 29.1978 183.433 29.6268 183.537 cv
30.0427 183.641 30.4848 183.693 30.9527 183.693 cv
31.7588 183.693 32.3698 183.537 32.7858 183.225 cv
33.2018 182.913 33.4227 182.445 33.4227 181.834 cv
33.4227 181.288 33.2277 180.846 32.8377 180.534 cv
32.4478 180.222 31.9018 180.053 31.1998 180.053 cv
30.0947 180.053 li
30.0947 179 li
31.2518 179 li
31.8757 179 32.3568 178.883 32.6948 178.623 cv
33.0327 178.376 33.2018 178.012 33.2018 177.531 cv
33.2018 177.05 33.0197 176.673 32.6818 176.413 cv
32.3307 176.153 31.8368 176.023 31.1998 176.023 cv
30.8488 176.023 30.4718 176.062 30.0688 176.14 cv
29.6658 176.218 29.2237 176.335 28.7428 176.491 cv
28.7428 175.347 li
29.2237 175.217 29.6787 175.113 30.1077 175.048 cv
30.5238 174.983 30.9268 174.944 31.3167 174.944 cv
32.2788 174.944 33.0457 175.165 33.6178 175.607 cv
34.1898 176.049 34.4757 176.647 34.4757 177.401 cv
34.4757 177.921 34.3198 178.363 34.0208 178.727 cv
33.7217 179.091 33.2928 179.351 32.7467 179.481 cv
f
39.8708 175.958 mo
39.2078 175.958 38.7138 176.283 38.3758 176.933 cv
38.0378 177.583 37.8818 178.558 37.8818 179.858 cv
37.8818 181.158 38.0378 182.133 38.3758 182.783 cv
38.7138 183.433 39.2078 183.758 39.8708 183.758 cv
40.5338 183.758 41.0278 183.433 41.3658 182.783 cv
41.6908 182.133 41.8598 181.158 41.8598 179.858 cv
41.8598 178.558 41.6908 177.583 41.3658 176.933 cv
41.0278 176.283 40.5338 175.958 39.8708 175.958 cv
39.8708 174.944 mo
40.9238 174.944 41.7298 175.373 42.3018 176.205 cv
42.8608 177.05 43.1468 178.272 43.1468 179.858 cv
43.1468 181.457 42.8608 182.679 42.3018 183.511 cv
41.7298 184.343 40.9238 184.759 39.8708 184.759 cv
38.8048 184.759 37.9858 184.343 37.4268 183.511 cv
36.8678 182.679 36.5948 181.457 36.5948 179.858 cv
36.5948 178.272 36.8678 177.05 37.4268 176.205 cv
37.9858 175.373 38.8048 174.944 39.8708 174.944 cv
f
48.1388 175.958 mo
47.4758 175.958 46.9818 176.283 46.6438 176.933 cv
46.3058 177.583 46.1498 178.558 46.1498 179.858 cv
46.1498 181.158 46.3058 182.133 46.6438 182.783 cv
46.9818 183.433 47.4758 183.758 48.1388 183.758 cv
48.8018 183.758 49.2958 183.433 49.6338 182.783 cv
49.9588 182.133 50.1278 181.158 50.1278 179.858 cv
50.1278 178.558 49.9588 177.583 49.6338 176.933 cv
49.2958 176.283 48.8018 175.958 48.1388 175.958 cv
48.1388 174.944 mo
49.1918 174.944 49.9978 175.373 50.5698 176.205 cv
51.1288 177.05 51.4148 178.272 51.4148 179.858 cv
51.4148 181.457 51.1288 182.679 50.5698 183.511 cv
49.9978 184.343 49.1918 184.759 48.1388 184.759 cv
47.0728 184.759 46.2538 184.343 45.6948 183.511 cv
45.1358 182.679 44.8628 181.457 44.8628 179.858 cv
44.8628 178.272 45.1358 177.05 45.6948 176.205 cv
46.2538 175.373 47.0728 174.944 48.1388 174.944 cv
f
59.2656 117.228 mo
55.7656 117.228 li
f
59.2656 117.228 mo
55.7656 117.228 li
@
32.3828 113.806 mo
29.1458 118.863 li
32.3828 118.863 li
32.3828 113.806 li
32.0448 112.688 mo
33.6567 112.688 li
33.6567 118.863 li
35.0088 118.863 li
35.0088 119.929 li
33.6567 119.929 li
33.6567 122.165 li
32.3828 122.165 li
32.3828 119.929 li
28.1057 119.929 li
28.1057 118.694 li
32.0448 112.688 li
f
39.8708 113.533 mo
39.2078 113.533 38.7138 113.858 38.3758 114.508 cv
38.0378 115.158 37.8818 116.133 37.8818 117.433 cv
37.8818 118.733 38.0378 119.708 38.3758 120.358 cv
38.7138 121.008 39.2078 121.333 39.8708 121.333 cv
40.5338 121.333 41.0278 121.008 41.3658 120.358 cv
41.6908 119.708 41.8598 118.733 41.8598 117.433 cv
41.8598 116.133 41.6908 115.158 41.3658 114.508 cv
41.0278 113.858 40.5338 113.533 39.8708 113.533 cv
39.8708 112.519 mo
40.9238 112.519 41.7298 112.948 42.3018 113.78 cv
42.8608 114.625 43.1468 115.847 43.1468 117.433 cv
43.1468 119.032 42.8608 120.254 42.3018 121.086 cv
41.7298 121.918 40.9238 122.334 39.8708 122.334 cv
38.8048 122.334 37.9858 121.918 37.4268 121.086 cv
36.8678 120.254 36.5948 119.032 36.5948 117.433 cv
36.5948 115.847 36.8678 114.625 37.4268 113.78 cv
37.9858 112.948 38.8048 112.519 39.8708 112.519 cv
f
48.1388 113.533 mo
47.4758 113.533 46.9818 113.858 46.6438 114.508 cv
46.3058 115.158 46.1498 116.133 46.1498 117.433 cv
46.1498 118.733 46.3058 119.708 46.6438 120.358 cv
46.9818 121.008 47.4758 121.333 48.1388 121.333 cv
48.8018 121.333 49.2958 121.008 49.6338 120.358 cv
49.9588 119.708 50.1278 118.733 50.1278 117.433 cv
50.1278 116.133 49.9588 115.158 49.6338 114.508 cv
49.2958 113.858 48.8018 113.533 48.1388 113.533 cv
48.1388 112.519 mo
49.1918 112.519 49.9978 112.948 50.5698 113.78 cv
51.1288 114.625 51.4148 115.847 51.4148 117.433 cv
51.4148 119.032 51.1288 120.254 50.5698 121.086 cv
49.9978 121.918 49.1918 122.334 48.1388 122.334 cv
47.0728 122.334 46.2538 121.918 45.6948 121.086 cv
45.1358 120.254 44.8628 119.032 44.8628 117.433 cv
44.8628 115.847 45.1358 114.625 45.6948 113.78 cv
46.2538 112.948 47.0728 112.519 48.1388 112.519 cv
f
59.2656 54.803 mo
55.7656 54.803 li
f
59.2656 54.803 mo
55.7656 54.803 li
@
28.8727 50.2635 mo
33.9038 50.2635 li
33.9038 51.3425 li
30.0427 51.3425 li
30.0427 53.6695 li
30.2248 53.6045 30.4198 53.5525 30.6017 53.5265 cv
30.7838 53.5005 30.9788 53.4745 31.1607 53.4745 cv
32.2137 53.4745 33.0457 53.7735 33.6698 54.3455 cv
34.2938 54.9305 34.6058 55.7105 34.6058 56.6985 cv
34.6058 57.7255 34.2808 58.5185 33.6437 59.0775 cv
33.0068 59.6365 32.1097 59.9095 30.9657 59.9095 cv
30.5627 59.9095 30.1597 59.8705 29.7437 59.8185 cv
29.3277 59.7535 28.9118 59.6625 28.4697 59.5195 cv
28.4697 58.2325 li
28.8468 58.4405 29.2367 58.5965 29.6528 58.7005 cv
30.0557 58.8045 30.4848 58.8435 30.9398 58.8435 cv
31.6677 58.8435 32.2528 58.6615 32.6818 58.2715 cv
33.0978 57.8815 33.3187 57.3615 33.3187 56.6985 cv
33.3187 56.0485 33.0978 55.5285 32.6818 55.1385 cv
32.2528 54.7485 31.6677 54.5535 30.9398 54.5535 cv
30.6017 54.5535 30.2507 54.5925 29.9128 54.6705 cv
29.5747 54.7485 29.2237 54.8655 28.8727 55.0215 cv
28.8727 50.2635 li
f
39.8708 51.1085 mo
39.2078 51.1085 38.7138 51.4335 38.3758 52.0835 cv
38.0378 52.7335 37.8818 53.7085 37.8818 55.0085 cv
37.8818 56.3085 38.0378 57.2835 38.3758 57.9335 cv
38.7138 58.5835 39.2078 58.9085 39.8708 58.9085 cv
40.5338 58.9085 41.0278 58.5835 41.3658 57.9335 cv
41.6908 57.2835 41.8598 56.3085 41.8598 55.0085 cv
41.8598 53.7085 41.6908 52.7335 41.3658 52.0835 cv
41.0278 51.4335 40.5338 51.1085 39.8708 51.1085 cv
39.8708 50.0945 mo
40.9238 50.0945 41.7298 50.5235 42.3018 51.3555 cv
42.8608 52.2005 43.1468 53.4225 43.1468 55.0085 cv
43.1468 56.6075 42.8608 57.8295 42.3018 58.6615 cv
41.7298 59.4935 40.9238 59.9095 39.8708 59.9095 cv
38.8048 59.9095 37.9858 59.4935 37.4268 58.6615 cv
36.8678 57.8295 36.5948 56.6075 36.5948 55.0085 cv
36.5948 53.4225 36.8678 52.2005 37.4268 51.3555 cv
37.9858 50.5235 38.8048 50.0945 39.8708 50.0945 cv
f
48.1388 51.1085 mo
47.4758 51.1085 46.9818 51.4335 46.6438 52.0835 cv
46.3058 52.7335 46.1498 53.7085 46.1498 55.0085 cv
46.1498 56.3085 46.3058 57.2835 46.6438 57.9335 cv
46.9818 58.5835 47.4758 58.9085 48.1388 58.9085 cv
48.8018 58.9085 49.2958 58.5835 49.6338 57.9335 cv
49.9588 57.2835 50.1278 56.3085 50.1278 55.0085 cv
50.1278 53.7085 49.9588 52.7335 49.6338 52.0835 cv
49.2958 51.4335 48.8018 51.1085 48.1388 51.1085 cv
48.1388 50.0945 mo
49.1918 50.0945 49.9978 50.5235 50.5698 51.3555 cv
51.1288 52.2005 51.4148 53.4225 51.4148 55.0085 cv
51.4148 56.6075 51.1288 57.8295 50.5698 58.6615 cv
49.9978 59.4935 49.1918 59.9095 48.1388 59.9095 cv
47.0728 59.9095 46.2538 59.4935 45.6948 58.6615 cv
45.1358 57.8295 44.8628 56.6075 44.8628 55.0085 cv
44.8628 53.4225 45.1358 52.2005 45.6948 51.3555 cv
46.2538 50.5235 47.0728 50.0945 48.1388 50.0945 cv
f
2.764 296.883 mo
2.764 291.332 li
3.83 291.332 li
8.939 295.726 li
8.939 291.332 li
9.875 291.332 li
9.875 297.039 li
8.809 297.039 li
3.7 292.645 li
3.7 296.883 li
2.764 296.883 li
f
.00799942 282.61 mo
.996 283.182 1.958 283.598 2.907 283.871 cv
3.856 284.157 4.818 284.287 5.793 284.287 cv
6.781 284.287 7.743 284.157 8.692 283.871 cv
9.654 283.598 10.603 283.182 11.578 282.61 cv
11.578 283.624 li
10.577 284.261 9.615 284.742 8.653 285.054 cv
7.691 285.366 6.742 285.522 5.793 285.522 cv
4.857 285.522 3.908 285.366 2.946 285.054 cv
1.984 284.742 1.009 284.274 .00799942 283.624 cv
.00799942 282.61 li
f
4.129 274.81 mo
3.609 274.524 3.232 274.173 2.972 273.77 cv
2.725 273.367 2.595 272.886 2.595 272.327 cv
2.595 271.599 2.855 271.027 3.375 270.624 cv
3.895 270.221 4.636 270.013 5.585 270.013 cv
9.875 270.013 li
9.875 271.183 li
5.624 271.183 li
4.948 271.183 4.441 271.313 4.103 271.547 cv
3.778 271.794 3.609 272.158 3.609 272.652 cv
3.609 273.263 3.817 273.744 4.22 274.095 cv
4.623 274.446 5.169 274.615 5.858 274.615 cv
9.875 274.615 li
9.875 275.785 li
5.624 275.785 li
4.948 275.785 4.441 275.915 4.103 276.149 cv
3.778 276.396 3.609 276.773 3.609 277.267 cv
3.609 277.865 3.817 278.346 4.22 278.697 cv
4.623 279.048 5.169 279.217 5.858 279.217 cv
9.875 279.217 li
9.875 280.387 li
2.764 280.387 li
2.764 279.217 li
3.869 279.217 li
3.44 278.957 3.115 278.632 2.907 278.255 cv
2.699 277.891 2.595 277.449 2.595 276.929 cv
2.595 276.409 2.725 275.98 2.985 275.616 cv
3.245 275.252 3.635 274.992 4.129 274.81 cv
f
.00799942 267.868 mo
.00799942 266.854 li
1.009 266.23 1.984 265.749 2.946 265.437 cv
3.908 265.125 4.857 264.956 5.793 264.956 cv
6.742 264.956 7.691 265.125 8.653 265.437 cv
9.615 265.749 10.577 266.23 11.578 266.854 cv
11.578 267.868 li
10.603 267.309 9.654 266.893 8.692 266.607 cv
7.743 266.334 6.781 266.191 5.793 266.191 cv
4.818 266.191 3.856 266.334 2.907 266.607 cv
1.958 266.893 .996 267.309 .00799942 267.868 cv
f
1.5 lw
2 lc
160.891 366.928 mo
160.912 365.357 li
160.669 363.651 li
159.891 360.249 li
159.131 357.663 li
157.937 354.313 li
156.8 351.553 li
155.17 348.163 li
152.905 344.004 li
149.625 338.302 li
148.135 336.069 li
144.155 330.712 li
141.565 327.589 li
138.759 324.547 li
134.643 320.618 li
129.631 316.283 li
126.651 313.953 li
123.488 311.77 li
120.147 309.756 li
115.95 307.526 li
110.287 304.795 li
104.87 302.363 li
101.034 300.622 li
97.9944 299.023 li
95.108 297.225 li
92.4474 295.32 li
89.5479 292.958 li
86.9508 290.567 li
85.0611 288.581 li
83.4116 286.534 li
81.9506 284.365 li
80.375 281.612 li
78.331 277.555 li
76.8731 274.148 li
76.0477 271.66 li
75.4292 268.992 li
75.0337 266.159 li
74.8679 263.16 li
74.9356 260.062 li
75.2584 256.868 li
75.8319 253.598 li
76.6661 250.263 li
77.7376 246.902 li
79.0922 243.547 li
80.3243 241.069 li
81.7784 238.678 li
83.4405 236.403 li
85.2865 234.241 li
87.2843 232.202 li
89.4136 230.28 li
91.6323 228.503 li
93.9041 226.92 li
96.2288 225.534 li
98.5813 224.36 li
101.733 223.105 li
104.828 222.156 li
107.877 221.482 li
110.868 221.062 li
113.779 220.867 li
118.56 220.793 li
126.174 220.739 li
130.433 220.479 li
134.604 220.012 li
138.67 219.342 li
146.353 217.723 li
149.913 216.76 li
153.382 215.549 li
156.761 214.148 li
159.988 212.599 li
163.058 210.896 li
166.031 209.025 li
171.972 204.997 li
181.045 198.779 li
183.916 196.491 li
186.212 194.395 li
188.444 192.103 li
190.551 189.597 li
192.526 186.905 li
194.778 183.477 li
200.344 174.473 li
201.997 171.333 li
203.412 168.13 li
205.328 162.933 li
206.796 158.36 li
208.921 151.549 li
210.414 147.081 li
210.922 144.83 li
211.135 143.126 li
211.176 140.836 li
210.961 138.524 li
210.038 131.173 li
208.94 122.289 li
208.145 118.173 li
206.832 112.846 li
204.513 104.865 li
200.261 90.3882 li
196.844 78.3875 li
192.985 65.0568 li
192.68 63.1143 li
192.592 61.1611 li
192.714 59.1824 li
193.044 57.2039 li
193.712 54.7216 li
194.63 52.2463 li
195.799 49.8162 li
196.908 47.9385 li
198.214 46.1733 li
199.686 44.5972 li
201.715 42.8066 li
203.481 41.4857 li
205.381 40.3145 li
207.428 39.3159 li
209.613 38.5105 li
211.929 37.9158 li
214.352 37.5823 li
216.864 37.4742 li
219.428 37.6178 li
222.027 38.019 li
224.634 38.6587 li
227.23 39.5203 li
229.799 40.6053 li
236.295 43.7414 li
248.758 49.9775 li
290.144 70.869 li
299.641 75.9289 li
302.59 77.0786 li
305.006 77.7921 li
307.459 78.2768 li
309.95 78.5583 li
312.513 78.5502 li
314.465 78.3364 li
316.401 77.9597 li
318.983 77.1613 li
321.503 76.0804 li
323.953 74.7072 li
326.286 73.1045 li
329.092 70.8448 li
332.892 67.4166 li
340.974 59.9846 li
343.316 58.2701 li
345.516 56.9215 li
347.264 56.1513 li
348.604 55.7792 li
350.437 55.5482 li
351.802 55.5797 li
353.141 55.7934 li
355.762 56.5699 li
357.915 57.46 li
359.553 58.365 li
360.693 59.1981 li
362.287 60.8667 li
363.436 62.7245 li
364.174 64.2913 li
364.734 65.9388 li
365.005 67.2189 li
365.162 69.4488 li
365.012 71.2988 li
364.681 73.1901 li
363.93 76.1705 li
360.528 87.4454 li
357.752 96.5623 li
356.92 100.264 li
356.464 103.373 li
356.23 106.5 li
356.201 109.64 li
356.408 113.383 li
356.857 117.11 li
357.503 120.755 li
358.7 125.986 li
359.715 129.493 li
360.683 132.849 li
361.046 134.871 li
361.05 136.468 li
360.88 137.636 li
360.373 139.19 li
359.811 140.301 li
358.838 141.702 li
357.317 143.38 li
355.146 145.472 li
351.425 149.041 li
346.487 154.019 li
343.363 157.443 li
341.689 159.511 li
339.796 162.261 li
338.072 165.141 li
336.152 168.796 li
326.147 188.934 li
323.2 193.774 li
313.643 208.587 li
305.807 220.434 li
300.609 228.011 li
292.805 239.362 li
288.348 246.266 li
285.578 250.968 li
282.136 257.33 li
278.923 263.784 li
275.038 271.973 li
266.945 289.107 li
265.177 292.206 li
262.758 295.952 li
260.137 299.549 li
256.26 304.396 li
252.163 309.129 li
247.857 313.695 li
230.014 332.155 li
209.577 352.596 li
185.835 377.108 li
182.461 380.818 li
178.99 384.849 li
175.378 389.006 li
173.927 390.285 li
172.517 391.15 li
171.126 391.647 li
170.088 391.793 li
168.777 391.693 li
167.865 391.436 li
166.725 390.872 li
165.694 390.034 li
164.796 388.953 li
164.088 387.635 li
163.566 386.116 li
163.107 384.004 li
162.14 377.717 li
160.654 367.825 li
160.076 365.235 li
159.158 362.228 li
159.014 361.795 li
/1 
[/DeviceCMYK] /CSA add_res
.906126 .514977 .0511788 .00137331 cmyk
@
160.853 366.526 mo
160.566 364.66 li
159.958 361.991 li
159.359 359.938 li
158.297 356.808 li
157.157 353.894 li
155.496 350.325 li
153.98 347.45 li
149.736 340.132 li
147.297 336.575 li
144.294 332.587 li
141.851 329.663 li
138.697 326.36 li
135.285 323.134 li
132.296 320.486 li
129.036 317.952 li
126.163 315.985 li
122.542 313.842 li
118.145 311.506 li
106.051 305.539 li
103.044 303.682 li
100.315 301.668 li
97.8985 299.577 li
95.7477 297.439 li
93.8718 295.3 li
92.2665 293.078 li
90.6443 290.311 li
88.5414 285.9 li
87.5422 283.415 li
86.6659 280.719 li
86.057 277.791 li
85.7545 275.231 li
85.6965 272.614 li
85.7656 270.46 li
86.359 266.173 li
87.4677 261.637 li
88.7949 257.814 li
89.7994 255.525 li
90.5159 254.04 li
92.3323 251.108 li
93.9128 248.998 li
95.6496 247.031 li
98.176 244.596 li
100.208 242.896 li
103.027 240.873 li
105.914 239.186 li
108.163 238.122 li
110.423 237.24 li
113.409 236.326 li
116.33 235.673 li
119.179 235.271 li
121.98 235.087 li
127.853 235.103 li
136.264 235.123 li
140.85 234.808 li
145.333 234.254 li
153.296 232.78 li
158.402 231.431 li
163.322 229.64 li
167.483 227.765 li
171.9 225.327 li
183.689 217.975 li
187.996 215.027 li
190.757 212.851 li
192.995 210.834 li
194.737 209.109 li
196.812 206.757 li
199.148 203.697 li
201.765 199.847 li
207.335 191.168 li
208.919 188.121 li
210.043 185.613 li
212.515 179.191 li
216.32 168.259 li
217.461 164.994 li
217.974 162.782 li
218.205 161.06 li
218.25 158.799 li
217.998 155.907 li
216.966 144.29 li
216.603 140.806 li
216.065 137.354 li
215.087 132.621 li
213.58 126.58 li
202.344 82.9086 li
202.069 80.4406 li
202.091 78.4758 li
202.324 76.4773 li
202.913 73.9872 li
203.756 71.4763 li
204.87 69.0132 li
206.233 66.5827 li
207.892 64.2786 li
209.418 62.6518 li
211.086 61.1853 li
213.371 59.4862 li
215.378 58.2641 li
217.518 57.2408 li
219.828 56.4082 li
222.294 55.7925 li
224.236 55.4858 li
226.892 55.317 li
229.64 55.4249 li
231.721 55.6869 li
234.5 56.2814 li
237.295 57.1169 li
239.371 57.9048 li
242.121 59.1525 li
251.081 63.8454 li
264.753 71.246 li
301.103 91.0006 li
315.002 98.8641 li
318.075 100.043 li
320.606 100.745 li
323.185 101.239 li
325.822 101.495 li
327.838 101.474 li
329.883 101.268 li
332.614 100.698 li
334.686 100.072 li
337.405 98.9267 li
340.078 97.4741 li
343.331 95.2664 li
346.52 92.7756 li
350.812 89.0916 li
357.29 83.5144 li
360.064 81.4219 li
362.686 79.7491 li
364.19 78.9332 li
366.207 78.1203 li
367.722 77.7483 li
369.286 77.5569 li
370.873 77.5699 li
372.44 77.7803 li
373.985 78.1605 li
375.993 78.851 li
378.008 79.7139 li
379.493 80.4645 li
380.856 81.3607 li
382.119 82.4032 li
383.237 83.6071 li
384.168 84.9026 li
384.933 86.2801 li
385.796 88.2462 li
386.488 90.823 li
386.748 92.9759 li
386.76 94.6261 li
386.599 96.3493 li
386.153 98.7063 li
385.131 102.426 li
382.447 110.605 li
378.73 121.22 li
376.826 126.685 li
375.849 129.865 li
374.82 133.867 li
374.205 137.09 li
373.78 140.292 li
373.477 144.366 li
373.47 148.411 li
373.601 151.601 li
373.964 155.648 li
374.635 160.423 li
375.493 165.088 li
376.982 171.311 li
378.335 176.324 li
378.719 178.478 li
378.811 180.06 li
378.693 181.611 li
378.374 183.15 li
377.846 184.677 li
377.093 186.125 li
376.11 187.521 li
374.959 188.868 li
372.688 191.093 li
358.078 204.549 li
354.119 208.514 li
350.954 212.058 li
348.646 215.08 li
346.481 218.244 li
344.448 221.538 li
340.576 228.476 li
335.729 237.613 li
329.623 249.154 li
325.393 255.921 li
315.43 270.429 li
298.194 294.89 li
285.218 312.632 li
279.868 319.905 li
271.793 331.456 li
267.639 337.936 li
264.43 343.375 li
258.245 354.464 li
254.665 361.235 li
240.594 388.374 li
238.702 391.668 li
236.002 395.971 li
233.863 399.084 li
230.816 403.119 li
226.783 407.968 li
221.75 413.659 li
216.476 419.26 li
212.776 422.925 li
198.009 437.209 li
189.513 445.379 li
181.77 452.552 li
162.128 470.59 li
148.68 483.239 li
137.136 494.204 li
124.836 506.117 li
117.583 513.129 li
110.919 519.965 li
102.434 528.889 li
100.289 530.641 li
98.7271 531.597 li
96.7608 532.423 li
93.662 532.654 li
92.2266 532.411 li
90.443 531.701 li
89.2049 530.875 li
88.0585 529.82 li
87.0402 528.528 li
86.4526 527.535 li
85.7174 525.88 li
85.1564 524.066 li
84.617 521.403 li
84.1407 517.76 li
81.4607 492.567 li
80.896 488.999 li
80.1247 485.423 li
79.5556 483.296 li
0 .642573 1 0 cmyk
@
160.891 366.928 mo
160.912 365.141 li
160.649 362.735 li
160.03 359.791 li
159.193 356.78 li
157.642 352.259 li
155.993 348.117 li
154.321 344.604 li
152.375 341.043 li
148.854 334.994 li
146.684 331.768 li
143.791 327.855 li
141.197 324.671 li
138.368 321.547 li
134.545 317.736 li
130.513 314.077 li
127.836 311.886 li
124.168 309.239 li
120.854 307.145 li
115.215 303.917 li
103.753 297.41 li
101.153 295.651 li
98.7635 293.743 li
96.542 291.718 li
94.539 289.628 li
92.4876 287.233 li
90.6167 284.782 li
89.0859 282.395 li
87.6871 279.709 li
86.4057 276.772 li
84.8972 272.761 li
83.9287 269.518 li
83.4843 267.358 li
83.1169 264.366 li
83.0248 261.804 li
83.135 259.153 li
83.5626 255.382 li
84.2097 251.904 li
85.0847 248.607 li
86.0194 245.822 li
87.3147 242.711 li
88.571 240.288 li
89.9072 238.125 li
91.8644 235.518 li
93.865 233.251 li
96.375 230.816 li
98.8321 228.766 li
100.703 227.426 li
103.564 225.692 li
106.536 224.237 li
109.335 223.103 li
111.885 222.27 li
114.869 221.568 li
118.609 220.953 li
129.875 219.251 li
134.268 218.221 li
138.576 216.989 li
142.583 215.584 li
148.471 213.302 li
151.387 211.961 li
154.027 210.519 li
157.851 208.19 li
160.396 206.419 li
163.508 203.955 li
171.609 197.157 li
177.606 191.964 li
180.398 189.286 li
182.533 186.93 li
184.477 184.483 li
186.099 182.163 li
188.343 178.479 li
190.599 174.355 li
194.902 166.078 li
196.233 162.968 li
197.479 159.469 li
198.756 155.129 li
200.188 149.517 li
201.706 143.566 li
202.991 138.734 li
203.394 136.445 li
203.558 134.12 li
203.496 131.729 li
203.159 129.354 li
201.382 121.216 li
199.241 111.565 li
198.077 107.544 li
196.413 102.665 li
192.564 92.2636 li
188.795 82.12 li
184.092 69.6815 li
178.522 55.1633 li
178.182 53.3887 li
178.027 51.4289 li
178.096 49.5258 li
178.447 47.1747 li
178.958 45.0676 li
179.625 43.0718 li
180.633 40.7438 li
181.589 39.0582 li
182.75 37.4133 li
184.33 35.6577 li
186.251 33.8981 li
188.053 32.533 li
190.022 31.333 li
191.936 30.4214 li
194.233 29.627 li
196.656 29.0831 li
199.207 28.7803 li
201.923 28.7053 li
204.443 28.8636 li
206.913 29.2338 li
209.476 29.8641 li
212.253 30.8506 li
230.096 37.8151 li
245.22 43.8718 li
259.314 49.4476 li
269.17 53.3967 li
278.719 57.21 li
281.606 58.0606 li
284.223 58.5813 li
287.257 58.8904 li
289.595 58.9197 li
291.805 58.6893 li
293.746 58.2235 li
296.22 57.3532 li
298.518 56.2528 li
300.728 54.8528 li
302.553 53.4141 li
304.561 51.5262 li
307.139 48.7916 li
311.575 43.6593 li
314.693 40.0914 li
316.993 37.7933 li
319.064 36.0148 li
320.481 35.0258 li
322.506 33.9889 li
323.533 33.6429 li
325.194 33.3594 li
326.899 33.3203 li
329.141 33.5004 li
331.586 33.9819 li
333.364 34.5665 li
334.903 35.3351 li
336.435 36.3771 li
337.64 37.4798 li
338.867 38.8708 li
339.913 40.3723 li
340.739 41.918 li
341.32 43.5091 li
341.687 45.1521 li
341.958 47.3337 li
342.126 51.0601 li
342.289 59.802 li
342.499 70.5544 li
342.775 73.9813 li
343.3 77.7299 li
344.06 81.2947 li
345.041 84.8948 li
346.245 88.4169 li
347.937 92.5457 li
349.697 96.2207 li
351.996 100.466 li
355.48 106.571 li
356 107.994 li
356.338 109.618 li
356.397 111.005 li
356.217 112.422 li
355.808 113.747 li
354.985 115.514 li
353.372 118.399 li
350.435 123.715 li
347.785 128.907 li
346.601 131.804 li
345.721 134.552 li
344.933 137.761 li
344.302 141.353 li
342.622 153.532 li
341.432 161.294 li
340.395 166.282 li
334.107 193.358 li
328.383 218.229 li
327.431 223.578 li
326.747 228.52 li
325.479 239.563 li
324.445 250.969 li
323.442 261.956 li
322.756 266.918 li
321.766 271.872 li
320.627 276.401 li
318.025 285.506 li
300.576 339.759 li
293.578 363.038 li
291.386 371.03 li
287.607 385.054 li
286.898 386.634 li
286.028 387.957 li
285.043 388.943 li
284.049 389.619 li
282.843 390.084 li
281.584 390.31 li
280.296 390.267 li
278.965 389.965 li
277.825 389.526 li
276.43 388.707 li
274.88 387.439 li
272.338 384.945 li
268.687 381.159 li
260.764 372.762 li
258.193 370.62 li
.831846 .112703 1 .0183108 cmyk
@
160.891 366.928 mo
160.906 365.068 li
160.643 362.947 li
160.049 360.097 li
159.134 356.757 li
157.886 353.073 li
156.263 348.946 li
154.903 345.979 li
152.873 342.083 li
149.901 336.969 li
147.217 332.691 li
144.379 328.773 li
141.581 325.241 li
138.625 321.906 li
135.385 318.65 li
131.635 315.204 li
127.545 311.755 li
124.63 309.671 li
121.307 307.587 li
116.341 304.797 li
104.084 297.944 li
101.152 296.015 li
98.3973 293.917 li
95.9229 291.764 li
93.7682 289.63 li
91.984 287.621 li
90.3099 285.436 li
88.5691 282.728 li
87.3383 280.405 li
85.9392 277.347 li
84.5263 273.582 li
83.4776 270.383 li
82.7612 267.483 li
82.3727 264.752 li
82.2166 261.899 li
82.2846 259.099 li
82.5349 256.43 li
82.999 253.693 li
83.6591 250.97 li
84.5446 248.23 li
85.6138 245.589 li
86.6768 243.41 li
87.8853 241.352 li
89.3485 239.267 li
91.1293 237.157 li
93.1987 235.07 li
95.3411 233.197 li
98.0422 231.183 li
100.384 229.73 li
102.704 228.57 li
104.822 227.747 li
107.383 226.982 li
110.267 226.333 li
113.145 225.937 li
116.103 225.774 li
120.024 225.82 li
131.995 226.197 li
136.009 226.025 li
140.954 225.586 li
144.711 225.052 li
151.911 223.764 li
155.922 222.816 li
159.075 221.803 li
163.096 220.234 li
166.567 218.636 li
170.017 216.772 li
177.081 212.582 li
185.05 207.642 li
188.004 205.589 li
190.372 203.666 li
192.525 201.643 li
194.434 199.626 li
197.149 196.385 li
199.778 192.885 li
204.551 186.196 li
206.201 183.607 li
207.718 180.797 li
209.306 177.353 li
211.123 172.935 li
216.273 159.245 li
216.759 157.087 li
217.04 154.706 li
217.028 153.039 li
215.776 135.575 li
215.189 131.18 li
214.216 125.798 li
212.28 116.893 li
206.411 90.8147 li
203.274 78.1016 li
203.076 76.3685 li
203.086 74.5864 li
203.332 72.752 li
203.767 71.0084 li
204.55 68.8083 li
205.517 66.7606 li
206.866 64.497 li
208.105 62.8241 li
209.683 61.0565 li
210.995 59.8749 li
212.957 58.4749 li
215.321 57.0875 li
217.332 56.168 li
219.468 55.4811 li
221.303 55.1255 li
223.725 54.9447 li
225.955 55.0594 li
228.042 55.3714 li
230.031 55.8945 li
232.37 56.7177 li
234.777 57.7724 li
237.209 59.1296 li
240.807 61.5658 li
259.994 75.0398 li
297.107 101.603 li
299.628 102.953 li
302.497 104.146 li
304.654 104.805 li
307.435 105.35 li
309.312 105.474 li
311.73 105.372 li
314.125 105.012 li
315.927 104.52 li
318.006 103.751 li
320.26 102.694 li
323.444 100.935 li
335.309 94.0714 li
337.993 92.8951 li
340.217 92.1344 li
342.236 91.6271 li
344.12 91.4367 li
345.815 91.5364 li
347.555 91.8959 li
349.304 92.5648 li
351.217 93.5516 li
352.961 94.7016 li
354.258 95.8225 li
355.154 96.8995 li
355.968 98.3109 li
356.686 100.082 li
357.221 102.153 li
357.437 104.043 li
357.379 105.855 li
357.082 107.541 li
356.539 109.204 li
355.659 111.193 li
353.946 114.427 li
349.837 121.839 li
343.417 133.324 li
341.918 136.601 li
340.26 140.79 li
339.104 144.255 li
338.113 147.919 li
337.415 151.335 li
336.761 155.796 li
336.395 159.793 li
336.216 164.082 li
336.036 169.68 li
335.755 170.852 li
335.204 172.155 li
334.626 173.129 li
333.704 174.233 li
332.496 175.29 li
330.921 176.288 li
327.952 177.843 li
321.83 181.089 li
315.859 184.449 li
313.938 185.776 li
311.96 187.452 li
309.807 189.618 li
295.302 204.775 li
292.286 207.431 li
283.294 214.968 li
257.592 236.159 li
251.856 240.954 li
247.164 245.096 li
242.279 249.804 li
235.966 256.095 li
223.547 268.59 li
220.147 271.654 li
217.056 274.143 li
213.356 276.79 li
208.012 280.319 li
203.203 283.302 li
172.881 301.161 li
163.312 307.012 li
150.342 315.05 li
139.352 322.108 li
131.626 327.341 li
124.233 332.499 li
122.584 333.341 li
121.167 333.817 li
120.248 333.906 li
119.062 333.77 li
117.973 333.418 li
117.126 332.97 li
116.499 332.427 li
115.669 331.537 li
114.793 330.315 li
113.901 328.586 li
113.217 326.652 li
112.001 322.266 li
108.438 309.514 li
107.435 307.253 li
106.551 305.546 li
.0993362 1 1 .024445 cmyk
@
.8 lw
0 lj
59.2656 557.9 mo
59.2656 3.5 li
1 /0 /CSD get_res sepcs
1 sep
@
402.375 557.9 mo
402.375 3.5 li
@
59.2656 557.9 mo
402.375 557.9 li
@
59.2656 3.5 mo
402.375 3.5 li
@
393.275 550.9 mo
238.487 550.9 li
237.697 550.898 237.2 550.706 236.891 550.396 cv
236.581 550.087 236.389 549.59 236.387 548.8 cv
236.387 473.787 li
236.389 472.998 236.581 472.5 236.891 472.191 cv
237.2 471.882 237.697 471.689 238.487 471.687 cv
393.275 471.687 li
394.065 471.689 394.562 471.882 394.871 472.191 cv
395.181 472.5 395.373 472.998 395.375 473.787 cv
395.375 548.8 li
395.373 549.59 395.181 550.087 394.871 550.396 cv
394.562 550.706 394.065 550.898 393.275 550.9 cv
0 0 0 0 cmyk
f
393.286 551.9 mo
393.282 551.9 393.279 551.9 393.275 551.9 cv
238.487 551.9 li
238.484 551.9 238.48 551.9 238.476 551.9 cv
237.537 551.9 236.739 551.659 236.184 551.104 cv
235.627 550.546 235.386 549.743 235.387 548.8 cv
235.387 473.787 li
235.386 472.844 235.627 472.042 236.184 471.484 cv
236.739 470.929 237.538 470.688 238.477 470.688 cv
238.48 470.688 238.484 470.688 238.487 470.688 cv
393.275 470.688 li
393.278 470.688 393.282 470.688 393.285 470.688 cv
394.224 470.688 395.023 470.929 395.578 471.484 cv
396.136 472.042 396.377 472.844 396.375 473.787 cv
396.375 548.8 li
396.377 549.743 396.136 550.546 395.578 551.104 cv
395.023 551.658 394.225 551.9 393.286 551.9 cv
238.487 550.9 mo
393.275 550.9 li
394.065 550.898 394.562 550.706 394.871 550.396 cv
395.181 550.087 395.373 549.59 395.375 548.8 cv
395.375 473.787 li
395.373 472.998 395.181 472.5 394.871 472.191 cv
394.562 471.882 394.065 471.689 393.275 471.687 cv
238.487 471.687 li
237.697 471.689 237.2 471.882 236.891 472.191 cv
236.581 472.5 236.389 472.998 236.387 473.787 cv
236.387 548.8 li
236.389 549.59 236.581 550.087 236.891 550.396 cv
237.2 550.706 237.697 550.898 238.487 550.9 cv
238.487 550.9 li
.159121 .120455 .125338 0 cmyk
f
1.5 lw
1 lj
241.087 481.713 mo
267.087 481.713 li
.906126 .514977 .0511788 .00137331 cmyk
@
285.222 484.911 mo
285.222 482.363 li
283.129 482.363 li
283.129 481.31 li
286.496 481.31 li
286.496 485.379 li
286.002 485.743 285.456 486.003 284.858 486.172 cv
284.26 486.341 283.623 486.432 282.947 486.432 cv
281.465 486.432 280.295 486.003 279.463 485.145 cv
278.631 484.286 278.215 483.078 278.215 481.531 cv
278.215 479.997 278.631 478.788 279.463 477.917 cv
280.295 477.059 281.465 476.617 282.947 476.617 cv
283.558 476.617 284.143 476.695 284.702 476.851 cv
285.261 477.007 285.781 477.228 286.249 477.514 cv
286.249 478.879 li
285.768 478.489 285.261 478.19 284.728 477.982 cv
284.195 477.773 283.636 477.67 283.051 477.67 cv
281.881 477.67 281.01 477.995 280.438 478.645 cv
279.853 479.295 279.567 480.257 279.567 481.531 cv
279.567 482.818 279.853 483.78 280.438 484.43 cv
281.01 485.079 281.881 485.392 283.051 485.392 cv
283.493 485.392 283.896 485.353 284.26 485.275 cv
284.624 485.197 284.936 485.079 285.222 484.911 cv
1 /0 /CSD get_res sepcs
1 sep
f
292.905 480.243 mo
292.775 480.166 292.632 480.114 292.476 480.075 cv
292.32 480.049 292.151 480.023 291.969 480.023 cv
291.306 480.023 290.799 480.243 290.448 480.673 cv
290.084 481.102 289.915 481.713 289.915 482.519 cv
289.915 486.263 li
288.745 486.263 li
288.745 479.152 li
289.915 479.152 li
289.915 480.257 li
290.149 479.828 290.474 479.503 290.864 479.295 cv
291.254 479.087 291.735 478.983 292.307 478.983 cv
292.385 478.983 292.476 478.996 292.58 478.996 cv
292.671 479.009 292.775 479.022 292.905 479.048 cv
292.905 480.243 li
f
296.883 479.971 mo
296.259 479.971 295.765 480.217 295.401 480.712 cv
295.037 481.206 294.855 481.868 294.855 482.714 cv
294.855 483.572 295.024 484.234 295.388 484.729 cv
295.752 485.223 296.246 485.457 296.883 485.457 cv
297.507 485.457 298.001 485.223 298.365 484.729 cv
298.729 484.234 298.911 483.572 298.911 482.714 cv
298.911 481.882 298.729 481.206 298.365 480.712 cv
298.001 480.217 297.507 479.971 296.883 479.971 cv
296.883 478.983 mo
297.897 478.983 298.69 479.321 299.275 479.971 cv
299.847 480.634 300.146 481.544 300.146 482.714 cv
300.146 483.884 299.847 484.794 299.275 485.444 cv
298.69 486.107 297.897 486.432 296.883 486.432 cv
295.856 486.432 295.05 486.107 294.478 485.444 cv
293.906 484.794 293.62 483.884 293.62 482.714 cv
293.62 481.544 293.906 480.634 294.478 479.971 cv
295.05 479.321 295.856 478.983 296.883 478.983 cv
f
301.966 483.454 mo
301.966 479.152 li
303.136 479.152 li
303.136 483.416 li
303.136 484.092 303.266 484.586 303.526 484.924 cv
303.786 485.262 304.176 485.431 304.709 485.431 cv
305.333 485.431 305.84 485.236 306.204 484.833 cv
306.568 484.43 306.75 483.884 306.75 483.182 cv
306.75 479.152 li
307.92 479.152 li
307.92 486.263 li
306.75 486.263 li
306.75 485.171 li
306.464 485.613 306.126 485.924 305.762 486.133 cv
305.385 486.328 304.956 486.432 304.462 486.432 cv
303.643 486.432 303.019 486.185 302.603 485.678 cv
302.174 485.184 301.966 484.443 301.966 483.454 cv
304.904 478.983 mo
304.904 478.983 li
f
316.24 481.973 mo
316.24 486.263 li
315.07 486.263 li
315.07 482.012 li
315.07 481.336 314.927 480.842 314.667 480.504 cv
314.407 480.166 314.017 479.997 313.497 479.997 cv
312.86 479.997 312.366 480.204 312.002 480.608 cv
311.638 481.01 311.456 481.557 311.456 482.246 cv
311.456 486.263 li
310.286 486.263 li
310.286 479.152 li
311.456 479.152 li
311.456 480.257 li
311.729 479.841 312.054 479.516 312.444 479.308 cv
312.821 479.1 313.263 478.983 313.757 478.983 cv
314.563 478.983 315.187 479.243 315.603 479.75 cv
316.019 480.257 316.24 480.997 316.24 481.973 cv
f
323.247 480.23 mo
323.247 476.383 li
324.417 476.383 li
324.417 486.263 li
323.247 486.263 li
323.247 485.197 li
323 485.626 322.688 485.938 322.311 486.133 cv
321.934 486.328 321.492 486.432 320.972 486.432 cv
320.114 486.432 319.412 486.094 318.866 485.418 cv
318.32 484.742 318.06 483.832 318.06 482.714 cv
318.06 481.596 318.32 480.699 318.866 480.01 cv
319.412 479.334 320.114 478.983 320.972 478.983 cv
321.492 478.983 321.934 479.087 322.311 479.295 cv
322.688 479.503 323 479.815 323.247 480.23 cv
319.269 482.714 mo
319.269 483.572 319.438 484.247 319.789 484.742 cv
320.14 485.236 320.634 485.47 321.258 485.47 cv
321.869 485.47 322.35 485.236 322.714 484.742 cv
323.065 484.247 323.247 483.572 323.247 482.714 cv
323.247 481.855 323.065 481.193 322.714 480.699 cv
322.35 480.204 321.869 479.958 321.258 479.958 cv
320.634 479.958 320.14 480.204 319.789 480.699 cv
319.438 481.193 319.269 481.855 319.269 482.714 cv
f
329.708 476.786 mo
337.716 476.786 li
337.716 477.865 li
334.349 477.865 li
334.349 486.263 li
333.062 486.263 li
333.062 477.865 li
329.708 477.865 li
329.708 476.786 li
f
343.02 480.243 mo
342.89 480.166 342.747 480.114 342.591 480.075 cv
342.435 480.049 342.266 480.023 342.084 480.023 cv
341.421 480.023 340.914 480.243 340.563 480.673 cv
340.199 481.102 340.03 481.713 340.03 482.519 cv
340.03 486.263 li
338.86 486.263 li
338.86 479.152 li
340.03 479.152 li
340.03 480.257 li
340.264 479.828 340.589 479.503 340.979 479.295 cv
341.369 479.087 341.85 478.983 342.422 478.983 cv
342.5 478.983 342.591 478.996 342.695 478.996 cv
342.786 479.009 342.89 479.022 343.02 479.048 cv
343.02 480.243 li
f
344.125 483.454 mo
344.125 479.152 li
345.295 479.152 li
345.295 483.416 li
345.295 484.092 345.425 484.586 345.685 484.924 cv
345.945 485.262 346.335 485.431 346.868 485.431 cv
347.492 485.431 347.999 485.236 348.363 484.833 cv
348.727 484.43 348.909 483.884 348.909 483.182 cv
348.909 479.152 li
350.079 479.152 li
350.079 486.263 li
348.909 486.263 li
348.909 485.171 li
348.623 485.613 348.285 485.924 347.921 486.133 cv
347.544 486.328 347.115 486.432 346.621 486.432 cv
345.802 486.432 345.178 486.185 344.762 485.678 cv
344.333 485.184 344.125 484.443 344.125 483.454 cv
347.063 478.983 mo
347.063 478.983 li
f
353.641 477.137 mo
353.641 479.152 li
356.046 479.152 li
356.046 480.062 li
353.641 480.062 li
353.641 483.923 li
353.641 484.508 353.719 484.885 353.875 485.041 cv
354.031 485.21 354.356 485.288 354.85 485.288 cv
356.046 485.288 li
356.046 486.263 li
354.85 486.263 li
353.94 486.263 353.316 486.094 352.978 485.756 cv
352.64 485.418 352.471 484.807 352.471 483.923 cv
352.471 480.062 li
351.613 480.062 li
351.613 479.152 li
352.471 479.152 li
352.471 477.137 li
353.641 477.137 li
f
363.495 481.973 mo
363.495 486.263 li
362.325 486.263 li
362.325 482.012 li
362.325 481.336 362.182 480.842 361.922 480.504 cv
361.662 480.166 361.272 479.997 360.752 479.997 cv
360.115 479.997 359.621 480.204 359.257 480.608 cv
358.893 481.01 358.711 481.557 358.711 482.246 cv
358.711 486.263 li
357.541 486.263 li
357.541 476.383 li
358.711 476.383 li
358.711 480.257 li
358.984 479.841 359.309 479.516 359.699 479.308 cv
360.076 479.1 360.518 478.983 361.012 478.983 cv
361.818 478.983 362.442 479.243 362.858 479.75 cv
363.274 480.257 363.495 480.997 363.495 481.973 cv
f
241.087 500.791 mo
267.087 500.791 li
0 .642573 1 0 cmyk
@
282.609 496.735 mo
281.673 496.735 280.932 497.086 280.386 497.775 cv
279.84 498.477 279.567 499.413 279.567 500.609 cv
279.567 501.805 279.84 502.754 280.386 503.443 cv
280.932 504.145 281.673 504.483 282.609 504.483 cv
283.532 504.483 284.273 504.145 284.819 503.443 cv
285.365 502.754 285.638 501.805 285.638 500.609 cv
285.638 499.413 285.365 498.477 284.819 497.775 cv
284.273 497.086 283.532 496.735 282.609 496.735 cv
282.609 495.695 mo
283.935 495.695 284.988 496.15 285.794 497.034 cv
286.587 497.918 286.99 499.114 286.99 500.609 cv
286.99 502.117 286.587 503.3 285.794 504.184 cv
284.988 505.068 283.935 505.51 282.609 505.51 cv
281.27 505.51 280.204 505.068 279.411 504.184 cv
278.605 503.3 278.215 502.117 278.215 500.609 cv
278.215 499.114 278.605 497.918 279.411 497.034 cv
280.204 496.15 281.27 495.695 282.609 495.695 cv
1 /0 /CSD get_res sepcs
1 sep
f
293.49 500.895 mo
293.763 500.999 294.036 501.194 294.296 501.493 cv
294.556 501.805 294.816 502.221 295.076 502.754 cv
296.376 505.341 li
294.998 505.341 li
293.789 502.91 li
293.477 502.286 293.165 501.857 292.879 501.649 cv
292.58 501.441 292.177 501.337 291.67 501.337 cv
290.279 501.337 li
290.279 505.341 li
288.992 505.341 li
288.992 495.864 li
291.891 495.864 li
292.97 495.864 293.776 496.098 294.309 496.54 cv
294.842 496.995 295.115 497.684 295.115 498.594 cv
295.115 499.192 294.972 499.699 294.699 500.089 cv
294.413 500.479 294.01 500.752 293.49 500.895 cv
290.279 496.917 mo
290.279 500.284 li
291.891 500.284 li
292.502 500.284 292.97 500.141 293.282 499.855 cv
293.594 499.569 293.763 499.153 293.763 498.594 cv
293.763 498.048 293.594 497.632 293.282 497.346 cv
292.97 497.06 292.502 496.917 291.891 496.917 cv
290.279 496.917 li
f
299.314 500.817 mo
299.314 504.288 li
301.368 504.288 li
302.057 504.288 302.564 504.145 302.902 503.859 cv
303.227 503.573 303.396 503.144 303.396 502.546 cv
303.396 501.961 303.227 501.532 302.902 501.246 cv
302.564 500.96 302.057 500.817 301.368 500.817 cv
299.314 500.817 li
299.314 496.917 mo
299.314 499.777 li
301.212 499.777 li
301.836 499.777 302.291 499.66 302.603 499.426 cv
302.915 499.192 303.071 498.841 303.071 498.347 cv
303.071 497.879 302.915 497.515 302.603 497.281 cv
302.291 497.047 301.836 496.917 301.212 496.917 cv
299.314 496.917 li
298.027 495.864 mo
301.303 495.864 li
302.278 495.864 303.032 496.072 303.565 496.475 cv
304.085 496.891 304.358 497.463 304.358 498.204 cv
304.358 498.789 304.215 499.257 303.942 499.595 cv
303.669 499.933 303.279 500.154 302.759 500.232 cv
303.383 500.375 303.877 500.661 304.228 501.09 cv
304.566 501.519 304.748 502.052 304.748 502.689 cv
304.748 503.547 304.449 504.197 303.877 504.652 cv
303.305 505.12 302.486 505.341 301.433 505.341 cv
298.027 505.341 li
298.027 495.864 li
f
306.309 501.259 mo
309.728 501.259 li
309.728 502.299 li
306.309 502.299 li
306.309 501.259 li
f
317.319 496.176 mo
317.319 497.424 li
316.825 497.19 316.37 497.021 315.941 496.904 cv
315.499 496.8 315.083 496.735 314.693 496.735 cv
313.991 496.735 313.445 496.878 313.068 497.138 cv
312.691 497.411 312.509 497.801 312.509 498.295 cv
312.509 498.711 312.626 499.036 312.886 499.244 cv
313.133 499.465 313.614 499.634 314.316 499.764 cv
315.096 499.92 li
316.045 500.102 316.747 500.427 317.202 500.882 cv
317.657 501.35 317.891 501.961 317.891 502.728 cv
317.891 503.651 317.579 504.34 316.968 504.808 cv
316.344 505.276 315.447 505.51 314.264 505.51 cv
313.809 505.51 313.328 505.458 312.821 505.367 cv
312.314 505.276 311.794 505.133 311.261 504.925 cv
311.261 503.599 li
311.781 503.898 312.288 504.119 312.782 504.262 cv
313.276 504.418 313.77 504.483 314.264 504.483 cv
314.992 504.483 315.551 504.34 315.954 504.054 cv
316.344 503.768 316.552 503.365 316.552 502.819 cv
316.552 502.351 316.409 501.987 316.123 501.727 cv
315.837 501.467 315.369 501.272 314.719 501.142 cv
313.939 500.986 li
312.977 500.804 312.288 500.505 311.859 500.089 cv
311.43 499.686 311.222 499.127 311.222 498.399 cv
311.222 497.567 311.508 496.904 312.106 496.423 cv
312.691 495.942 313.51 495.695 314.55 495.695 cv
314.992 495.695 315.434 495.734 315.902 495.812 cv
316.357 495.89 316.825 496.02 317.319 496.176 cv
f
319.893 495.864 mo
321.18 495.864 li
321.18 504.262 li
325.795 504.262 li
325.795 505.341 li
319.893 505.341 li
319.893 495.864 li
f
330.306 497.125 mo
328.564 501.844 li
332.048 501.844 li
330.306 497.125 li
329.578 495.864 mo
331.034 495.864 li
334.648 505.341 li
333.309 505.341 li
332.451 502.91 li
328.174 502.91 li
327.316 505.341 li
325.964 505.341 li
329.578 495.864 li
f
336.026 495.864 mo
337.938 495.864 li
340.355 502.312 li
342.786 495.864 li
344.698 495.864 li
344.698 505.341 li
343.449 505.341 li
343.449 497.021 li
341.005 503.521 li
339.719 503.521 li
337.275 497.021 li
337.275 505.341 li
336.026 505.341 li
336.026 495.864 li
f
241.087 519.869 mo
267.087 519.869 li
.831846 .112703 1 .0183108 cmyk
@
282.609 515.813 mo
281.673 515.813 280.932 516.164 280.386 516.853 cv
279.84 517.555 279.567 518.491 279.567 519.687 cv
279.567 520.883 279.84 521.832 280.386 522.521 cv
280.932 523.223 281.673 523.561 282.609 523.561 cv
283.532 523.561 284.273 523.223 284.819 522.521 cv
285.365 521.832 285.638 520.883 285.638 519.687 cv
285.638 518.491 285.365 517.555 284.819 516.853 cv
284.273 516.164 283.532 515.813 282.609 515.813 cv
282.609 514.773 mo
283.935 514.773 284.988 515.228 285.794 516.112 cv
286.587 516.996 286.99 518.192 286.99 519.687 cv
286.99 521.195 286.587 522.378 285.794 523.262 cv
284.988 524.146 283.935 524.588 282.609 524.588 cv
281.27 524.588 280.204 524.146 279.411 523.262 cv
278.605 522.378 278.215 521.195 278.215 519.687 cv
278.215 518.192 278.605 516.996 279.411 516.112 cv
280.204 515.228 281.27 514.773 282.609 514.773 cv
1 /0 /CSD get_res sepcs
1 sep
f
288.823 521.611 mo
288.823 517.308 li
289.993 517.308 li
289.993 521.572 li
289.993 522.248 290.123 522.742 290.383 523.08 cv
290.643 523.418 291.033 523.587 291.566 523.587 cv
292.19 523.587 292.697 523.392 293.061 522.989 cv
293.425 522.586 293.607 522.04 293.607 521.338 cv
293.607 517.308 li
294.777 517.308 li
294.777 524.419 li
293.607 524.419 li
293.607 523.327 li
293.321 523.769 292.983 524.081 292.619 524.289 cv
292.242 524.484 291.813 524.588 291.319 524.588 cv
290.5 524.588 289.876 524.341 289.46 523.834 cv
289.031 523.34 288.823 522.599 288.823 521.611 cv
291.761 517.139 mo
291.761 517.139 li
f
301.303 518.4 mo
301.173 518.322 301.03 518.27 300.874 518.231 cv
300.718 518.205 300.549 518.179 300.367 518.179 cv
299.704 518.179 299.197 518.4 298.846 518.829 cv
298.482 519.258 298.313 519.869 298.313 520.675 cv
298.313 524.419 li
297.143 524.419 li
297.143 517.308 li
298.313 517.308 li
298.313 518.413 li
298.547 517.984 298.872 517.659 299.262 517.451 cv
299.652 517.243 300.133 517.139 300.705 517.139 cv
300.783 517.139 300.874 517.152 300.978 517.152 cv
301.069 517.165 301.173 517.178 301.303 517.204 cv
301.303 518.4 li
f
307.062 517.516 mo
307.062 518.621 li
306.724 518.465 306.386 518.335 306.035 518.244 cv
305.671 518.166 305.307 518.114 304.93 518.114 cv
304.345 518.114 303.903 518.205 303.617 518.387 cv
303.331 518.569 303.188 518.829 303.188 519.18 cv
303.188 519.453 303.292 519.661 303.5 519.817 cv
303.708 519.973 304.124 520.129 304.748 520.259 cv
305.151 520.35 li
305.983 520.532 306.568 520.792 306.919 521.104 cv
307.257 521.429 307.439 521.884 307.439 522.456 cv
307.439 523.119 307.179 523.639 306.659 524.016 cv
306.139 524.406 305.411 524.588 304.501 524.588 cv
304.111 524.588 303.721 524.549 303.305 524.484 cv
302.889 524.419 302.46 524.315 302.005 524.159 cv
302.005 522.95 li
302.434 523.184 302.863 523.353 303.279 523.457 cv
303.695 523.574 304.111 523.626 304.527 523.626 cv
305.073 523.626 305.502 523.535 305.801 523.353 cv
306.087 523.171 306.243 522.898 306.243 522.547 cv
306.243 522.235 306.126 521.988 305.918 521.819 cv
305.71 521.65 305.242 521.481 304.514 521.325 cv
304.111 521.234 li
303.383 521.078 302.85 520.844 302.538 520.532 cv
302.213 520.22 302.057 519.791 302.057 519.232 cv
302.057 518.569 302.291 518.049 302.759 517.685 cv
303.227 517.321 303.903 517.139 304.787 517.139 cv
305.216 517.139 305.619 517.178 306.009 517.243 cv
306.386 517.308 306.737 517.399 307.062 517.516 cv
f
312.106 514.552 mo
311.534 515.54 311.118 516.502 310.845 517.451 cv
310.559 518.4 310.429 519.362 310.429 520.337 cv
310.429 521.325 310.559 522.287 310.845 523.236 cv
311.118 524.198 311.534 525.147 312.106 526.122 cv
311.092 526.122 li
310.455 525.121 309.974 524.159 309.662 523.197 cv
309.35 522.235 309.194 521.286 309.194 520.337 cv
309.194 519.401 309.35 518.452 309.662 517.49 cv
309.974 516.528 310.442 515.553 311.092 514.552 cv
312.106 514.552 li
f
314.42 514.942 mo
319.867 514.942 li
319.867 516.021 li
315.707 516.021 li
315.707 518.816 li
319.464 518.816 li
319.464 519.895 li
315.707 519.895 li
315.707 524.419 li
314.42 524.419 li
314.42 514.942 li
f
321.843 517.308 mo
323.013 517.308 li
323.013 524.419 li
321.843 524.419 li
321.843 517.308 li
321.843 514.539 mo
323.013 514.539 li
323.013 516.021 li
321.843 516.021 li
321.843 514.539 li
f
331.372 517.308 mo
328.798 520.766 li
331.502 524.419 li
330.124 524.419 li
328.057 521.624 li
325.99 524.419 li
324.612 524.419 li
327.368 520.701 li
324.846 517.308 li
326.224 517.308 li
328.109 519.843 li
329.994 517.308 li
331.372 517.308 li
f
339.237 520.571 mo
339.237 521.143 li
333.868 521.143 li
333.92 521.949 334.154 522.573 334.596 522.989 cv
335.025 523.405 335.623 523.613 336.403 523.613 cv
336.845 523.613 337.287 523.561 337.703 523.457 cv
338.119 523.353 338.548 523.184 338.964 522.95 cv
338.964 524.055 li
338.548 524.237 338.119 524.38 337.677 524.458 cv
337.235 524.536 336.78 524.588 336.338 524.588 cv
335.194 524.588 334.297 524.263 333.634 523.613 cv
332.971 522.963 332.646 522.066 332.646 520.935 cv
332.646 519.778 332.958 518.855 333.582 518.166 cv
334.206 517.49 335.064 517.139 336.13 517.139 cv
337.092 517.139 337.846 517.451 338.405 518.062 cv
338.951 518.686 339.237 519.518 339.237 520.571 cv
338.067 520.233 mo
338.054 519.596 337.872 519.089 337.534 518.699 cv
337.183 518.322 336.715 518.127 336.143 518.127 cv
335.493 518.127 334.973 518.322 334.583 518.686 cv
334.193 519.05 333.959 519.57 333.907 520.233 cv
338.067 520.233 li
f
345.828 518.387 mo
345.828 514.539 li
346.998 514.539 li
346.998 524.419 li
345.828 524.419 li
345.828 523.353 li
345.581 523.782 345.269 524.094 344.892 524.289 cv
344.515 524.484 344.073 524.588 343.553 524.588 cv
342.695 524.588 341.993 524.25 341.447 523.574 cv
340.901 522.898 340.641 521.988 340.641 520.87 cv
340.641 519.752 340.901 518.855 341.447 518.166 cv
341.993 517.49 342.695 517.139 343.553 517.139 cv
344.073 517.139 344.515 517.243 344.892 517.451 cv
345.269 517.659 345.581 517.971 345.828 518.387 cv
341.85 520.87 mo
341.85 521.728 342.019 522.404 342.37 522.898 cv
342.721 523.392 343.215 523.626 343.839 523.626 cv
344.45 523.626 344.931 523.392 345.295 522.898 cv
345.646 522.404 345.828 521.728 345.828 520.87 cv
345.828 520.012 345.646 519.349 345.295 518.855 cv
344.931 518.361 344.45 518.114 343.839 518.114 cv
343.215 518.114 342.721 518.361 342.37 518.855 cv
342.019 519.349 341.85 520.012 341.85 520.87 cv
f
348.818 520.337 mo
352.237 520.337 li
352.237 521.377 li
348.818 521.377 li
348.818 520.337 li
f
355.435 515.995 mo
355.435 519.557 li
357.047 519.557 li
357.645 519.557 358.1 519.414 358.425 519.102 cv
358.75 518.79 358.919 518.348 358.919 517.776 cv
358.919 517.204 358.75 516.775 358.425 516.463 cv
358.1 516.151 357.645 515.995 357.047 515.995 cv
355.435 515.995 li
354.148 514.942 mo
357.047 514.942 li
358.1 514.942 358.906 515.189 359.452 515.67 cv
359.998 516.151 360.271 516.853 360.271 517.776 cv
360.271 518.712 359.998 519.427 359.452 519.895 cv
358.906 520.376 358.1 520.61 357.047 520.61 cv
355.435 520.61 li
355.435 524.419 li
354.148 524.419 li
354.148 514.942 li
f
364.691 518.127 mo
364.067 518.127 363.573 518.374 363.209 518.868 cv
362.845 519.362 362.663 520.025 362.663 520.87 cv
362.663 521.728 362.832 522.391 363.196 522.885 cv
363.56 523.379 364.054 523.613 364.691 523.613 cv
365.315 523.613 365.809 523.379 366.173 522.885 cv
366.537 522.391 366.719 521.728 366.719 520.87 cv
366.719 520.038 366.537 519.362 366.173 518.868 cv
365.809 518.374 365.315 518.127 364.691 518.127 cv
364.691 517.139 mo
365.705 517.139 366.498 517.477 367.083 518.127 cv
367.655 518.79 367.954 519.7 367.954 520.87 cv
367.954 522.04 367.655 522.95 367.083 523.6 cv
366.498 524.263 365.705 524.588 364.691 524.588 cv
363.664 524.588 362.858 524.263 362.286 523.6 cv
361.714 522.95 361.428 522.04 361.428 520.87 cv
361.428 519.7 361.714 518.79 362.286 518.127 cv
362.858 517.477 363.664 517.139 364.691 517.139 cv
f
369.891 517.308 mo
371.061 517.308 li
371.061 524.419 li
369.891 524.419 li
369.891 517.308 li
369.891 514.539 mo
371.061 514.539 li
371.061 516.021 li
369.891 516.021 li
369.891 514.539 li
f
379.42 520.129 mo
379.42 524.419 li
378.25 524.419 li
378.25 520.168 li
378.25 519.492 378.107 518.998 377.847 518.66 cv
377.587 518.322 377.197 518.153 376.677 518.153 cv
376.04 518.153 375.546 518.361 375.182 518.764 cv
374.818 519.167 374.636 519.713 374.636 520.402 cv
374.636 524.419 li
373.466 524.419 li
373.466 517.308 li
374.636 517.308 li
374.636 518.413 li
374.909 517.997 375.234 517.672 375.624 517.464 cv
376.001 517.256 376.443 517.139 376.937 517.139 cv
377.743 517.139 378.367 517.399 378.783 517.906 cv
379.199 518.413 379.42 519.154 379.42 520.129 cv
f
382.904 515.293 mo
382.904 517.308 li
385.309 517.308 li
385.309 518.218 li
382.904 518.218 li
382.904 522.079 li
382.904 522.664 382.982 523.041 383.138 523.197 cv
383.294 523.366 383.619 523.444 384.113 523.444 cv
385.309 523.444 li
385.309 524.419 li
384.113 524.419 li
383.203 524.419 382.579 524.25 382.241 523.912 cv
381.903 523.574 381.734 522.963 381.734 522.079 cv
381.734 518.218 li
380.876 518.218 li
380.876 517.308 li
381.734 517.308 li
381.734 515.293 li
382.904 515.293 li
f
386.661 514.552 mo
387.675 514.552 li
388.299 515.553 388.78 516.528 389.092 517.49 cv
389.404 518.452 389.573 519.401 389.573 520.337 cv
389.573 521.286 389.404 522.235 389.092 523.197 cv
388.78 524.159 388.299 525.121 387.675 526.122 cv
386.661 526.122 li
387.22 525.147 387.636 524.198 387.922 523.236 cv
388.195 522.287 388.338 521.325 388.338 520.337 cv
388.338 519.362 388.195 518.4 387.922 517.451 cv
387.636 516.502 387.22 515.54 386.661 514.552 cv
f
241.087 538.947 mo
267.087 538.947 li
.0993362 1 1 .024445 cmyk
@
282.609 534.891 mo
281.673 534.891 280.932 535.242 280.386 535.931 cv
279.84 536.633 279.567 537.569 279.567 538.765 cv
279.567 539.961 279.84 540.91 280.386 541.599 cv
280.932 542.301 281.673 542.639 282.609 542.639 cv
283.532 542.639 284.273 542.301 284.819 541.599 cv
285.365 540.91 285.638 539.961 285.638 538.765 cv
285.638 537.569 285.365 536.633 284.819 535.931 cv
284.273 535.242 283.532 534.891 282.609 534.891 cv
282.609 533.851 mo
283.935 533.851 284.988 534.306 285.794 535.19 cv
286.587 536.074 286.99 537.27 286.99 538.765 cv
286.99 540.273 286.587 541.456 285.794 542.34 cv
284.988 543.224 283.935 543.666 282.609 543.666 cv
281.27 543.666 280.204 543.224 279.411 542.34 cv
278.605 541.456 278.215 540.273 278.215 538.765 cv
278.215 537.27 278.605 536.074 279.411 535.19 cv
280.204 534.306 281.27 533.851 282.609 533.851 cv
1 /0 /CSD get_res sepcs
1 sep
f
288.823 540.689 mo
288.823 536.386 li
289.993 536.386 li
289.993 540.65 li
289.993 541.326 290.123 541.82 290.383 542.158 cv
290.643 542.496 291.033 542.665 291.566 542.665 cv
292.19 542.665 292.697 542.47 293.061 542.067 cv
293.425 541.664 293.607 541.118 293.607 540.416 cv
293.607 536.386 li
294.777 536.386 li
294.777 543.497 li
293.607 543.497 li
293.607 542.405 li
293.321 542.847 292.983 543.159 292.619 543.367 cv
292.242 543.562 291.813 543.666 291.319 543.666 cv
290.5 543.666 289.876 543.419 289.46 542.912 cv
289.031 542.418 288.823 541.677 288.823 540.689 cv
291.761 536.217 mo
291.761 536.217 li
f
301.303 537.478 mo
301.173 537.4 301.03 537.348 300.874 537.309 cv
300.718 537.283 300.549 537.257 300.367 537.257 cv
299.704 537.257 299.197 537.478 298.846 537.907 cv
298.482 538.336 298.313 538.947 298.313 539.753 cv
298.313 543.497 li
297.143 543.497 li
297.143 536.386 li
298.313 536.386 li
298.313 537.491 li
298.547 537.062 298.872 536.737 299.262 536.529 cv
299.652 536.321 300.133 536.217 300.705 536.217 cv
300.783 536.217 300.874 536.23 300.978 536.23 cv
301.069 536.243 301.173 536.256 301.303 536.282 cv
301.303 537.478 li
f
307.062 536.594 mo
307.062 537.699 li
306.724 537.543 306.386 537.413 306.035 537.322 cv
305.671 537.244 305.307 537.192 304.93 537.192 cv
304.345 537.192 303.903 537.283 303.617 537.465 cv
303.331 537.647 303.188 537.907 303.188 538.258 cv
303.188 538.531 303.292 538.739 303.5 538.895 cv
303.708 539.051 304.124 539.207 304.748 539.337 cv
305.151 539.428 li
305.983 539.61 306.568 539.87 306.919 540.182 cv
307.257 540.507 307.439 540.962 307.439 541.534 cv
307.439 542.197 307.179 542.717 306.659 543.094 cv
306.139 543.484 305.411 543.666 304.501 543.666 cv
304.111 543.666 303.721 543.627 303.305 543.562 cv
302.889 543.497 302.46 543.393 302.005 543.237 cv
302.005 542.028 li
302.434 542.262 302.863 542.431 303.279 542.535 cv
303.695 542.652 304.111 542.704 304.527 542.704 cv
305.073 542.704 305.502 542.613 305.801 542.431 cv
306.087 542.249 306.243 541.976 306.243 541.625 cv
306.243 541.313 306.126 541.066 305.918 540.897 cv
305.71 540.728 305.242 540.559 304.514 540.403 cv
304.111 540.312 li
303.383 540.156 302.85 539.922 302.538 539.61 cv
302.213 539.298 302.057 538.869 302.057 538.31 cv
302.057 537.647 302.291 537.127 302.759 536.763 cv
303.227 536.399 303.903 536.217 304.787 536.217 cv
305.216 536.217 305.619 536.256 306.009 536.321 cv
306.386 536.386 306.737 536.477 307.062 536.594 cv
f
312.106 533.63 mo
311.534 534.618 311.118 535.58 310.845 536.529 cv
310.559 537.478 310.429 538.44 310.429 539.415 cv
310.429 540.403 310.559 541.365 310.845 542.314 cv
311.118 543.276 311.534 544.225 312.106 545.2 cv
311.092 545.2 li
310.455 544.199 309.974 543.237 309.662 542.275 cv
309.35 541.313 309.194 540.364 309.194 539.415 cv
309.194 538.479 309.35 537.53 309.662 536.568 cv
309.974 535.606 310.442 534.631 311.092 533.63 cv
312.106 533.63 li
f
314.42 534.02 mo
319.867 534.02 li
319.867 535.099 li
315.707 535.099 li
315.707 537.894 li
319.464 537.894 li
319.464 538.973 li
315.707 538.973 li
315.707 543.497 li
314.42 543.497 li
314.42 534.02 li
f
321.843 533.617 mo
323.013 533.617 li
323.013 543.497 li
321.843 543.497 li
321.843 533.617 li
f
328.213 537.205 mo
327.589 537.205 327.095 537.452 326.731 537.946 cv
326.367 538.44 326.185 539.103 326.185 539.948 cv
326.185 540.806 326.354 541.469 326.718 541.963 cv
327.082 542.457 327.576 542.691 328.213 542.691 cv
328.837 542.691 329.331 542.457 329.695 541.963 cv
330.059 541.469 330.241 540.806 330.241 539.948 cv
330.241 539.116 330.059 538.44 329.695 537.946 cv
329.331 537.452 328.837 537.205 328.213 537.205 cv
328.213 536.217 mo
329.227 536.217 330.02 536.555 330.605 537.205 cv
331.177 537.868 331.476 538.778 331.476 539.948 cv
331.476 541.118 331.177 542.028 330.605 542.678 cv
330.02 543.341 329.227 543.666 328.213 543.666 cv
327.186 543.666 326.38 543.341 325.808 542.678 cv
325.236 542.028 324.95 541.118 324.95 539.948 cv
324.95 538.778 325.236 537.868 325.808 537.205 cv
326.38 536.555 327.186 536.217 328.213 536.217 cv
f
336.65 539.922 mo
335.701 539.922 335.051 540.039 334.687 540.247 cv
334.323 540.468 334.141 540.832 334.141 541.352 cv
334.141 541.768 334.271 542.106 334.544 542.34 cv
334.817 542.587 335.194 542.704 335.662 542.704 cv
336.312 542.704 336.832 542.483 337.222 542.015 cv
337.612 541.56 337.807 540.949 337.807 540.182 cv
337.807 539.922 li
336.65 539.922 li
338.977 539.441 mo
338.977 543.497 li
337.807 543.497 li
337.807 542.418 li
337.534 542.86 337.196 543.172 336.806 543.367 cv
336.416 543.562 335.922 543.666 335.35 543.666 cv
334.622 543.666 334.037 543.471 333.608 543.068 cv
333.179 542.665 332.971 542.119 332.971 541.43 cv
332.971 540.637 333.231 540.039 333.777 539.623 cv
334.31 539.22 335.103 539.012 336.169 539.012 cv
337.807 539.012 li
337.807 538.895 li
337.807 538.362 337.625 537.946 337.274 537.647 cv
336.923 537.361 336.429 537.205 335.792 537.205 cv
335.376 537.205 334.986 537.257 334.596 537.361 cv
334.206 537.465 333.842 537.608 333.491 537.79 cv
333.491 536.711 li
333.907 536.555 334.323 536.425 334.726 536.347 cv
335.129 536.269 335.519 536.217 335.909 536.217 cv
336.936 536.217 337.703 536.49 338.21 537.023 cv
338.717 537.556 338.977 538.362 338.977 539.441 cv
f
342.539 534.371 mo
342.539 536.386 li
344.944 536.386 li
344.944 537.296 li
342.539 537.296 li
342.539 541.157 li
342.539 541.742 342.617 542.119 342.773 542.275 cv
342.929 542.444 343.254 542.522 343.748 542.522 cv
344.944 542.522 li
344.944 543.497 li
343.748 543.497 li
342.838 543.497 342.214 543.328 341.876 542.99 cv
341.538 542.652 341.369 542.041 341.369 541.157 cv
341.369 537.296 li
340.511 537.296 li
340.511 536.386 li
341.369 536.386 li
341.369 534.371 li
342.539 534.371 li
f
345.893 539.415 mo
349.312 539.415 li
349.312 540.455 li
345.893 540.455 li
345.893 539.415 li
f
352.51 535.073 mo
352.51 538.635 li
354.122 538.635 li
354.72 538.635 355.175 538.492 355.5 538.18 cv
355.825 537.868 355.994 537.426 355.994 536.854 cv
355.994 536.282 355.825 535.853 355.5 535.541 cv
355.175 535.229 354.72 535.073 354.122 535.073 cv
352.51 535.073 li
351.223 534.02 mo
354.122 534.02 li
355.175 534.02 355.981 534.267 356.527 534.748 cv
357.073 535.229 357.346 535.931 357.346 536.854 cv
357.346 537.79 357.073 538.505 356.527 538.973 cv
355.981 539.454 355.175 539.688 354.122 539.688 cv
352.51 539.688 li
352.51 543.497 li
351.223 543.497 li
351.223 534.02 li
f
361.766 537.205 mo
361.142 537.205 360.648 537.452 360.284 537.946 cv
359.92 538.44 359.738 539.103 359.738 539.948 cv
359.738 540.806 359.907 541.469 360.271 541.963 cv
360.635 542.457 361.129 542.691 361.766 542.691 cv
362.39 542.691 362.884 542.457 363.248 541.963 cv
363.612 541.469 363.794 540.806 363.794 539.948 cv
363.794 539.116 363.612 538.44 363.248 537.946 cv
362.884 537.452 362.39 537.205 361.766 537.205 cv
361.766 536.217 mo
362.78 536.217 363.573 536.555 364.158 537.205 cv
364.73 537.868 365.029 538.778 365.029 539.948 cv
365.029 541.118 364.73 542.028 364.158 542.678 cv
363.573 543.341 362.78 543.666 361.766 543.666 cv
360.739 543.666 359.933 543.341 359.361 542.678 cv
358.789 542.028 358.503 541.118 358.503 539.948 cv
358.503 538.778 358.789 537.868 359.361 537.205 cv
359.933 536.555 360.739 536.217 361.766 536.217 cv
f
366.966 536.386 mo
368.136 536.386 li
368.136 543.497 li
366.966 543.497 li
366.966 536.386 li
366.966 533.617 mo
368.136 533.617 li
368.136 535.099 li
366.966 535.099 li
366.966 533.617 li
f
376.495 539.207 mo
376.495 543.497 li
375.325 543.497 li
375.325 539.246 li
375.325 538.57 375.182 538.076 374.922 537.738 cv
374.662 537.4 374.272 537.231 373.752 537.231 cv
373.115 537.231 372.621 537.439 372.257 537.842 cv
371.893 538.245 371.711 538.791 371.711 539.48 cv
371.711 543.497 li
370.541 543.497 li
370.541 536.386 li
371.711 536.386 li
371.711 537.491 li
371.984 537.075 372.309 536.75 372.699 536.542 cv
373.076 536.334 373.518 536.217 374.012 536.217 cv
374.818 536.217 375.442 536.477 375.858 536.984 cv
376.274 537.491 376.495 538.232 376.495 539.207 cv
f
379.979 534.371 mo
379.979 536.386 li
382.384 536.386 li
382.384 537.296 li
379.979 537.296 li
379.979 541.157 li
379.979 541.742 380.057 542.119 380.213 542.275 cv
380.369 542.444 380.694 542.522 381.188 542.522 cv
382.384 542.522 li
382.384 543.497 li
381.188 543.497 li
380.278 543.497 379.654 543.328 379.316 542.99 cv
378.978 542.652 378.809 542.041 378.809 541.157 cv
378.809 537.296 li
377.951 537.296 li
377.951 536.386 li
378.809 536.386 li
378.809 534.371 li
379.979 534.371 li
f
383.736 533.63 mo
384.75 533.63 li
385.374 534.631 385.855 535.606 386.167 536.568 cv
386.479 537.53 386.648 538.479 386.648 539.415 cv
386.648 540.364 386.479 541.313 386.167 542.275 cv
385.855 543.237 385.374 544.199 384.75 545.2 cv
383.736 545.2 li
384.295 544.225 384.711 543.276 384.997 542.314 cv
385.27 541.365 385.413 540.403 385.413 539.415 cv
385.413 538.44 385.27 537.478 384.997 536.529 cv
384.711 535.58 384.295 534.618 383.736 533.63 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
