%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: sequence_10.pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: gaof
%%CreationDate: 19.2.25, 19:04:49
%%BoundingBox: 0 0 243 595
%%HiResBoundingBox: 0 0 242.5872 594.0563
%%CropBox: 0 0 242.5872 594.0563
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 571 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2019-02-25T19:02:41+08:00"
   xmp:CreatorTool="matplotlib 2.2.3, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend 2.2.3"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -594.056 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 594.056 li
242.587 594.056 li
242.587 0 li
cp
clp
gsave
0 594.056 mo
243 594.056 li
243 -.94375 li
0 -.94375 li
0 594.056 li
clp
0 594.056 mo
242.587 594.056 li
242.587 0 li
0 0 li
0 594.056 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
48.375 557.9 mo
239.087 557.9 li
239.087 3.50003 li
48.375 3.50003 li
48.375 557.9 li
f
67.4231 557.9 mo
67.4231 561.4 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
67.4231 557.9 mo
67.4231 561.4 li
@
67.4243 566.143 mo
66.7613 566.143 66.2673 566.468 65.9293 567.118 cv
65.5913 567.768 65.4353 568.743 65.4353 570.043 cv
65.4353 571.343 65.5913 572.318 65.9293 572.968 cv
66.2673 573.618 66.7613 573.943 67.4243 573.943 cv
68.0873 573.943 68.5813 573.618 68.9193 572.968 cv
69.2443 572.318 69.4133 571.343 69.4133 570.043 cv
69.4133 568.743 69.2443 567.768 68.9193 567.118 cv
68.5813 566.468 68.0873 566.143 67.4243 566.143 cv
67.4243 565.129 mo
68.4773 565.129 69.2833 565.558 69.8553 566.39 cv
70.4143 567.235 70.7003 568.457 70.7003 570.043 cv
70.7003 571.642 70.4143 572.864 69.8553 573.696 cv
69.2833 574.528 68.4773 574.944 67.4243 574.944 cv
66.3583 574.944 65.5393 574.528 64.9803 573.696 cv
64.4213 572.864 64.1483 571.642 64.1483 570.043 cv
64.1483 568.457 64.4213 567.235 64.9803 566.39 cv
65.5393 565.558 66.3583 565.129 67.4243 565.129 cv
f
102.477 557.9 mo
102.477 561.4 li
f
102.477 557.9 mo
102.477 561.4 li
@
95.6151 565.298 mo
100.646 565.298 li
100.646 566.377 li
96.7851 566.377 li
96.7851 568.704 li
96.9671 568.639 97.1621 568.587 97.3441 568.561 cv
97.5261 568.535 97.7211 568.509 97.9031 568.509 cv
98.9561 568.509 99.7881 568.808 100.412 569.38 cv
101.036 569.965 101.348 570.745 101.348 571.733 cv
101.348 572.76 101.023 573.553 100.386 574.112 cv
99.7491 574.671 98.8521 574.944 97.7081 574.944 cv
97.3051 574.944 96.9021 574.905 96.4861 574.853 cv
96.0701 574.788 95.6541 574.697 95.2121 574.554 cv
95.2121 573.267 li
95.5891 573.475 95.9791 573.631 96.3951 573.735 cv
96.7981 573.839 97.2271 573.878 97.6821 573.878 cv
98.4101 573.878 98.9951 573.696 99.4241 573.306 cv
99.8401 572.916 100.061 572.396 100.061 571.733 cv
100.061 571.083 99.8401 570.563 99.4241 570.173 cv
98.9951 569.783 98.4101 569.588 97.6821 569.588 cv
97.3441 569.588 96.9931 569.627 96.6551 569.705 cv
96.3171 569.783 95.9661 569.9 95.6151 570.056 cv
95.6151 565.298 li
f
106.613 566.143 mo
105.95 566.143 105.456 566.468 105.118 567.118 cv
104.78 567.768 104.624 568.743 104.624 570.043 cv
104.624 571.343 104.78 572.318 105.118 572.968 cv
105.456 573.618 105.95 573.943 106.613 573.943 cv
107.276 573.943 107.77 573.618 108.108 572.968 cv
108.433 572.318 108.602 571.343 108.602 570.043 cv
108.602 568.743 108.433 567.768 108.108 567.118 cv
107.77 566.468 107.276 566.143 106.613 566.143 cv
106.613 565.129 mo
107.666 565.129 108.472 565.558 109.044 566.39 cv
109.603 567.235 109.889 568.457 109.889 570.043 cv
109.889 571.642 109.603 572.864 109.044 573.696 cv
108.472 574.528 107.666 574.944 106.613 574.944 cv
105.547 574.944 104.728 574.528 104.169 573.696 cv
103.61 572.864 103.337 571.642 103.337 570.043 cv
103.337 568.457 103.61 567.235 104.169 566.39 cv
104.728 565.558 105.547 565.129 106.613 565.129 cv
f
137.53 557.9 mo
137.53 561.4 li
f
137.53 557.9 mo
137.53 561.4 li
@
126.744 573.696 mo
128.837 573.696 li
128.837 566.468 li
126.562 566.923 li
126.562 565.753 li
128.824 565.298 li
130.111 565.298 li
130.111 573.696 li
132.204 573.696 li
132.204 574.775 li
126.744 574.775 li
126.744 573.696 li
f
137.534 566.143 mo
136.871 566.143 136.377 566.468 136.039 567.118 cv
135.701 567.768 135.545 568.743 135.545 570.043 cv
135.545 571.343 135.701 572.318 136.039 572.968 cv
136.377 573.618 136.871 573.943 137.534 573.943 cv
138.197 573.943 138.691 573.618 139.029 572.968 cv
139.354 572.318 139.523 571.343 139.523 570.043 cv
139.523 568.743 139.354 567.768 139.029 567.118 cv
138.691 566.468 138.197 566.143 137.534 566.143 cv
137.534 565.129 mo
138.587 565.129 139.393 565.558 139.965 566.39 cv
140.524 567.235 140.81 568.457 140.81 570.043 cv
140.81 571.642 140.524 572.864 139.965 573.696 cv
139.393 574.528 138.587 574.944 137.534 574.944 cv
136.468 574.944 135.649 574.528 135.09 573.696 cv
134.531 572.864 134.258 571.642 134.258 570.043 cv
134.258 568.457 134.531 567.235 135.09 566.39 cv
135.649 565.558 136.468 565.129 137.534 565.129 cv
f
145.802 566.143 mo
145.139 566.143 144.645 566.468 144.307 567.118 cv
143.969 567.768 143.813 568.743 143.813 570.043 cv
143.813 571.343 143.969 572.318 144.307 572.968 cv
144.645 573.618 145.139 573.943 145.802 573.943 cv
146.465 573.943 146.959 573.618 147.297 572.968 cv
147.622 572.318 147.791 571.343 147.791 570.043 cv
147.791 568.743 147.622 567.768 147.297 567.118 cv
146.959 566.468 146.465 566.143 145.802 566.143 cv
145.802 565.129 mo
146.855 565.129 147.661 565.558 148.233 566.39 cv
148.792 567.235 149.078 568.457 149.078 570.043 cv
149.078 571.642 148.792 572.864 148.233 573.696 cv
147.661 574.528 146.855 574.944 145.802 574.944 cv
144.736 574.944 143.917 574.528 143.358 573.696 cv
142.799 572.864 142.526 571.642 142.526 570.043 cv
142.526 568.457 142.799 567.235 143.358 566.39 cv
143.917 565.558 144.736 565.129 145.802 565.129 cv
f
172.584 557.9 mo
172.584 561.4 li
f
172.584 557.9 mo
172.584 561.4 li
@
161.798 573.696 mo
163.891 573.696 li
163.891 566.468 li
161.616 566.923 li
161.616 565.753 li
163.878 565.298 li
165.165 565.298 li
165.165 573.696 li
167.258 573.696 li
167.258 574.775 li
161.798 574.775 li
161.798 573.696 li
f
169.858 565.298 mo
174.889 565.298 li
174.889 566.377 li
171.028 566.377 li
171.028 568.704 li
171.21 568.639 171.405 568.587 171.587 568.561 cv
171.769 568.535 171.964 568.509 172.146 568.509 cv
173.199 568.509 174.031 568.808 174.655 569.38 cv
175.279 569.965 175.591 570.745 175.591 571.733 cv
175.591 572.76 175.266 573.553 174.629 574.112 cv
173.992 574.671 173.095 574.944 171.951 574.944 cv
171.548 574.944 171.145 574.905 170.729 574.853 cv
170.313 574.788 169.897 574.697 169.455 574.554 cv
169.455 573.267 li
169.832 573.475 170.222 573.631 170.638 573.735 cv
171.041 573.839 171.47 573.878 171.925 573.878 cv
172.653 573.878 173.238 573.696 173.667 573.306 cv
174.083 572.916 174.304 572.396 174.304 571.733 cv
174.304 571.083 174.083 570.563 173.667 570.173 cv
173.238 569.783 172.653 569.588 171.925 569.588 cv
171.587 569.588 171.236 569.627 170.898 569.705 cv
170.56 569.783 170.209 569.9 169.858 570.056 cv
169.858 565.298 li
f
180.856 566.143 mo
180.193 566.143 179.699 566.468 179.361 567.118 cv
179.023 567.768 178.867 568.743 178.867 570.043 cv
178.867 571.343 179.023 572.318 179.361 572.968 cv
179.699 573.618 180.193 573.943 180.856 573.943 cv
181.519 573.943 182.013 573.618 182.351 572.968 cv
182.676 572.318 182.845 571.343 182.845 570.043 cv
182.845 568.743 182.676 567.768 182.351 567.118 cv
182.013 566.468 181.519 566.143 180.856 566.143 cv
180.856 565.129 mo
181.909 565.129 182.715 565.558 183.287 566.39 cv
183.846 567.235 184.132 568.457 184.132 570.043 cv
184.132 571.642 183.846 572.864 183.287 573.696 cv
182.715 574.528 181.909 574.944 180.856 574.944 cv
179.79 574.944 178.971 574.528 178.412 573.696 cv
177.853 572.864 177.58 571.642 177.58 570.043 cv
177.58 568.457 177.853 567.235 178.412 566.39 cv
178.971 565.558 179.79 565.129 180.856 565.129 cv
f
207.638 557.9 mo
207.638 561.4 li
f
207.638 557.9 mo
207.638 561.4 li
@
197.735 573.696 mo
202.207 573.696 li
202.207 574.775 li
196.188 574.775 li
196.188 573.696 li
196.669 573.202 197.332 572.526 198.177 571.668 cv
199.009 570.823 199.542 570.277 199.763 570.03 cv
200.179 569.575 200.465 569.185 200.621 568.86 cv
200.777 568.548 200.868 568.223 200.868 567.911 cv
200.868 567.417 200.686 567.001 200.335 566.689 cv
199.984 566.377 199.529 566.208 198.957 566.208 cv
198.554 566.208 198.125 566.286 197.683 566.416 cv
197.241 566.559 196.76 566.767 196.253 567.053 cv
196.253 565.753 li
196.773 565.545 197.254 565.389 197.696 565.285 cv
198.138 565.181 198.554 565.129 198.931 565.129 cv
199.906 565.129 200.686 565.376 201.271 565.87 cv
201.856 566.364 202.155 567.014 202.155 567.833 cv
202.155 568.223 202.077 568.6 201.934 568.938 cv
201.791 569.289 201.531 569.705 201.141 570.173 cv
201.037 570.303 200.699 570.654 200.127 571.239 cv
199.555 571.824 198.762 572.643 197.735 573.696 cv
f
207.641 566.143 mo
206.978 566.143 206.484 566.468 206.146 567.118 cv
205.808 567.768 205.652 568.743 205.652 570.043 cv
205.652 571.343 205.808 572.318 206.146 572.968 cv
206.484 573.618 206.978 573.943 207.641 573.943 cv
208.304 573.943 208.798 573.618 209.136 572.968 cv
209.461 572.318 209.63 571.343 209.63 570.043 cv
209.63 568.743 209.461 567.768 209.136 567.118 cv
208.798 566.468 208.304 566.143 207.641 566.143 cv
207.641 565.129 mo
208.694 565.129 209.5 565.558 210.072 566.39 cv
210.631 567.235 210.917 568.457 210.917 570.043 cv
210.917 571.642 210.631 572.864 210.072 573.696 cv
209.5 574.528 208.694 574.944 207.641 574.944 cv
206.575 574.944 205.756 574.528 205.197 573.696 cv
204.638 572.864 204.365 571.642 204.365 570.043 cv
204.365 568.457 204.638 567.235 205.197 566.39 cv
205.756 565.558 206.575 565.129 207.641 565.129 cv
f
215.909 566.143 mo
215.246 566.143 214.752 566.468 214.414 567.118 cv
214.076 567.768 213.92 568.743 213.92 570.043 cv
213.92 571.343 214.076 572.318 214.414 572.968 cv
214.752 573.618 215.246 573.943 215.909 573.943 cv
216.572 573.943 217.066 573.618 217.404 572.968 cv
217.729 572.318 217.898 571.343 217.898 570.043 cv
217.898 568.743 217.729 567.768 217.404 567.118 cv
217.066 566.468 216.572 566.143 215.909 566.143 cv
215.909 565.129 mo
216.962 565.129 217.768 565.558 218.34 566.39 cv
218.899 567.235 219.185 568.457 219.185 570.043 cv
219.185 571.642 218.899 572.864 218.34 573.696 cv
217.768 574.528 216.962 574.944 215.909 574.944 cv
214.843 574.944 214.024 574.528 213.465 573.696 cv
212.906 572.864 212.633 571.642 212.633 570.043 cv
212.633 568.457 212.906 567.235 213.465 566.39 cv
214.024 565.558 214.843 565.129 215.909 565.129 cv
f
133.54 584.242 mo
130.966 587.7 li
133.67 591.353 li
132.292 591.353 li
130.225 588.558 li
128.158 591.353 li
126.78 591.353 li
129.536 587.635 li
127.014 584.242 li
128.392 584.242 li
130.277 586.777 li
132.162 584.242 li
133.54 584.242 li
f
142.263 581.486 mo
141.691 582.474 141.275 583.436 141.002 584.385 cv
140.716 585.334 140.586 586.296 140.586 587.271 cv
140.586 588.259 140.716 589.221 141.002 590.17 cv
141.275 591.132 141.691 592.081 142.263 593.056 cv
141.249 593.056 li
140.612 592.055 140.131 591.093 139.819 590.131 cv
139.507 589.169 139.351 588.22 139.351 587.271 cv
139.351 586.335 139.507 585.386 139.819 584.424 cv
140.131 583.462 140.599 582.487 141.249 581.486 cv
142.263 581.486 li
f
150.063 585.607 mo
150.349 585.087 150.7 584.71 151.103 584.45 cv
151.506 584.203 151.987 584.073 152.546 584.073 cv
153.274 584.073 153.846 584.333 154.249 584.853 cv
154.652 585.373 154.86 586.114 154.86 587.063 cv
154.86 591.353 li
153.69 591.353 li
153.69 587.102 li
153.69 586.426 153.56 585.919 153.326 585.581 cv
153.079 585.256 152.715 585.087 152.221 585.087 cv
151.61 585.087 151.129 585.295 150.778 585.698 cv
150.427 586.101 150.258 586.647 150.258 587.336 cv
150.258 591.353 li
149.088 591.353 li
149.088 587.102 li
149.088 586.426 148.958 585.919 148.724 585.581 cv
148.477 585.256 148.1 585.087 147.606 585.087 cv
147.008 585.087 146.527 585.295 146.176 585.698 cv
145.825 586.101 145.656 586.647 145.656 587.336 cv
145.656 591.353 li
144.486 591.353 li
144.486 584.242 li
145.656 584.242 li
145.656 585.347 li
145.916 584.918 146.241 584.593 146.618 584.385 cv
146.982 584.177 147.424 584.073 147.944 584.073 cv
148.464 584.073 148.893 584.203 149.257 584.463 cv
149.621 584.723 149.881 585.113 150.063 585.607 cv
f
157.005 581.486 mo
158.019 581.486 li
158.643 582.487 159.124 583.462 159.436 584.424 cv
159.748 585.386 159.917 586.335 159.917 587.271 cv
159.917 588.22 159.748 589.169 159.436 590.131 cv
159.124 591.093 158.643 592.055 158.019 593.056 cv
157.005 593.056 li
157.564 592.081 157.98 591.132 158.266 590.17 cv
158.539 589.221 158.682 588.259 158.682 587.271 cv
158.682 586.296 158.539 585.334 158.266 584.385 cv
157.98 583.436 157.564 582.474 157.005 581.486 cv
f
48.375 532.7 mo
44.875 532.7 li
f
48.375 532.7 mo
44.875 532.7 li
@
37.2434 529.005 mo
36.5804 529.005 36.0864 529.331 35.7484 529.981 cv
35.4104 530.63 35.2544 531.606 35.2544 532.906 cv
35.2544 534.206 35.4104 535.181 35.7484 535.831 cv
36.0864 536.481 36.5804 536.806 37.2434 536.806 cv
37.9064 536.806 38.4004 536.481 38.7384 535.831 cv
39.0634 535.181 39.2324 534.206 39.2324 532.906 cv
39.2324 531.606 39.0634 530.63 38.7384 529.981 cv
38.4004 529.331 37.9064 529.005 37.2434 529.005 cv
37.2434 527.992 mo
38.2964 527.992 39.1024 528.421 39.6744 529.253 cv
40.2334 530.098 40.5194 531.32 40.5194 532.906 cv
40.5194 534.505 40.2334 535.727 39.6744 536.559 cv
39.1024 537.391 38.2964 537.807 37.2434 537.807 cv
36.1774 537.807 35.3584 537.391 34.7994 536.559 cv
34.2404 535.727 33.9674 534.505 33.9674 532.906 cv
33.9674 531.32 34.2404 530.098 34.7994 529.253 cv
35.3584 528.421 36.1774 527.992 37.2434 527.992 cv
f
48.375 462.593 mo
44.875 462.593 li
f
48.375 462.593 mo
44.875 462.593 li
@
18.1901 466.451 mo
20.2831 466.451 li
20.2831 459.223 li
18.0081 459.678 li
18.0081 458.508 li
20.2701 458.053 li
21.5571 458.053 li
21.5571 466.451 li
23.6501 466.451 li
23.6501 467.53 li
18.1901 467.53 li
18.1901 466.451 li
f
28.9801 458.898 mo
28.3171 458.898 27.8231 459.223 27.4851 459.873 cv
27.1471 460.523 26.9911 461.498 26.9911 462.798 cv
26.9911 464.098 27.1471 465.073 27.4851 465.723 cv
27.8231 466.373 28.3171 466.698 28.9801 466.698 cv
29.6431 466.698 30.1371 466.373 30.4751 465.723 cv
30.8001 465.073 30.9691 464.098 30.9691 462.798 cv
30.9691 461.498 30.8001 460.523 30.4751 459.873 cv
30.1371 459.223 29.6431 458.898 28.9801 458.898 cv
28.9801 457.884 mo
30.0331 457.884 30.8391 458.313 31.4111 459.145 cv
31.9701 459.99 32.2561 461.212 32.2561 462.798 cv
32.2561 464.397 31.9701 465.619 31.4111 466.451 cv
30.8391 467.283 30.0331 467.699 28.9801 467.699 cv
27.9141 467.699 27.0951 467.283 26.5361 466.451 cv
25.9771 465.619 25.7041 464.397 25.7041 462.798 cv
25.7041 461.212 25.9771 459.99 26.5361 459.145 cv
27.0951 458.313 27.9141 457.884 28.9801 457.884 cv
f
37.2482 458.898 mo
36.5852 458.898 36.0912 459.223 35.7532 459.873 cv
35.4152 460.523 35.2592 461.498 35.2592 462.798 cv
35.2592 464.098 35.4152 465.073 35.7532 465.723 cv
36.0912 466.373 36.5852 466.698 37.2482 466.698 cv
37.9112 466.698 38.4052 466.373 38.7432 465.723 cv
39.0682 465.073 39.2372 464.098 39.2372 462.798 cv
39.2372 461.498 39.0682 460.523 38.7432 459.873 cv
38.4052 459.223 37.9112 458.898 37.2482 458.898 cv
37.2482 457.884 mo
38.3012 457.884 39.1072 458.313 39.6792 459.145 cv
40.2382 459.99 40.5242 461.212 40.5242 462.798 cv
40.5242 464.397 40.2382 465.619 39.6792 466.451 cv
39.1072 467.283 38.3012 467.699 37.2482 467.699 cv
36.1822 467.699 35.3632 467.283 34.8042 466.451 cv
34.2452 465.619 33.9722 464.397 33.9722 462.798 cv
33.9722 461.212 34.2452 459.99 34.8042 459.145 cv
35.3632 458.313 36.1822 457.884 37.2482 457.884 cv
f
48.375 392.485 mo
44.875 392.485 li
f
48.375 392.485 mo
44.875 392.485 li
@
19.0741 396.344 mo
23.5461 396.344 li
23.5461 397.423 li
17.5271 397.423 li
17.5271 396.344 li
18.0081 395.85 18.6711 395.174 19.5161 394.316 cv
20.3481 393.471 20.8811 392.925 21.1021 392.678 cv
21.5181 392.223 21.8041 391.833 21.9601 391.508 cv
22.1161 391.196 22.2071 390.871 22.2071 390.559 cv
22.2071 390.065 22.0251 389.649 21.6741 389.337 cv
21.3231 389.025 20.8681 388.856 20.2961 388.856 cv
19.8931 388.856 19.4641 388.934 19.0221 389.064 cv
18.5801 389.207 18.0991 389.415 17.5921 389.701 cv
17.5921 388.401 li
18.1121 388.193 18.5931 388.037 19.0351 387.933 cv
19.4771 387.829 19.8931 387.777 20.2701 387.777 cv
21.2451 387.777 22.0251 388.024 22.6101 388.518 cv
23.1951 389.012 23.4941 389.662 23.4941 390.481 cv
23.4941 390.871 23.4161 391.248 23.2731 391.586 cv
23.1301 391.937 22.8701 392.353 22.4801 392.821 cv
22.3761 392.951 22.0381 393.302 21.4661 393.887 cv
20.8941 394.472 20.1011 395.291 19.0741 396.344 cv
f
28.9801 388.791 mo
28.3171 388.791 27.8231 389.116 27.4851 389.766 cv
27.1471 390.416 26.9911 391.391 26.9911 392.691 cv
26.9911 393.991 27.1471 394.966 27.4851 395.616 cv
27.8231 396.266 28.3171 396.591 28.9801 396.591 cv
29.6431 396.591 30.1371 396.266 30.4751 395.616 cv
30.8001 394.966 30.9691 393.991 30.9691 392.691 cv
30.9691 391.391 30.8001 390.416 30.4751 389.766 cv
30.1371 389.116 29.6431 388.791 28.9801 388.791 cv
28.9801 387.777 mo
30.0331 387.777 30.8391 388.206 31.4111 389.038 cv
31.9701 389.883 32.2561 391.105 32.2561 392.691 cv
32.2561 394.29 31.9701 395.512 31.4111 396.344 cv
30.8391 397.176 30.0331 397.592 28.9801 397.592 cv
27.9141 397.592 27.0951 397.176 26.5361 396.344 cv
25.9771 395.512 25.7041 394.29 25.7041 392.691 cv
25.7041 391.105 25.9771 389.883 26.5361 389.038 cv
27.0951 388.206 27.9141 387.777 28.9801 387.777 cv
f
37.2482 388.791 mo
36.5852 388.791 36.0912 389.116 35.7532 389.766 cv
35.4152 390.416 35.2592 391.391 35.2592 392.691 cv
35.2592 393.991 35.4152 394.966 35.7532 395.616 cv
36.0912 396.266 36.5852 396.591 37.2482 396.591 cv
37.9112 396.591 38.4052 396.266 38.7432 395.616 cv
39.0682 394.966 39.2372 393.991 39.2372 392.691 cv
39.2372 391.391 39.0682 390.416 38.7432 389.766 cv
38.4052 389.116 37.9112 388.791 37.2482 388.791 cv
37.2482 387.777 mo
38.3012 387.777 39.1072 388.206 39.6792 389.038 cv
40.2382 389.883 40.5242 391.105 40.5242 392.691 cv
40.5242 394.29 40.2382 395.512 39.6792 396.344 cv
39.1072 397.176 38.3012 397.592 37.2482 397.592 cv
36.1822 397.592 35.3632 397.176 34.8042 396.344 cv
34.2452 395.512 33.9722 394.29 33.9722 392.691 cv
33.9722 391.105 34.2452 389.883 34.8042 389.038 cv
35.3632 388.206 36.1822 387.777 37.2482 387.777 cv
f
48.375 322.378 mo
44.875 322.378 li
f
48.375 322.378 mo
44.875 322.378 li
@
21.8561 322.206 mo
22.4671 322.336 22.9481 322.609 23.2861 323.025 cv
23.6241 323.441 23.8061 323.961 23.8061 324.559 cv
23.8061 325.495 23.4811 326.223 22.8441 326.73 cv
22.1941 327.237 21.2841 327.484 20.1011 327.484 cv
19.6981 327.484 19.2821 327.445 18.8661 327.367 cv
18.4501 327.302 18.0081 327.185 17.5661 327.029 cv
17.5661 325.794 li
17.9171 326.003 18.3071 326.158 18.7361 326.262 cv
19.1521 326.366 19.5941 326.418 20.0621 326.418 cv
20.8681 326.418 21.4791 326.262 21.8951 325.951 cv
22.3111 325.638 22.5321 325.171 22.5321 324.559 cv
22.5321 324.013 22.3371 323.572 21.9471 323.259 cv
21.5571 322.947 21.0111 322.779 20.3091 322.779 cv
19.2041 322.779 li
19.2041 321.725 li
20.3611 321.725 li
20.9851 321.725 21.4661 321.608 21.8041 321.348 cv
22.1421 321.102 22.3111 320.737 22.3111 320.257 cv
22.3111 319.775 22.1291 319.398 21.7911 319.138 cv
21.4401 318.878 20.9461 318.749 20.3091 318.749 cv
19.9581 318.749 19.5811 318.787 19.1781 318.865 cv
18.7751 318.943 18.3331 319.06 17.8521 319.216 cv
17.8521 318.072 li
18.3331 317.943 18.7881 317.839 19.2171 317.773 cv
19.6331 317.708 20.0361 317.669 20.4261 317.669 cv
21.3881 317.669 22.1551 317.891 22.7271 318.332 cv
23.2991 318.774 23.5851 319.372 23.5851 320.126 cv
23.5851 320.646 23.4291 321.089 23.1301 321.452 cv
22.8311 321.816 22.4021 322.076 21.8561 322.206 cv
f
28.9801 318.684 mo
28.3171 318.684 27.8231 319.008 27.4851 319.658 cv
27.1471 320.309 26.9911 321.283 26.9911 322.583 cv
26.9911 323.883 27.1471 324.858 27.4851 325.508 cv
27.8231 326.158 28.3171 326.483 28.9801 326.483 cv
29.6431 326.483 30.1371 326.158 30.4751 325.508 cv
30.8001 324.858 30.9691 323.883 30.9691 322.583 cv
30.9691 321.283 30.8001 320.309 30.4751 319.658 cv
30.1371 319.008 29.6431 318.684 28.9801 318.684 cv
28.9801 317.669 mo
30.0331 317.669 30.8391 318.098 31.4111 318.93 cv
31.9701 319.775 32.2561 320.997 32.2561 322.583 cv
32.2561 324.182 31.9701 325.404 31.4111 326.236 cv
30.8391 327.068 30.0331 327.484 28.9801 327.484 cv
27.9141 327.484 27.0951 327.068 26.5361 326.236 cv
25.9771 325.404 25.7041 324.182 25.7041 322.583 cv
25.7041 320.997 25.9771 319.775 26.5361 318.93 cv
27.0951 318.098 27.9141 317.669 28.9801 317.669 cv
f
37.2482 318.684 mo
36.5852 318.684 36.0912 319.008 35.7532 319.658 cv
35.4152 320.309 35.2592 321.283 35.2592 322.583 cv
35.2592 323.883 35.4152 324.858 35.7532 325.508 cv
36.0912 326.158 36.5852 326.483 37.2482 326.483 cv
37.9112 326.483 38.4052 326.158 38.7432 325.508 cv
39.0682 324.858 39.2372 323.883 39.2372 322.583 cv
39.2372 321.283 39.0682 320.309 38.7432 319.658 cv
38.4052 319.008 37.9112 318.684 37.2482 318.684 cv
37.2482 317.669 mo
38.3012 317.669 39.1072 318.098 39.6792 318.93 cv
40.2382 319.775 40.5242 320.997 40.5242 322.583 cv
40.5242 324.182 40.2382 325.404 39.6792 326.236 cv
39.1072 327.068 38.3012 327.484 37.2482 327.484 cv
36.1822 327.484 35.3632 327.068 34.8042 326.236 cv
34.2452 325.404 33.9722 324.182 33.9722 322.583 cv
33.9722 320.997 34.2452 319.775 34.8042 318.93 cv
35.3632 318.098 36.1822 317.669 37.2482 317.669 cv
f
48.375 252.271 mo
44.875 252.271 li
f
48.375 252.271 mo
44.875 252.271 li
@
21.4921 248.849 mo
18.2551 253.906 li
21.4921 253.906 li
21.4921 248.849 li
21.1541 247.731 mo
22.7661 247.731 li
22.7661 253.906 li
24.1181 253.906 li
24.1181 254.972 li
22.7661 254.972 li
22.7661 257.208 li
21.4921 257.208 li
21.4921 254.972 li
17.2151 254.972 li
17.2151 253.737 li
21.1541 247.731 li
f
28.9801 248.576 mo
28.3171 248.576 27.8231 248.901 27.4851 249.551 cv
27.1471 250.201 26.9911 251.176 26.9911 252.476 cv
26.9911 253.776 27.1471 254.751 27.4851 255.401 cv
27.8231 256.051 28.3171 256.376 28.9801 256.376 cv
29.6431 256.376 30.1371 256.051 30.4751 255.401 cv
30.8001 254.751 30.9691 253.776 30.9691 252.476 cv
30.9691 251.176 30.8001 250.201 30.4751 249.551 cv
30.1371 248.901 29.6431 248.576 28.9801 248.576 cv
28.9801 247.562 mo
30.0331 247.562 30.8391 247.991 31.4111 248.823 cv
31.9701 249.668 32.2561 250.89 32.2561 252.476 cv
32.2561 254.075 31.9701 255.297 31.4111 256.129 cv
30.8391 256.961 30.0331 257.377 28.9801 257.377 cv
27.9141 257.377 27.0951 256.961 26.5361 256.129 cv
25.9771 255.297 25.7041 254.075 25.7041 252.476 cv
25.7041 250.89 25.9771 249.668 26.5361 248.823 cv
27.0951 247.991 27.9141 247.562 28.9801 247.562 cv
f
37.2482 248.576 mo
36.5852 248.576 36.0912 248.901 35.7532 249.551 cv
35.4152 250.201 35.2592 251.176 35.2592 252.476 cv
35.2592 253.776 35.4152 254.751 35.7532 255.401 cv
36.0912 256.051 36.5852 256.376 37.2482 256.376 cv
37.9112 256.376 38.4052 256.051 38.7432 255.401 cv
39.0682 254.751 39.2372 253.776 39.2372 252.476 cv
39.2372 251.176 39.0682 250.201 38.7432 249.551 cv
38.4052 248.901 37.9112 248.576 37.2482 248.576 cv
37.2482 247.562 mo
38.3012 247.562 39.1072 247.991 39.6792 248.823 cv
40.2382 249.668 40.5242 250.89 40.5242 252.476 cv
40.5242 254.075 40.2382 255.297 39.6792 256.129 cv
39.1072 256.961 38.3012 257.377 37.2482 257.377 cv
36.1822 257.377 35.3632 256.961 34.8042 256.129 cv
34.2452 255.297 33.9722 254.075 33.9722 252.476 cv
33.9722 250.89 34.2452 249.668 34.8042 248.823 cv
35.3632 247.991 36.1822 247.562 37.2482 247.562 cv
f
48.375 182.163 mo
44.875 182.163 li
f
48.375 182.163 mo
44.875 182.163 li
@
17.9821 177.624 mo
23.0131 177.624 li
23.0131 178.703 li
19.1521 178.703 li
19.1521 181.03 li
19.3341 180.965 19.5291 180.913 19.7111 180.887 cv
19.8931 180.861 20.0881 180.835 20.2701 180.835 cv
21.3231 180.835 22.1551 181.134 22.7791 181.706 cv
23.4031 182.291 23.7151 183.071 23.7151 184.059 cv
23.7151 185.086 23.3901 185.879 22.7531 186.438 cv
22.1161 186.997 21.2191 187.27 20.0751 187.27 cv
19.6721 187.27 19.2691 187.231 18.8531 187.179 cv
18.4371 187.114 18.0211 187.023 17.5791 186.88 cv
17.5791 185.593 li
17.9561 185.801 18.3461 185.957 18.7621 186.061 cv
19.1651 186.165 19.5941 186.204 20.0491 186.204 cv
20.7771 186.204 21.3621 186.022 21.7911 185.632 cv
22.2071 185.242 22.4281 184.722 22.4281 184.059 cv
22.4281 183.409 22.2071 182.889 21.7911 182.499 cv
21.3621 182.109 20.7771 181.914 20.0491 181.914 cv
19.7111 181.914 19.3601 181.953 19.0221 182.031 cv
18.6841 182.109 18.3331 182.226 17.9821 182.382 cv
17.9821 177.624 li
f
28.9801 178.469 mo
28.3171 178.469 27.8231 178.794 27.4851 179.444 cv
27.1471 180.094 26.9911 181.069 26.9911 182.369 cv
26.9911 183.669 27.1471 184.644 27.4851 185.294 cv
27.8231 185.944 28.3171 186.269 28.9801 186.269 cv
29.6431 186.269 30.1371 185.944 30.4751 185.294 cv
30.8001 184.644 30.9691 183.669 30.9691 182.369 cv
30.9691 181.069 30.8001 180.094 30.4751 179.444 cv
30.1371 178.794 29.6431 178.469 28.9801 178.469 cv
28.9801 177.455 mo
30.0331 177.455 30.8391 177.884 31.4111 178.716 cv
31.9701 179.561 32.2561 180.783 32.2561 182.369 cv
32.2561 183.968 31.9701 185.19 31.4111 186.022 cv
30.8391 186.854 30.0331 187.27 28.9801 187.27 cv
27.9141 187.27 27.0951 186.854 26.5361 186.022 cv
25.9771 185.19 25.7041 183.968 25.7041 182.369 cv
25.7041 180.783 25.9771 179.561 26.5361 178.716 cv
27.0951 177.884 27.9141 177.455 28.9801 177.455 cv
f
37.2482 178.469 mo
36.5852 178.469 36.0912 178.794 35.7532 179.444 cv
35.4152 180.094 35.2592 181.069 35.2592 182.369 cv
35.2592 183.669 35.4152 184.644 35.7532 185.294 cv
36.0912 185.944 36.5852 186.269 37.2482 186.269 cv
37.9112 186.269 38.4052 185.944 38.7432 185.294 cv
39.0682 184.644 39.2372 183.669 39.2372 182.369 cv
39.2372 181.069 39.0682 180.094 38.7432 179.444 cv
38.4052 178.794 37.9112 178.469 37.2482 178.469 cv
37.2482 177.455 mo
38.3012 177.455 39.1072 177.884 39.6792 178.716 cv
40.2382 179.561 40.5242 180.783 40.5242 182.369 cv
40.5242 183.968 40.2382 185.19 39.6792 186.022 cv
39.1072 186.854 38.3012 187.27 37.2482 187.27 cv
36.1822 187.27 35.3632 186.854 34.8042 186.022 cv
34.2452 185.19 33.9722 183.968 33.9722 182.369 cv
33.9722 180.783 34.2452 179.561 34.8042 178.716 cv
35.3632 177.884 36.1822 177.455 37.2482 177.455 cv
f
48.375 112.056 mo
44.875 112.056 li
f
48.375 112.056 mo
44.875 112.056 li
@
20.8681 111.741 mo
20.2961 111.741 19.8411 111.949 19.5031 112.339 cv
19.1651 112.729 18.9961 113.275 18.9961 113.951 cv
18.9961 114.64 19.1651 115.186 19.5031 115.576 cv
19.8411 115.966 20.2961 116.161 20.8681 116.161 cv
21.4401 116.161 21.8951 115.966 22.2331 115.576 cv
22.5711 115.186 22.7401 114.64 22.7401 113.951 cv
22.7401 113.275 22.5711 112.729 22.2331 112.339 cv
21.8951 111.949 21.4401 111.741 20.8681 111.741 cv
23.4161 107.724 mo
23.4161 108.894 li
23.0911 108.738 22.7661 108.621 22.4411 108.543 cv
22.1031 108.465 21.7781 108.426 21.4661 108.426 cv
20.6081 108.426 19.9581 108.712 19.5161 109.284 cv
19.0741 109.856 18.8141 110.727 18.7621 111.871 cv
19.0091 111.507 19.3211 111.221 19.6981 111.026 cv
20.0751 110.831 20.4911 110.727 20.9461 110.727 cv
21.8951 110.727 22.6491 111.026 23.1951 111.598 cv
23.7411 112.17 24.0271 112.963 24.0271 113.951 cv
24.0271 114.926 23.7281 115.706 23.1561 116.291 cv
22.5841 116.876 21.8171 117.162 20.8681 117.162 cv
19.7761 117.162 18.9311 116.746 18.3591 115.914 cv
17.7741 115.082 17.4881 113.86 17.4881 112.261 cv
17.4881 110.766 17.8391 109.57 18.5541 108.686 cv
19.2561 107.802 20.2181 107.347 21.4141 107.347 cv
21.7261 107.347 22.0511 107.386 22.3891 107.438 cv
22.7141 107.503 23.0521 107.594 23.4161 107.724 cv
f
28.9801 108.361 mo
28.3171 108.361 27.8231 108.686 27.4851 109.336 cv
27.1471 109.986 26.9911 110.961 26.9911 112.261 cv
26.9911 113.561 27.1471 114.536 27.4851 115.186 cv
27.8231 115.836 28.3171 116.161 28.9801 116.161 cv
29.6431 116.161 30.1371 115.836 30.4751 115.186 cv
30.8001 114.536 30.9691 113.561 30.9691 112.261 cv
30.9691 110.961 30.8001 109.986 30.4751 109.336 cv
30.1371 108.686 29.6431 108.361 28.9801 108.361 cv
28.9801 107.347 mo
30.0331 107.347 30.8391 107.776 31.4111 108.608 cv
31.9701 109.453 32.2561 110.675 32.2561 112.261 cv
32.2561 113.86 31.9701 115.082 31.4111 115.914 cv
30.8391 116.746 30.0331 117.162 28.9801 117.162 cv
27.9141 117.162 27.0951 116.746 26.5361 115.914 cv
25.9771 115.082 25.7041 113.86 25.7041 112.261 cv
25.7041 110.675 25.9771 109.453 26.5361 108.608 cv
27.0951 107.776 27.9141 107.347 28.9801 107.347 cv
f
37.2482 108.361 mo
36.5852 108.361 36.0912 108.686 35.7532 109.336 cv
35.4152 109.986 35.2592 110.961 35.2592 112.261 cv
35.2592 113.561 35.4152 114.536 35.7532 115.186 cv
36.0912 115.836 36.5852 116.161 37.2482 116.161 cv
37.9112 116.161 38.4052 115.836 38.7432 115.186 cv
39.0682 114.536 39.2372 113.561 39.2372 112.261 cv
39.2372 110.961 39.0682 109.986 38.7432 109.336 cv
38.4052 108.686 37.9112 108.361 37.2482 108.361 cv
37.2482 107.347 mo
38.3012 107.347 39.1072 107.776 39.6792 108.608 cv
40.2382 109.453 40.5242 110.675 40.5242 112.261 cv
40.5242 113.86 40.2382 115.082 39.6792 115.914 cv
39.1072 116.746 38.3012 117.162 37.2482 117.162 cv
36.1822 117.162 35.3632 116.746 34.8042 115.914 cv
34.2452 115.082 33.9722 113.86 33.9722 112.261 cv
33.9722 110.675 34.2452 109.453 34.8042 108.608 cv
35.3632 107.776 36.1822 107.347 37.2482 107.347 cv
f
48.375 41.9486 mo
44.875 41.9486 li
f
48.375 41.9486 mo
44.875 41.9486 li
@
17.6441 37.4091 mo
23.7411 37.4091 li
23.7411 37.9551 li
20.2961 46.8861 li
18.9571 46.8861 li
22.1941 38.4881 li
17.6441 38.4881 li
17.6441 37.4091 li
f
28.9801 38.2541 mo
28.3171 38.2541 27.8231 38.5791 27.4851 39.2291 cv
27.1471 39.8791 26.9911 40.8541 26.9911 42.1541 cv
26.9911 43.4541 27.1471 44.4291 27.4851 45.0791 cv
27.8231 45.7291 28.3171 46.0541 28.9801 46.0541 cv
29.6431 46.0541 30.1371 45.7291 30.4751 45.0791 cv
30.8001 44.4291 30.9691 43.4541 30.9691 42.1541 cv
30.9691 40.8541 30.8001 39.8791 30.4751 39.2291 cv
30.1371 38.5791 29.6431 38.2541 28.9801 38.2541 cv
28.9801 37.2401 mo
30.0331 37.2401 30.8391 37.6691 31.4111 38.5011 cv
31.9701 39.3461 32.2561 40.5681 32.2561 42.1541 cv
32.2561 43.7531 31.9701 44.9751 31.4111 45.8071 cv
30.8391 46.6391 30.0331 47.0551 28.9801 47.0551 cv
27.9141 47.0551 27.0951 46.6391 26.5361 45.8071 cv
25.9771 44.9751 25.7041 43.7531 25.7041 42.1541 cv
25.7041 40.5681 25.9771 39.3461 26.5361 38.5011 cv
27.0951 37.6691 27.9141 37.2401 28.9801 37.2401 cv
f
37.2482 38.2541 mo
36.5852 38.2541 36.0912 38.5791 35.7532 39.2291 cv
35.4152 39.8791 35.2592 40.8541 35.2592 42.1541 cv
35.2592 43.4541 35.4152 44.4291 35.7532 45.0791 cv
36.0912 45.7291 36.5852 46.0541 37.2482 46.0541 cv
37.9112 46.0541 38.4052 45.7291 38.7432 45.0791 cv
39.0682 44.4291 39.2372 43.4541 39.2372 42.1541 cv
39.2372 40.8541 39.0682 39.8791 38.7432 39.2291 cv
38.4052 38.5791 37.9112 38.2541 37.2482 38.2541 cv
37.2482 37.2401 mo
38.3012 37.2401 39.1072 37.6691 39.6792 38.5011 cv
40.2382 39.3461 40.5242 40.5681 40.5242 42.1541 cv
40.5242 43.7531 40.2382 44.9751 39.6792 45.8071 cv
39.1072 46.6391 38.3012 47.0551 37.2482 47.0551 cv
36.1822 47.0551 35.3632 46.6391 34.8042 45.8071 cv
34.2452 44.9751 33.9722 43.7531 33.9722 42.1541 cv
33.9722 40.5681 34.2452 39.3461 34.8042 38.5011 cv
35.3632 37.6691 36.1822 37.2401 37.2482 37.2401 cv
f
2.764 296.883 mo
2.764 291.332 li
3.83 291.332 li
8.939 295.726 li
8.939 291.332 li
9.875 291.332 li
9.875 297.039 li
8.809 297.039 li
3.7 292.645 li
3.7 296.883 li
2.764 296.883 li
f
.00799942 282.61 mo
.996 283.182 1.958 283.598 2.907 283.871 cv
3.856 284.157 4.818 284.287 5.793 284.287 cv
6.781 284.287 7.743 284.157 8.692 283.871 cv
9.654 283.598 10.603 283.182 11.578 282.61 cv
11.578 283.624 li
10.577 284.261 9.615 284.742 8.653 285.054 cv
7.691 285.366 6.742 285.522 5.793 285.522 cv
4.857 285.522 3.908 285.366 2.946 285.054 cv
1.984 284.742 1.009 284.274 .00799942 283.624 cv
.00799942 282.61 li
f
4.129 274.81 mo
3.609 274.524 3.232 274.173 2.972 273.77 cv
2.725 273.367 2.595 272.886 2.595 272.327 cv
2.595 271.599 2.855 271.027 3.375 270.624 cv
3.895 270.221 4.636 270.013 5.585 270.013 cv
9.875 270.013 li
9.875 271.183 li
5.624 271.183 li
4.948 271.183 4.441 271.313 4.103 271.547 cv
3.778 271.794 3.609 272.158 3.609 272.652 cv
3.609 273.263 3.817 273.744 4.22 274.095 cv
4.623 274.446 5.169 274.615 5.858 274.615 cv
9.875 274.615 li
9.875 275.785 li
5.624 275.785 li
4.948 275.785 4.441 275.915 4.103 276.149 cv
3.778 276.396 3.609 276.773 3.609 277.267 cv
3.609 277.865 3.817 278.346 4.22 278.697 cv
4.623 279.048 5.169 279.217 5.858 279.217 cv
9.875 279.217 li
9.875 280.387 li
2.764 280.387 li
2.764 279.217 li
3.869 279.217 li
3.44 278.957 3.115 278.632 2.907 278.255 cv
2.699 277.891 2.595 277.449 2.595 276.929 cv
2.595 276.409 2.725 275.98 2.985 275.616 cv
3.245 275.252 3.635 274.992 4.129 274.81 cv
f
.00799942 267.868 mo
.00799942 266.854 li
1.009 266.23 1.984 265.749 2.946 265.437 cv
3.908 265.125 4.857 264.956 5.793 264.956 cv
6.742 264.956 7.691 265.125 8.653 265.437 cv
9.615 265.749 10.577 266.23 11.578 266.854 cv
11.578 267.868 li
10.603 267.309 9.654 266.893 8.692 266.607 cv
7.743 266.334 6.781 266.191 5.793 266.191 cv
4.818 266.191 3.856 266.334 2.907 266.607 cv
1.958 266.893 .996 267.309 .00799942 267.868 cv
f
67.0173 533.331 mo
66.4217 532.948 li
66.2727 532.821 li
65.6907 532.182 li
65.5886 532.039 li
65.185 531.306 li
65.1213 531.152 li
64.7656 529.919 li
64.7395 529.781 li
64.5838 528.137 li
64.5809 528.043 li
64.6741 525.003 li
64.6769 524.957 li
64.9678 521.765 li
64.9741 521.715 li
65.4233 518.908 li
65.4376 518.839 li
66.0164 516.592 li
66.0438 516.507 li
66.6834 514.865 li
66.7146 514.795 li
67.5211 513.219 li
67.5648 513.144 li
68.8796 511.173 li
68.9244 511.112 li
70.4044 509.314 li
70.4559 509.257 li
72.1129 507.617 li
72.1557 507.578 li
75.1778 505.019 li
75.1855 505.012 li
78.4842 502.294 li
91.7918 490.667 li
91.8207 490.643 li
96.608 486.865 li
96.6068 486.866 li
101.764 482.777 li
103.703 481.091 li
105.97 478.871 li
108.064 476.524 li
111.606 472.114 li
114.166 468.586 li
116.547 464.932 li
119.422 460.119 li
125.833 448.668 li
127.217 445.686 li
128.13 443.206 li
131.202 433.832 li
131.2 433.835 li
132.093 431.068 li
132.594 428.834 li
132.943 426.229 li
133.263 420.625 li
133.288 417.507 li
133.082 414.722 li
132.547 408.602 li
132.546 408.589 li
132.109 402.332 li
132.107 402.275 li
132.131 398.616 li
132.131 398.62 li
132.131 391.612 li
131.784 385.533 li
131.187 379.484 li
130.353 373.371 li
128.955 364.386 li
128.136 360.526 li
127.307 357.813 li
127.306 357.811 li
126.314 354.531 li
126.301 354.483 li
125.659 351.703 li
125.653 351.674 li
124.569 345.996 li
123.434 340.095 li
122.704 337.085 li
121.307 332.266 li
119.606 327.148 li
118.364 323.975 li
116.164 319.058 li
113.731 314.342 li
108.971 305.593 li
108.95 305.552 li
106.934 301.232 li
106.918 301.195 li
104.836 296.029 li
104.826 296.003 li
102.664 290.006 li
102.656 289.983 li
100.249 282.552 li
100.248 282.549 li
94.9641 266.01 li
92.6623 259.108 li
92.6487 259.062 li
91.7603 255.702 li
91.7475 255.645 li
91.1013 252.097 li
91.0961 252.064 li
90.3463 246.592 li
90.3417 246.55 li
90.0419 242.796 li
90.0397 242.746 li
90.0013 239.735 li
90.0049 239.653 li
90.1966 237.685 li
90.2064 237.617 li
90.7931 234.549 li
90.7996 234.519 li
92.1507 228.77 li
92.1526 228.762 li
94.5587 219.013 li
94.6009 218.889 li
95.404 217.073 li
95.4135 217.052 li
97.5584 212.572 li
97.808 211.448 li
97.9543 209.967 li
97.8706 208.748 li
97.2884 204.244 li
96.4858 200.13 li
94.8441 192.895 li
94.8436 192.892 li
91.655 178.643 li
91.6406 178.554 li
91.3387 175.497 li
91.3351 175.429 li
91.3113 172.348 li
91.3149 172.269 li
91.5423 169.967 li
91.5527 169.896 li
91.9991 167.619 li
92.0146 167.555 li
92.8846 164.547 li
92.9039 164.489 li
94.027 161.531 li
94.0363 161.508 li
97.1853 153.97 li
97.1911 153.956 li
102.191 142.632 li
102.202 142.608 li
105.522 135.731 li
105.531 135.713 li
109.645 127.748 li
109.648 127.744 li
125.78 97.0524 li
125.777 97.0577 li
141.839 65.8885 li
141.92 65.7635 li
142.963 64.461 li
143.046 64.3727 li
143.944 63.562 li
144.129 63.4393 li
145.776 62.6694 li
145.866 62.6272 145.972 62.6022 146.071 62.5992 cv
148.184 62.5363 li
148.248 62.5372 li
148.617 62.5579 li
148.782 62.586 li
149.493 62.7906 li
149.85 62.8749 li
150.073 62.9676 li
151.798 64.037 li
151.978 64.1932 li
153.757 66.3195 li
153.831 66.4243 li
155.41 69.1463 li
155.439 69.2015 li
156.398 71.2237 li
156.424 71.286 li
157.02 72.904 li
157.042 72.9747 li
157.632 75.2509 li
157.64 75.2816 li
159.802 85.3288 li
161.436 92.2087 li
164.08 101.816 li
167.092 111.418 li
168.719 116.15 li
170.026 119.2 li
173.8 126.474 li
177.87 133.716 li
177.876 133.726 li
182.627 142.486 li
182.626 142.482 li
187.199 150.808 li
192.928 160.996 li
192.934 161.006 li
197.694 169.789 li
200.225 174.055 li
198.936 174.82 li
196.396 170.542 li
196.382 170.517 li
191.618 161.726 li
185.89 151.541 li
185.886 151.534 li
181.311 143.205 li
181.309 143.201 li
176.56 134.446 li
172.486 127.198 li
172.474 127.176 li
168.681 119.866 li
168.658 119.816 li
167.33 116.715 li
167.31 116.664 li
165.67 111.895 li
165.664 111.875 li
162.644 102.253 li
162.637 102.227 li
159.987 92.5931 li
159.98 92.5675 li
158.341 85.6679 li
158.337 85.6524 li
156.177 75.6127 li
155.599 73.3875 li
155.028 71.8352 li
154.097 69.8723 li
152.566 67.2326 li
150.905 65.2483 li
149.386 64.3066 li
149.13 64.2461 li
149.095 64.2369 li
148.449 64.0508 li
148.197 64.0367 li
146.271 64.094 li
144.866 64.7508 li
144.096 65.4455 li
143.138 66.6421 li
127.11 97.7449 li
127.107 97.7503 li
110.975 128.441 li
110.978 128.437 li
106.869 136.392 li
103.558 143.249 li
98.5669 154.554 li
95.425 162.075 li
94.3172 164.993 li
93.4647 167.94 li
93.0315 170.15 li
92.8116 172.376 li
92.8348 175.384 li
93.1289 178.361 li
96.3074 192.565 li
96.3068 192.563 li
97.951 199.809 li
97.9557 199.831 li
98.7653 203.98 li
98.7729 204.028 li
99.361 208.578 li
99.3655 208.623 li
99.455 209.927 li
99.4532 210.052 li
99.2962 211.641 li
99.2821 211.729 li
99.0041 212.981 li
98.9485 213.143 li
96.7714 217.69 li
95.9993 219.436 li
93.61 229.116 li
92.2634 234.847 li
91.6861 237.865 li
91.5017 239.757 li
91.5392 242.702 li
91.8353 246.409 li
92.5802 251.844 li
93.218 255.347 li
94.0928 258.656 li
96.3888 265.541 li
96.3918 265.55 li
101.677 282.093 li
101.676 282.09 li
104.079 289.508 li
106.233 295.481 li
108.302 300.615 li
110.299 304.896 li
115.052 313.631 li
115.06 313.646 li
117.506 318.389 li
117.524 318.427 li
119.74 323.379 li
119.754 323.412 li
121.01 326.619 li
121.023 326.656 li
122.735 331.807 li
122.744 331.834 li
124.149 336.684 li
124.158 336.716 li
124.896 339.758 li
124.904 339.794 li
126.042 345.713 li
127.124 351.379 li
127.757 354.121 li
128.742 357.377 li
128.741 357.375 li
129.58 360.119 li
129.597 360.182 li
130.426 364.094 li
130.434 364.135 li
131.837 373.147 li
131.839 373.161 li
132.675 379.295 li
132.679 379.323 li
133.279 385.401 li
133.281 385.432 li
133.63 391.548 li
133.632 391.591 li
133.63 398.621 li
133.63 398.625 li
133.607 402.256 li
134.042 408.477 li
134.576 414.596 li
134.577 414.606 li
134.786 417.427 li
134.788 417.488 li
134.763 420.655 li
134.762 420.692 li
134.439 426.343 li
134.433 426.4 li
134.076 429.066 li
134.065 429.13 li
133.549 431.429 li
133.531 431.495 li
132.628 434.295 li
132.627 434.299 li
129.552 443.686 li
129.543 443.711 li
128.614 446.233 li
128.591 446.289 li
127.181 449.326 li
127.155 449.376 li
120.726 460.861 li
120.715 460.879 li
117.827 465.714 li
117.812 465.739 li
115.413 469.42 li
115.391 469.451 li
112.81 473.01 li
112.787 473.039 li
109.222 477.478 li
109.197 477.508 li
107.073 479.888 li
107.038 479.925 li
104.737 482.178 li
104.704 482.208 li
102.735 483.92 li
102.709 483.942 li
97.5387 488.041 li
97.5373 488.042 li
92.7647 491.809 li
79.463 503.431 li
79.4465 503.445 li
76.1429 506.167 li
73.1473 508.704 li
71.5384 510.297 li
70.1067 512.036 li
68.8368 513.94 li
68.0674 515.444 li
67.4578 517.01 li
66.8989 519.179 li
66.4593 521.927 li
66.1727 525.071 li
66.0816 528.042 li
66.2263 529.57 li
66.5393 530.656 li
66.8599 531.238 li
67.316 531.739 li
68.4595 532.475 li
67.6481 533.736 li
67.0173 533.331 li
/1 
[/DeviceCMYK] /CSA add_res
.906126 .514977 .0511788 .00137331 cmyk
f
66.6797 532.188 mo
66.8937 528.51 li
66.8988 528.456 li
67.265 525.658 li
67.2768 525.591 li
67.7805 523.337 li
67.8061 523.249 li
68.3932 521.602 li
68.4225 521.532 li
69.1921 519.916 li
69.2331 519.841 li
70.4987 517.816 li
70.534 517.765 li
71.598 516.341 li
71.6428 516.287 li
73.2227 514.54 li
73.2732 514.49 li
76.2701 511.753 li
76.283 511.742 li
79.984 508.516 li
95.8475 494.089 li
95.8649 494.073 li
105.077 486.205 li
107.755 483.373 li
109.817 480.865 li
114.058 475.16 li
116.555 471.397 li
119.496 466.408 li
122.529 460.779 li
125.376 455.305 li
125.374 455.309 li
126.998 452.138 li
128.368 449.003 li
129.118 446.897 li
132.3 436.679 li
132.301 436.676 li
133.052 434.303 li
133.572 431.957 li
133.934 428.76 li
134.088 424.278 li
134.115 420.109 li
133.903 417.259 li
133.249 411.546 li
133.247 411.533 li
132.518 403.952 li
132.515 403.893 li
132.46 400.652 li
132.46 400.654 li
132.309 392.878 li
132.013 388.341 li
131.276 381.505 li
130.386 375.273 li
128.009 362.163 li
127.391 359.919 li
125.466 353.756 li
125.448 353.687 li
124.101 347.32 li
122.353 339.011 li
120.952 334.171 li
119.437 329.91 li
117.37 325.01 li
114.512 318.983 li
112.007 314.353 li
107.504 306.374 li
107.482 306.332 li
105.412 302.058 li
105.396 302.024 li
103.24 296.93 li
103.227 296.899 li
100.79 290.368 li
100.783 290.347 li
95.9123 276.021 li
95.9116 276.019 li
89.8923 258.126 li
89.867 258.031 li
89.1083 254.144 li
89.1028 254.112 li
88.4734 249.931 li
88.4682 249.888 li
88.0469 245.309 li
88.0438 245.237 li
88.0556 241.945 li
88.0623 241.846 li
88.3836 239.475 li
88.3909 239.431 li
89.1741 235.456 li
89.1793 235.431 li
92.0177 223.198 li
92.0628 223.064 li
92.917 221.139 li
92.9436 221.085 li
93.9154 219.298 li
94.5086 218.15 li
95.1775 216.083 li
95.3311 214.758 li
95.2594 212.609 li
95.0273 210.724 li
94.0394 206.019 li
92.2259 198.476 li
90.697 192.509 li
90.696 192.505 li
89.257 186.746 li
89.2445 186.686 li
88.7507 183.688 li
88.7439 183.636 li
88.5275 181.318 li
88.5246 181.27 li
88.4596 178.962 li
88.4603 178.903 li
88.5776 176.589 li
88.5848 176.517 li
88.9221 174.242 li
88.9353 174.174 li
89.6714 171.161 li
89.6914 171.094 li
90.7248 168.107 li
90.7358 168.078 li
93.1062 162.07 li
93.1115 162.057 li
95.4276 156.502 li
95.4299 156.497 li
99.0062 148.093 li
99.0157 148.071 li
102.709 140.096 li
102.719 140.076 li
109.265 127.009 li
109.268 127.005 li
118.141 109.57 li
124.368 96.9194 li
124.366 96.9245 li
128.952 87.4272 li
128.951 87.429 li
137.931 68.7052 li
137.981 68.6166 li
138.716 67.5019 li
138.774 67.4254 li
139.588 66.4801 li
139.669 66.4 li
140.277 65.8796 li
140.389 65.8006 li
141.366 65.2337 li
141.509 65.1699 li
142.567 64.823 li
142.714 64.7907 li
143.839 64.66 li
144.008 64.6594 li
145.559 64.8303 li
145.723 64.867 li
146.932 65.2856 li
147.067 65.3482 li
148.24 66.0395 li
148.358 66.1253 li
149.478 67.1229 li
149.55 67.1956 li
150.607 68.432 li
150.66 68.5025 li
152.342 71.0176 li
152.376 71.072 li
153.629 73.343 li
153.653 73.3896 li
154.511 75.2358 li
154.54 75.3091 li
155.436 77.9274 li
155.454 77.9921 li
156.138 80.7906 li
156.141 80.8023 li
157.485 86.7138 li
161.785 102.681 li
166.086 116.494 li
170.131 128.054 li
171.183 130.396 li
172.264 132.53 li
178.782 144.285 li
182.741 150.932 li
182.751 150.949 li
187.855 160.071 li
187.851 160.064 li
191.937 167.201 li
198.304 178.015 li
198.311 178.028 li
201.688 184.022 li
207.133 193.649 li
209.327 197.328 li
208.039 198.096 li
205.84 194.411 li
205.831 194.396 li
200.382 184.759 li
197.008 178.771 li
190.644 167.96 li
190.639 167.952 li
186.549 160.81 li
186.546 160.803 li
181.446 151.69 li
177.486 145.041 li
177.475 145.021 li
170.946 133.246 li
170.932 133.221 li
169.837 131.058 li
169.822 131.026 li
168.75 128.64 li
168.726 128.58 li
164.666 116.977 li
164.658 116.953 li
160.349 103.112 li
160.34 103.084 li
156.033 87.0903 li
156.026 87.0616 li
154.68 81.1414 li
154.005 78.3811 li
153.134 75.8317 li
152.304 74.045 li
151.078 71.825 li
149.438 69.3729 li
148.443 68.2095 li
147.415 67.2945 li
146.37 66.6784 li
145.311 66.3119 li
143.928 66.1596 li
142.963 66.2719 li
142.05 66.571 li
141.2 67.064 li
140.688 67.5024 li
139.942 68.3678 li
139.261 69.4 li
130.304 88.0777 li
130.303 88.0794 li
125.716 97.5767 li
125.714 97.5818 li
119.485 110.238 li
119.48 110.246 li
110.605 127.685 li
110.607 127.681 li
104.065 140.738 li
100.382 148.69 li
96.8101 157.084 li
96.8122 157.079 li
94.4989 162.627 li
92.137 168.613 li
91.1204 171.551 li
90.4007 174.496 li
90.074 176.701 li
89.9598 178.95 li
90.0233 181.203 li
90.2351 183.47 li
90.7197 186.412 li
92.1511 192.141 li
92.1501 192.137 li
93.6805 198.109 li
93.6832 198.12 li
95.5004 205.68 li
95.5051 205.701 li
96.5018 210.446 li
96.5122 210.509 li
96.7523 212.459 li
96.7575 212.526 li
96.8323 214.764 li
96.8277 214.875 li
96.6589 216.33 li
96.6275 216.475 li
95.9168 218.67 li
95.8696 218.783 li
95.2444 219.994 li
95.2368 220.008 li
94.2757 221.776 li
93.4628 223.607 li
90.6435 235.758 li
89.8669 239.699 li
89.5555 241.999 li
89.5438 245.207 li
89.96 249.729 li
90.5835 253.872 li
91.3298 257.695 li
97.3333 275.54 li
97.3325 275.538 li
102.199 289.854 li
104.627 296.36 li
106.77 301.421 li
108.822 305.657 li
113.317 313.623 li
113.324 313.634 li
115.841 318.287 li
115.859 318.322 li
118.733 324.382 li
118.746 324.412 li
120.828 329.347 li
120.844 329.387 li
122.373 333.69 li
122.387 333.732 li
123.802 338.62 li
123.815 338.674 li
125.569 347.01 li
126.908 353.342 li
128.827 359.484 li
128.834 359.509 li
129.464 361.797 li
129.479 361.863 li
131.865 375.02 li
131.869 375.047 li
132.763 381.306 li
132.766 381.331 li
133.506 388.196 li
133.508 388.227 li
133.807 392.798 li
133.809 392.832 li
133.959 400.624 li
133.959 400.626 li
134.014 403.838 li
134.74 411.382 li
135.395 417.103 li
135.398 417.133 li
135.613 420.027 li
135.615 420.088 li
135.588 424.299 li
135.587 424.32 li
135.432 428.84 li
135.428 428.899 li
135.058 432.165 li
135.045 432.243 li
134.51 434.66 li
134.492 434.724 li
133.731 437.129 li
133.732 437.125 li
130.546 447.357 li
130.536 447.386 li
129.772 449.531 li
129.753 449.579 li
128.364 452.759 li
128.344 452.801 li
126.709 455.993 li
126.707 455.997 li
123.857 461.476 li
123.852 461.486 li
120.809 467.132 li
120.795 467.157 li
117.837 472.176 li
117.816 472.21 li
115.297 476.006 li
115.274 476.039 li
111.009 481.774 li
110.987 481.803 li
108.897 484.346 li
108.862 484.385 li
106.14 487.264 li
106.082 487.319 li
96.848 495.206 li
80.9873 509.631 li
80.9756 509.641 li
77.2749 512.867 li
74.311 515.573 li
72.7787 517.267 li
71.7542 518.638 li
70.5279 520.6 li
69.7932 522.142 li
69.2343 523.709 li
68.748 525.886 li
68.3896 528.624 li
68.1337 533.023 li
66.6361 532.936 li
66.6797 532.188 li
0 .642573 1 0 cmyk
f
67.1357 533.393 mo
65.5089 532.718 li
65.4274 532.678 li
64.168 531.967 li
64.0624 531.895 li
63.4029 531.356 li
63.3195 531.276 li
62.5899 530.464 li
62.5043 530.348 li
62.0004 529.507 li
61.9333 529.362 li
61.5561 528.247 li
61.5245 528.116 li
61.3192 526.716 li
61.3118 526.635 li
61.2446 524.816 li
61.2446 524.759 li
61.358 521.916 li
61.3622 521.861 li
61.6495 519.321 li
61.6607 519.252 li
62.1375 516.971 li
62.1584 516.892 li
62.6835 515.279 li
62.7148 515.199 li
63.5947 513.277 li
63.6371 513.198 li
64.5081 511.775 li
64.552 511.711 li
65.9049 509.942 li
65.9519 509.886 li
67.6654 508.047 li
67.7204 507.994 li
69.9205 506.07 li
69.9343 506.058 li
80.3459 497.388 li
85.3734 493.073 li
85.3859 493.062 li
97.9652 482.732 li
101.098 479.61 li
104.768 475.571 li
107.525 472.251 li
110.408 468.453 li
113.595 463.865 li
118.961 455.623 li
123.616 448.203 li
125.403 444.784 li
126.863 441.484 li
126.865 441.479 li
129.05 436.646 li
129.053 436.639 li
131.978 430.342 li
132.638 428.152 li
133.258 425.084 li
134.041 419.747 li
134.452 415.664 li
134.448 412.945 li
133.917 398.948 li
133.917 398.892 li
134.412 385.459 li
134.338 378.724 li
133.569 364.767 li
132.837 355.834 li
132.407 353.018 li
130.921 344.832 li
130.912 344.773 li
130.467 340.331 li
130.468 340.336 li
129.606 332.238 li
128.911 327.947 li
127.947 323.543 li
126.887 319.585 li
125.152 313.95 li
123.247 308.521 li
121.482 304.116 li
116.921 293.287 li
116.899 293.228 li
115.649 289.391 li
115.64 289.362 li
114.115 283.948 li
114.109 283.923 li
112.599 277.778 li
112.595 277.761 li
109.088 261.895 li
109.086 261.884 li
105.56 244.619 li
105.548 244.541 li
105.268 241.642 li
105.265 241.598 li
105.152 238.493 li
105.151 238.448 li
105.289 232.468 li
105.292 232.419 li
105.666 228.232 li
105.675 228.169 li
106.134 225.538 li
106.153 225.457 li
106.9 222.897 li
106.91 222.864 li
112.941 205.224 li
112.963 205.168 li
114.108 202.532 li
114.13 202.486 li
115.228 200.369 li
115.233 200.36 li
116.968 197.121 li
117.555 195.635 li
117.901 194.272 li
118.025 192.982 li
117.976 191.148 li
117.679 188.826 li
116.969 185.745 li
115.194 179.037 li
111.35 165.241 li
111.331 165.157 li
110.936 162.662 li
110.929 162.605 li
110.751 160.382 li
110.749 160.32 li
110.757 158.105 li
110.76 158.038 li
110.947 156.039 li
110.956 155.974 li
111.357 153.784 li
111.373 153.714 li
112.096 151.176 li
112.119 151.11 li
113.271 148.145 li
113.282 148.118 li
116.3 141.158 li
116.306 141.144 li
120.519 131.944 li
120.53 131.923 li
124.293 124.35 li
124.302 124.333 li
129.974 113.627 li
129.973 113.629 li
136.955 100.34 li
142.13 90.0553 li
151.242 71.2539 li
155.659 62.1126 li
155.79 61.9226 li
156.501 61.1732 li
156.598 61.0877 li
157.435 60.4649 li
157.561 60.3895 li
158.451 59.9658 li
158.588 59.9165 li
159.707 59.63 li
159.848 59.608 li
160.943 59.5415 li
161.069 59.5445 li
162.313 59.6792 li
162.456 59.7091 li
163.406 60.0062 li
163.543 60.065 li
164.858 60.7883 li
164.984 60.8756 li
166.027 61.7687 li
166.095 61.8345 li
167.326 63.1913 li
167.367 63.2394 li
168.839 65.1634 li
168.884 65.2297 li
169.904 66.9083 li
169.938 66.9701 li
170.889 68.9281 li
170.915 68.9893 li
172.079 72.0501 li
172.078 72.047 li
174.391 78.0498 li
176.918 84.0396 li
180.552 91.8174 li
185.184 100.931 li
189.734 109.349 li
191.318 111.657 li
196.713 118.886 li
215.573 143.165 li
215.572 143.163 li
224.02 153.95 li
224.021 153.951 li
230.003 161.627 li
230.006 161.631 li
231.47 163.537 li
230.28 164.451 li
228.817 162.545 li
228.82 162.549 li
222.838 154.873 li
222.839 154.875 li
214.391 144.088 li
214.389 144.086 li
195.525 119.801 li
195.516 119.79 li
190.107 112.542 li
190.089 112.518 li
188.475 110.165 li
188.434 110.097 li
183.86 101.637 li
183.851 101.62 li
179.209 92.4865 li
179.198 92.4642 li
175.553 84.6617 li
175.541 84.6356 li
173.005 78.6222 li
172.996 78.6004 li
170.678 72.5864 li
170.677 72.5833 li
169.525 69.5533 li
168.604 67.6578 li
167.623 66.0426 li
166.194 64.1756 li
165.016 62.8775 li
164.067 62.0653 li
162.886 61.4153 li
162.078 61.1625 li
160.971 61.0425 li
160.01 61.1008 li
159.03 61.3515 li
158.271 61.7124 li
157.545 62.2527 li
156.958 62.8705 li
152.592 71.9072 li
143.478 90.7125 li
143.473 90.7224 li
138.292 101.022 li
138.286 101.033 li
131.301 114.327 li
131.299 114.329 li
125.632 125.027 li
121.878 132.579 li
117.673 141.762 li
114.664 148.701 li
113.529 151.621 li
112.826 154.09 li
112.437 156.211 li
112.257 158.144 li
112.249 160.294 li
112.422 162.456 li
112.806 164.879 li
116.64 178.64 li
116.643 178.649 li
118.422 185.372 li
118.428 185.396 li
119.149 188.526 li
119.162 188.599 li
119.469 190.995 li
119.475 191.07 li
119.526 192.988 li
119.523 193.08 li
119.389 194.473 li
119.369 194.586 li
118.997 196.051 li
118.968 196.141 li
118.348 197.713 li
118.311 197.791 li
116.558 201.064 li
115.473 203.154 li
114.35 205.738 li
108.335 223.333 li
107.605 225.837 li
107.158 228.397 li
106.788 232.528 li
106.651 238.461 li
106.763 241.52 li
107.037 244.358 li
110.554 261.577 li
114.058 277.429 li
115.562 283.553 li
117.08 288.941 li
118.316 292.733 li
122.867 303.54 li
122.872 303.552 li
124.646 307.979 li
124.658 308.01 li
126.572 313.468 li
126.581 313.495 li
128.325 319.157 li
128.333 319.183 li
129.401 323.171 li
129.409 323.205 li
130.381 327.646 li
130.389 327.687 li
131.09 332.019 li
131.096 332.059 li
131.959 340.177 li
131.96 340.182 li
132.402 344.593 li
133.885 352.76 li
133.889 352.781 li
134.324 355.634 li
134.33 355.685 li
135.065 364.654 li
135.066 364.674 li
135.837 378.658 li
135.838 378.691 li
135.912 385.461 li
135.911 385.497 li
135.417 398.919 li
135.948 412.902 li
135.948 412.929 li
135.951 415.701 li
135.948 415.776 li
135.532 419.914 li
135.528 419.948 li
134.739 425.322 li
134.732 425.362 li
134.101 428.484 li
134.084 428.551 li
133.398 430.826 li
133.361 430.925 li
130.416 437.268 li
128.232 442.097 li
128.235 442.091 li
126.765 445.413 li
126.743 445.457 li
124.931 448.924 li
124.902 448.975 li
120.229 456.425 li
120.222 456.435 li
114.846 464.693 li
114.833 464.711 li
111.631 469.322 li
111.613 469.348 li
108.71 473.171 li
108.69 473.196 li
105.911 476.543 li
105.889 476.568 li
102.196 480.632 li
102.17 480.659 li
98.9986 483.82 li
98.9452 483.868 li
86.3445 494.216 li
81.3182 498.53 li
81.3098 498.537 li
70.9011 507.205 li
68.7367 509.098 li
67.0742 510.882 li
65.7672 512.592 li
64.9397 513.943 li
64.0965 515.784 li
63.5974 517.318 li
63.1361 519.524 li
62.8558 522.003 li
62.7445 524.79 li
62.8092 526.539 li
62.9987 527.831 li
63.3284 528.805 li
63.754 529.515 li
64.3968 530.231 li
64.9616 530.692 li
66.1256 531.35 li
68.4033 532.295 li
67.8284 533.68 li
67.1357 533.393 li
.831846 .112703 1 .0183108 cmyk
f
67.1519 533.399 mo
62.9328 531.763 li
62.84 531.72 li
60.4443 530.391 li
60.3097 530.295 li
59.3712 529.461 li
59.2546 529.329 li
58.7038 528.54 li
58.6351 528.419 li
57.9138 526.818 li
57.8747 526.71 li
57.2273 524.369 li
57.2142 524.313 li
56.6786 521.583 li
56.6695 521.524 li
56.3639 518.883 li
56.3591 518.819 li
56.3001 516.836 li
56.3026 516.748 li
56.4424 515.151 li
56.4552 515.064 li
56.8912 512.963 li
56.9162 512.872 li
57.4743 511.248 li
57.5042 511.174 li
58.4356 509.181 li
58.4707 509.115 li
59.8359 506.824 li
59.8849 506.752 li
61.7294 504.345 li
61.7431 504.328 li
71.3153 492.574 li
71.3119 492.578 li
75.5159 487.337 li
75.5296 487.321 li
85.1398 476.022 li
87.6065 472.565 li
89.8661 468.999 li
92.2097 464.957 li
94.5004 460.533 li
96.6771 455.847 li
98.6439 451.129 li
105.552 433.234 li
106.8 429.007 li
108.826 421.47 li
108.829 421.461 li
110.736 414.717 li
110.975 412.558 li
111.004 410.34 li
110.807 406.545 li
110.359 400.693 li
109.834 397.627 li
106.732 382.473 li
106.723 382.417 li
104.653 366.115 li
103.44 359.251 li
102.323 353.655 li
99.1295 338.689 li
98.1343 335.488 li
96.931 331.613 li
96.9173 331.563 li
95.9255 327.366 li
95.9223 327.352 li
92.7401 312.549 li
91.6558 309.061 li
90.1243 304.755 li
87.9562 299.431 li
85.6829 294.38 li
83.4182 289.834 li
79.9492 283.592 li
79.9411 283.577 li
77.9173 279.733 li
77.8981 279.694 li
76.3064 276.196 li
76.289 276.154 li
74.321 271.034 li
74.3121 271.01 li
72.315 265.22 li
72.309 265.203 li
69.2776 255.65 li
69.2723 255.633 li
65.6806 243.279 li
65.6766 243.265 li
62.5339 231.593 li
62.5241 231.553 li
61.8733 228.451 li
61.8635 228.393 li
61.407 224.863 li
61.4024 224.814 li
61.2165 221.896 li
61.215 221.856 li
61.1701 217.475 li
61.1708 217.434 li
61.3299 213.816 li
61.3337 213.767 li
61.6825 210.603 li
61.6947 210.527 li
62.158 208.37 li
62.172 208.315 li
63.0002 205.513 li
63.0082 205.488 li
69.4894 186.129 li
69.5121 186.07 li
70.9017 182.853 li
70.933 182.789 li
73.1743 178.712 li
74.724 175.897 li
75.4136 174.149 li
75.789 172.517 li
75.9167 171.195 li
75.8635 169.427 li
75.4959 166.271 li
74.7832 162.709 li
73.5182 157.499 li
70.6125 146.994 li
68.525 139.45 li
68.5084 139.376 li
67.9686 136.197 li
67.9609 136.137 li
67.7823 134.102 li
67.7794 134.028 li
67.8025 131.835 li
67.8065 131.766 li
68.0201 129.695 li
68.0314 129.622 li
68.4579 127.533 li
68.4739 127.469 li
69.3825 124.421 li
69.403 124.361 li
70.4132 121.785 li
70.4257 121.755 li
73.1216 115.668 li
73.1296 115.651 li
78.295 104.751 li
78.3033 104.734 li
82.4244 96.5739 li
82.433 96.5574 li
86.9852 88.0765 li
86.9862 88.0744 li
101.925 60.4473 li
101.923 60.4509 li
117.653 30.9742 li
117.73 30.8581 li
118.293 30.1557 li
118.379 30.0654 li
119.198 29.3343 li
119.301 29.2572 li
120.243 28.6705 li
120.376 28.605 li
121.297 28.2594 li
121.415 28.2258 li
122.586 27.9946 li
122.725 27.9803 li
123.911 27.9706 li
124.037 27.9804 li
125.114 28.1558 li
125.302 28.2126 li
126.207 28.6215 li
126.318 28.684 li
127.18 29.2673 li
127.266 29.3348 li
128.165 30.1567 li
128.226 30.219 li
129.456 31.6369 li
129.499 31.6916 li
131.031 33.8308 li
131.073 33.896 li
132.117 35.7275 li
132.15 35.7922 li
133.003 37.6974 li
133.031 37.7693 li
133.94 40.5291 li
135.976 46.75 li
138.376 53.5661 li
141.454 61.52 li
145.562 71.3224 li
149.792 80.7818 li
151.272 83.8651 li
153.954 88.3717 li
158.588 95.7034 li
158.585 95.6992 li
167.875 110.186 li
167.878 110.191 li
172.182 117.018 li
172.178 117.013 li
185.51 137.784 li
185.507 137.78 li
187.757 141.228 li
193.259 149.086 li
192.03 149.947 li
186.521 142.078 li
186.507 142.058 li
184.25 138.599 li
184.247 138.595 li
170.916 117.823 li
170.913 117.818 li
166.609 110.991 li
166.613 110.996 li
157.322 96.5089 li
157.32 96.5048 li
152.681 89.1658 li
152.67 89.1487 li
149.965 84.6034 li
149.934 84.5443 li
148.435 81.4208 li
148.427 81.4024 li
144.19 71.9276 li
144.183 71.9114 li
140.067 62.0891 li
140.059 62.0701 li
136.972 54.0964 li
136.965 54.0747 li
134.558 47.2394 li
134.552 47.2235 li
132.515 40.9968 li
131.619 38.2753 li
130.796 36.4386 li
129.789 34.6723 li
128.3 32.5934 li
127.122 31.2348 li
126.294 30.4787 li
125.531 29.9621 li
124.774 29.6203 li
123.859 29.4712 li
122.807 29.4798 li
121.766 29.6855 li
120.973 29.9832 li
120.149 30.4961 li
119.424 31.1427 li
118.944 31.7419 li
103.246 61.1571 li
103.244 61.1607 li
88.3056 88.7878 li
88.3068 88.7858 li
83.759 97.2588 li
79.6461 105.402 li
74.4892 116.285 li
71.8035 122.348 li
70.8109 124.88 li
69.921 127.865 li
69.5084 129.886 li
69.3021 131.885 li
69.2797 134.007 li
69.4525 135.976 li
69.9809 139.087 li
72.0581 146.594 li
74.9673 157.112 li
74.9733 157.135 li
76.2445 162.371 li
76.251 162.4 li
76.9728 166.006 li
76.9823 166.067 li
77.3572 169.285 li
77.3619 169.349 li
77.4174 171.198 li
77.4143 171.293 li
77.2773 172.71 li
77.2617 172.806 li
76.8629 174.54 li
76.8297 174.647 li
76.1019 176.492 li
76.0613 176.578 li
74.4885 179.435 li
72.2646 183.481 li
70.9016 186.636 li
64.4348 205.951 li
63.6185 208.713 li
63.1693 210.805 li
62.8274 213.907 li
62.6703 217.48 li
62.7146 221.821 li
62.8977 224.695 li
63.3474 228.172 li
63.9879 231.224 li
67.123 242.867 li
70.7099 255.205 li
73.7358 264.74 li
75.7259 270.508 li
77.6811 275.595 li
79.2545 279.053 li
81.2641 282.87 li
84.7375 289.12 li
84.7533 289.15 li
87.0317 293.724 li
87.0444 293.751 li
89.3294 298.828 li
89.3401 298.853 li
91.5198 304.204 li
91.532 304.236 li
93.0742 308.573 li
93.0837 308.602 li
94.1824 312.136 li
94.1995 312.201 li
97.387 327.028 li
98.3712 331.193 li
99.5667 335.043 li
100.572 338.276 li
100.589 338.342 li
103.791 353.347 li
103.793 353.357 li
104.913 358.966 li
104.916 358.982 li
106.133 365.872 li
106.139 365.908 li
108.207 382.199 li
111.306 397.339 li
111.31 397.363 li
111.843 400.474 li
111.852 400.543 li
112.303 406.439 li
112.305 406.458 li
112.503 410.286 li
112.504 410.335 li
112.474 412.614 li
112.47 412.686 li
112.22 414.944 li
112.196 415.065 li
110.274 421.865 li
108.247 429.405 li
108.242 429.423 li
106.982 433.688 li
106.962 433.745 li
100.04 451.679 li
100.032 451.697 li
98.056 456.438 li
98.044 456.465 li
95.854 461.18 li
95.8399 461.209 li
93.5336 465.663 li
93.5165 465.694 li
91.1562 469.765 li
91.1409 469.79 li
88.8624 473.385 li
88.8394 473.42 li
86.3423 476.919 li
86.303 476.97 li
76.6792 488.284 li
72.4818 493.516 li
72.4784 493.521 li
62.913 505.267 li
61.1021 507.63 li
59.7785 509.85 li
58.88 511.773 li
58.3503 513.314 li
57.9328 515.325 li
57.8008 516.835 li
57.8576 518.742 li
58.1562 521.323 li
58.6806 523.997 li
59.3052 526.255 li
59.9738 527.739 li
60.4341 528.398 li
61.2446 529.119 li
63.5229 530.383 li
68.3935 532.272 li
67.8511 533.67 li
67.1519 533.399 li
.0993362 1 1 .024445 cmyk
f
2 lc
0 lj
48.375 557.9 mo
48.375 3.5 li
1 /0 /CSD get_res sepcs
1 sep
@
239.087 557.9 mo
239.087 3.5 li
@
48.375 557.9 mo
239.087 557.9 li
@
48.375 3.5 mo
239.087 3.5 li
@
229.987 550.9 mo
75.1996 550.9 li
74.4098 550.898 73.9123 550.706 73.6033 550.396 cv
73.2937 550.087 73.1015 549.59 73.0998 548.8 cv
73.0998 516.912 li
74.311 515.573 li
77.2749 512.867 li
80.9756 509.641 li
80.9873 509.631 li
96.848 495.206 li
106.082 487.319 li
106.14 487.264 li
108.862 484.385 li
108.897 484.346 li
110.987 481.803 li
111.009 481.774 li
115.274 476.039 li
115.297 476.006 li
117.816 472.21 li
117.837 472.176 li
118.125 471.687 li
229.987 471.687 li
230.777 471.689 231.274 471.882 231.584 472.191 cv
231.893 472.5 232.085 472.998 232.087 473.787 cv
232.087 548.8 li
232.085 549.59 231.893 550.087 231.584 550.396 cv
231.274 550.706 230.777 550.898 229.987 550.9 cv
73.0998 514.676 mo
73.0998 508.751 li
73.1473 508.704 li
76.1429 506.167 li
79.4465 503.445 li
79.463 503.431 li
92.7647 491.809 li
97.5373 488.042 li
97.5387 488.041 li
102.709 483.942 li
102.735 483.92 li
104.704 482.208 li
104.737 482.178 li
107.038 479.925 li
107.073 479.888 li
109.197 477.508 li
109.222 477.478 li
112.787 473.039 li
112.81 473.01 li
113.769 471.687 li
116.362 471.687 li
114.058 475.16 li
109.817 480.865 li
107.755 483.373 li
105.077 486.205 li
95.8649 494.073 li
95.8475 494.089 li
79.984 508.516 li
76.283 511.742 li
76.2701 511.753 li
73.2732 514.49 li
73.2227 514.54 li
73.0998 514.676 li
73.0998 506.779 mo
73.0998 505.374 li
81.3098 498.537 li
81.3182 498.53 li
86.3445 494.216 li
98.9452 483.868 li
98.9986 483.82 li
102.17 480.659 li
102.196 480.632 li
105.889 476.568 li
105.911 476.543 li
108.69 473.196 li
108.71 473.171 li
109.836 471.687 li
111.916 471.687 li
111.606 472.114 li
108.064 476.524 li
105.97 478.871 li
103.703 481.091 li
101.764 482.777 li
96.6068 486.866 li
96.608 486.865 li
91.8207 490.643 li
91.7918 490.667 li
78.4842 502.294 li
75.1855 505.012 li
75.1778 505.019 li
73.0998 506.779 li
0 0 0 0 cmyk
f
73.0998 508.751 mo
73.0998 506.779 li
75.1778 505.019 li
75.1855 505.012 li
78.4842 502.294 li
91.7918 490.667 li
91.8207 490.643 li
96.608 486.865 li
96.6068 486.866 li
101.764 482.777 li
103.703 481.091 li
105.97 478.871 li
108.064 476.524 li
111.606 472.114 li
111.916 471.687 li
113.769 471.687 li
112.81 473.01 li
112.787 473.039 li
109.222 477.478 li
109.197 477.508 li
107.073 479.888 li
107.038 479.925 li
104.737 482.178 li
104.704 482.208 li
102.735 483.92 li
102.709 483.942 li
97.5387 488.041 li
97.5373 488.042 li
92.7647 491.809 li
79.463 503.431 li
79.4465 503.445 li
76.1429 506.167 li
73.1473 508.704 li
73.0998 508.751 li
.169497 .0385138 .0237736 0 cmyk
f
73.0998 516.912 mo
73.0998 514.676 li
73.2227 514.54 li
73.2732 514.49 li
76.2701 511.753 li
76.283 511.742 li
79.984 508.516 li
95.8475 494.089 li
95.8649 494.073 li
105.077 486.205 li
107.755 483.373 li
109.817 480.865 li
114.058 475.16 li
116.362 471.687 li
118.125 471.687 li
117.837 472.176 li
117.816 472.21 li
115.297 476.006 li
115.274 476.039 li
111.009 481.774 li
110.987 481.803 li
108.897 484.346 li
108.862 484.385 li
106.14 487.264 li
106.082 487.319 li
96.848 495.206 li
80.9873 509.631 li
80.9756 509.641 li
77.2749 512.867 li
74.311 515.573 li
73.0998 516.912 li
0 .110109 .174868 0 cmyk
f
73.0998 503.422 mo
73.0998 492.746 li
76.6792 488.284 li
86.303 476.97 li
86.3423 476.919 li
88.8394 473.42 li
88.8624 473.385 li
89.9384 471.687 li
107.953 471.687 li
107.525 472.251 li
104.768 475.571 li
101.098 479.61 li
97.9652 482.732 li
85.3859 493.062 li
85.3734 493.073 li
80.3459 497.388 li
73.0998 503.422 li
73.0998 490.349 mo
73.0998 473.787 li
73.1015 472.998 73.2937 472.5 73.6033 472.191 cv
73.9123 471.882 74.4098 471.689 75.1996 471.687 cv
88.1627 471.687 li
87.6065 472.565 li
85.1398 476.022 li
75.5296 487.321 li
75.5159 487.337 li
73.0998 490.349 li
0 0 0 0 cmyk
f
73.0998 505.374 mo
73.0998 503.422 li
80.3459 497.388 li
85.3734 493.073 li
85.3859 493.062 li
97.9652 482.732 li
101.098 479.61 li
104.768 475.571 li
107.525 472.251 li
107.953 471.687 li
109.836 471.687 li
108.71 473.171 li
108.69 473.196 li
105.911 476.543 li
105.889 476.568 li
102.196 480.632 li
102.17 480.659 li
98.9986 483.82 li
98.9452 483.868 li
86.3445 494.216 li
81.3182 498.53 li
81.3098 498.537 li
73.0998 505.374 li
.16849 0 .201083 0 cmyk
f
73.0998 492.746 mo
73.0998 490.349 li
75.5159 487.337 li
75.5296 487.321 li
85.1398 476.022 li
87.6065 472.565 li
88.1627 471.687 li
89.9384 471.687 li
88.8624 473.385 li
88.8394 473.42 li
86.3423 476.919 li
86.303 476.97 li
76.6792 488.284 li
73.0998 492.746 li
.0145876 .194461 .0950942 0 cmyk
f
229.998 551.9 mo
229.995 551.9 229.991 551.9 229.987 551.9 cv
75.1996 551.9 li
75.1959 551.9 75.1921 551.9 75.1884 551.9 cv
74.2498 551.9 73.4515 551.659 72.8962 551.104 cv
72.3389 550.546 72.0979 549.743 72.0996 548.8 cv
72.0996 518.176 li
72.7787 517.267 li
73.0998 516.912 li
73.0998 548.8 li
73.1015 549.59 73.2937 550.087 73.6033 550.396 cv
73.9123 550.706 74.4098 550.898 75.1996 550.9 cv
75.1996 550.9 li
229.987 550.9 li
230.777 550.898 231.274 550.706 231.584 550.396 cv
231.893 550.087 232.085 549.59 232.087 548.8 cv
232.087 473.787 li
232.085 472.998 231.893 472.5 231.584 472.191 cv
231.274 471.882 230.777 471.689 229.987 471.687 cv
118.125 471.687 li
118.714 470.688 li
229.987 470.688 li
229.991 470.688 229.994 470.688 229.998 470.688 cv
230.937 470.688 231.735 470.929 232.291 471.484 cv
232.848 472.042 233.089 472.844 233.087 473.787 cv
233.087 548.8 li
233.089 549.743 232.848 550.546 232.291 551.104 cv
231.735 551.658 230.937 551.9 229.998 551.9 cv
72.0996 515.782 mo
72.0996 509.741 li
73.0998 508.751 li
73.0998 514.676 li
72.0996 515.782 li
72.0996 507.631 mo
72.0996 506.207 li
73.0998 505.374 li
73.0998 506.779 li
72.1557 507.578 li
72.1129 507.617 li
72.0996 507.631 li
116.362 471.687 mo
113.769 471.687 li
114.495 470.688 li
116.973 470.688 li
116.555 471.397 li
116.362 471.687 li
111.916 471.687 mo
109.836 471.687 li
110.595 470.688 li
112.641 470.688 li
111.916 471.687 li
.159121 .120455 .125338 0 cmyk
f
72.0996 509.741 mo
72.0996 507.631 li
72.1129 507.617 li
72.1557 507.578 li
73.0998 506.779 li
73.0998 508.751 li
72.0996 509.741 li
113.769 471.687 mo
111.916 471.687 li
112.641 470.688 li
114.495 470.688 li
113.769 471.687 li
.35288 .190768 .166232 0 cmyk
f
72.0996 518.176 mo
72.0996 515.782 li
73.0998 514.676 li
73.0998 516.912 li
72.7787 517.267 li
72.0996 518.176 li
118.125 471.687 mo
116.362 471.687 li
116.555 471.397 li
116.973 470.688 li
118.714 470.688 li
118.125 471.687 li
.171633 .246342 .349737 0 cmyk
f
72.0996 504.255 mo
72.0996 493.986 li
72.4784 493.521 li
72.4818 493.516 li
73.0998 492.746 li
73.0998 503.422 li
72.0996 504.255 li
72.0996 491.596 mo
72.0996 473.787 li
72.0979 472.844 72.3389 472.042 72.8962 471.484 cv
73.4516 470.929 74.2503 470.688 75.1892 470.688 cv
75.1927 470.688 75.1961 470.688 75.1996 470.688 cv
88.7963 470.688 li
88.1627 471.687 li
75.1996 471.687 li
74.4098 471.689 73.9123 471.882 73.6033 472.191 cv
73.2937 472.5 73.1015 472.998 73.0998 473.787 cv
73.0998 490.349 li
72.0996 491.596 li
.159121 .120455 .125338 0 cmyk
f
72.0996 506.207 mo
72.0996 504.255 li
73.0998 503.422 li
73.0998 505.374 li
72.0996 506.207 li
.351171 .135286 .36347 0 cmyk
f
72.0996 493.986 mo
72.0996 491.596 li
73.0998 490.349 li
73.0998 492.746 li
72.4818 493.516 li
72.4784 493.521 li
72.0996 493.986 li
.195285 .345281 .269322 0 cmyk
f
107.953 471.687 mo
89.9384 471.687 li
90.5721 470.688 li
108.712 470.688 li
107.953 471.687 li
.159121 .120455 .125338 0 cmyk
f
109.836 471.687 mo
107.953 471.687 li
108.712 470.688 li
110.595 470.688 li
109.836 471.687 li
.351171 .135286 .36347 0 cmyk
f
89.9384 471.687 mo
88.1627 471.687 li
88.7963 470.688 li
90.5721 470.688 li
89.9384 471.687 li
.195285 .345281 .269322 0 cmyk
f
1.5 lw
1 lj
77.7997 481.713 mo
103.8 481.713 li
.906126 .514977 .0511788 .00137331 cmyk
@
121.935 484.911 mo
121.935 482.363 li
119.842 482.363 li
119.842 481.31 li
123.209 481.31 li
123.209 485.379 li
122.715 485.743 122.169 486.003 121.571 486.172 cv
120.973 486.341 120.336 486.432 119.66 486.432 cv
118.178 486.432 117.008 486.003 116.176 485.145 cv
115.344 484.286 114.928 483.078 114.928 481.531 cv
114.928 479.997 115.344 478.788 116.176 477.917 cv
117.008 477.059 118.178 476.617 119.66 476.617 cv
120.271 476.617 120.856 476.695 121.415 476.851 cv
121.974 477.007 122.494 477.228 122.962 477.514 cv
122.962 478.879 li
122.481 478.489 121.974 478.19 121.441 477.982 cv
120.908 477.773 120.349 477.67 119.764 477.67 cv
118.594 477.67 117.723 477.995 117.151 478.645 cv
116.566 479.295 116.28 480.257 116.28 481.531 cv
116.28 482.818 116.566 483.78 117.151 484.43 cv
117.723 485.079 118.594 485.392 119.764 485.392 cv
120.206 485.392 120.609 485.353 120.973 485.275 cv
121.337 485.197 121.649 485.079 121.935 484.911 cv
1 /0 /CSD get_res sepcs
1 sep
f
129.618 480.243 mo
129.488 480.166 129.345 480.114 129.189 480.075 cv
129.033 480.049 128.864 480.023 128.682 480.023 cv
128.019 480.023 127.512 480.243 127.161 480.673 cv
126.797 481.102 126.628 481.713 126.628 482.519 cv
126.628 486.263 li
125.458 486.263 li
125.458 479.152 li
126.628 479.152 li
126.628 480.257 li
126.862 479.828 127.187 479.503 127.577 479.295 cv
127.967 479.087 128.448 478.983 129.02 478.983 cv
129.098 478.983 129.189 478.996 129.293 478.996 cv
129.384 479.009 129.488 479.022 129.618 479.048 cv
129.618 480.243 li
f
133.596 479.971 mo
132.972 479.971 132.478 480.217 132.114 480.712 cv
131.75 481.206 131.568 481.868 131.568 482.714 cv
131.568 483.572 131.737 484.234 132.101 484.729 cv
132.465 485.223 132.959 485.457 133.596 485.457 cv
134.22 485.457 134.714 485.223 135.078 484.729 cv
135.442 484.234 135.624 483.572 135.624 482.714 cv
135.624 481.882 135.442 481.206 135.078 480.712 cv
134.714 480.217 134.22 479.971 133.596 479.971 cv
133.596 478.983 mo
134.61 478.983 135.403 479.321 135.988 479.971 cv
136.56 480.634 136.859 481.544 136.859 482.714 cv
136.859 483.884 136.56 484.794 135.988 485.444 cv
135.403 486.107 134.61 486.432 133.596 486.432 cv
132.569 486.432 131.763 486.107 131.191 485.444 cv
130.619 484.794 130.333 483.884 130.333 482.714 cv
130.333 481.544 130.619 480.634 131.191 479.971 cv
131.763 479.321 132.569 478.983 133.596 478.983 cv
f
138.679 483.454 mo
138.679 479.152 li
139.849 479.152 li
139.849 483.416 li
139.849 484.092 139.979 484.586 140.239 484.924 cv
140.499 485.262 140.889 485.431 141.422 485.431 cv
142.046 485.431 142.553 485.236 142.917 484.833 cv
143.281 484.43 143.463 483.884 143.463 483.182 cv
143.463 479.152 li
144.633 479.152 li
144.633 486.263 li
143.463 486.263 li
143.463 485.171 li
143.177 485.613 142.839 485.924 142.475 486.133 cv
142.098 486.328 141.669 486.432 141.175 486.432 cv
140.356 486.432 139.732 486.185 139.316 485.678 cv
138.887 485.184 138.679 484.443 138.679 483.454 cv
141.617 478.983 mo
141.617 478.983 li
f
152.953 481.973 mo
152.953 486.263 li
151.783 486.263 li
151.783 482.012 li
151.783 481.336 151.64 480.842 151.38 480.504 cv
151.12 480.166 150.73 479.997 150.21 479.997 cv
149.573 479.997 149.079 480.204 148.715 480.608 cv
148.351 481.01 148.169 481.557 148.169 482.246 cv
148.169 486.263 li
146.999 486.263 li
146.999 479.152 li
148.169 479.152 li
148.169 480.257 li
148.442 479.841 148.767 479.516 149.157 479.308 cv
149.534 479.1 149.976 478.983 150.47 478.983 cv
151.276 478.983 151.9 479.243 152.316 479.75 cv
152.732 480.257 152.953 480.997 152.953 481.973 cv
f
159.96 480.23 mo
159.96 476.383 li
161.13 476.383 li
161.13 486.263 li
159.96 486.263 li
159.96 485.197 li
159.713 485.626 159.401 485.938 159.024 486.133 cv
158.647 486.328 158.205 486.432 157.685 486.432 cv
156.827 486.432 156.125 486.094 155.579 485.418 cv
155.033 484.742 154.773 483.832 154.773 482.714 cv
154.773 481.596 155.033 480.699 155.579 480.01 cv
156.125 479.334 156.827 478.983 157.685 478.983 cv
158.205 478.983 158.647 479.087 159.024 479.295 cv
159.401 479.503 159.713 479.815 159.96 480.23 cv
155.982 482.714 mo
155.982 483.572 156.151 484.247 156.502 484.742 cv
156.853 485.236 157.347 485.47 157.971 485.47 cv
158.582 485.47 159.063 485.236 159.427 484.742 cv
159.778 484.247 159.96 483.572 159.96 482.714 cv
159.96 481.855 159.778 481.193 159.427 480.699 cv
159.063 480.204 158.582 479.958 157.971 479.958 cv
157.347 479.958 156.853 480.204 156.502 480.699 cv
156.151 481.193 155.982 481.855 155.982 482.714 cv
f
166.42 476.786 mo
174.428 476.786 li
174.428 477.865 li
171.061 477.865 li
171.061 486.263 li
169.774 486.263 li
169.774 477.865 li
166.42 477.865 li
166.42 476.786 li
f
179.732 480.243 mo
179.602 480.166 179.459 480.114 179.303 480.075 cv
179.147 480.049 178.978 480.023 178.796 480.023 cv
178.133 480.023 177.626 480.243 177.275 480.673 cv
176.911 481.102 176.742 481.713 176.742 482.519 cv
176.742 486.263 li
175.572 486.263 li
175.572 479.152 li
176.742 479.152 li
176.742 480.257 li
176.976 479.828 177.301 479.503 177.691 479.295 cv
178.081 479.087 178.562 478.983 179.134 478.983 cv
179.212 478.983 179.303 478.996 179.407 478.996 cv
179.498 479.009 179.602 479.022 179.732 479.048 cv
179.732 480.243 li
f
180.837 483.454 mo
180.837 479.152 li
182.007 479.152 li
182.007 483.416 li
182.007 484.092 182.137 484.586 182.397 484.924 cv
182.657 485.262 183.047 485.431 183.58 485.431 cv
184.204 485.431 184.711 485.236 185.075 484.833 cv
185.439 484.43 185.621 483.884 185.621 483.182 cv
185.621 479.152 li
186.791 479.152 li
186.791 486.263 li
185.621 486.263 li
185.621 485.171 li
185.335 485.613 184.997 485.924 184.633 486.133 cv
184.256 486.328 183.827 486.432 183.333 486.432 cv
182.514 486.432 181.89 486.185 181.474 485.678 cv
181.045 485.184 180.837 484.443 180.837 483.454 cv
183.775 478.983 mo
183.775 478.983 li
f
190.353 477.137 mo
190.353 479.152 li
192.758 479.152 li
192.758 480.062 li
190.353 480.062 li
190.353 483.923 li
190.353 484.508 190.431 484.885 190.587 485.041 cv
190.743 485.21 191.068 485.288 191.562 485.288 cv
192.758 485.288 li
192.758 486.263 li
191.562 486.263 li
190.652 486.263 190.028 486.094 189.69 485.756 cv
189.352 485.418 189.183 484.807 189.183 483.923 cv
189.183 480.062 li
188.325 480.062 li
188.325 479.152 li
189.183 479.152 li
189.183 477.137 li
190.353 477.137 li
f
200.207 481.973 mo
200.207 486.263 li
199.037 486.263 li
199.037 482.012 li
199.037 481.336 198.894 480.842 198.634 480.504 cv
198.374 480.166 197.984 479.997 197.464 479.997 cv
196.827 479.997 196.333 480.204 195.969 480.608 cv
195.605 481.01 195.423 481.557 195.423 482.246 cv
195.423 486.263 li
194.253 486.263 li
194.253 476.383 li
195.423 476.383 li
195.423 480.257 li
195.696 479.841 196.021 479.516 196.411 479.308 cv
196.788 479.1 197.23 478.983 197.724 478.983 cv
198.53 478.983 199.154 479.243 199.57 479.75 cv
199.986 480.257 200.207 480.997 200.207 481.973 cv
f
77.7997 500.791 mo
103.8 500.791 li
0 .642573 1 0 cmyk
@
119.322 496.735 mo
118.386 496.735 117.645 497.086 117.099 497.775 cv
116.553 498.477 116.28 499.413 116.28 500.609 cv
116.28 501.805 116.553 502.754 117.099 503.443 cv
117.645 504.145 118.386 504.483 119.322 504.483 cv
120.245 504.483 120.986 504.145 121.532 503.443 cv
122.078 502.754 122.351 501.805 122.351 500.609 cv
122.351 499.413 122.078 498.477 121.532 497.775 cv
120.986 497.086 120.245 496.735 119.322 496.735 cv
119.322 495.695 mo
120.648 495.695 121.701 496.15 122.507 497.034 cv
123.3 497.918 123.703 499.114 123.703 500.609 cv
123.703 502.117 123.3 503.3 122.507 504.184 cv
121.701 505.068 120.648 505.51 119.322 505.51 cv
117.983 505.51 116.917 505.068 116.124 504.184 cv
115.318 503.3 114.928 502.117 114.928 500.609 cv
114.928 499.114 115.318 497.918 116.124 497.034 cv
116.917 496.15 117.983 495.695 119.322 495.695 cv
1 /0 /CSD get_res sepcs
1 sep
f
130.203 500.895 mo
130.476 500.999 130.749 501.194 131.009 501.493 cv
131.269 501.805 131.529 502.221 131.789 502.754 cv
133.089 505.341 li
131.711 505.341 li
130.502 502.91 li
130.19 502.286 129.878 501.857 129.592 501.649 cv
129.293 501.441 128.89 501.337 128.383 501.337 cv
126.992 501.337 li
126.992 505.341 li
125.705 505.341 li
125.705 495.864 li
128.604 495.864 li
129.683 495.864 130.489 496.098 131.022 496.54 cv
131.555 496.995 131.828 497.684 131.828 498.594 cv
131.828 499.192 131.685 499.699 131.412 500.089 cv
131.126 500.479 130.723 500.752 130.203 500.895 cv
126.992 496.917 mo
126.992 500.284 li
128.604 500.284 li
129.215 500.284 129.683 500.141 129.995 499.855 cv
130.307 499.569 130.476 499.153 130.476 498.594 cv
130.476 498.048 130.307 497.632 129.995 497.346 cv
129.683 497.06 129.215 496.917 128.604 496.917 cv
126.992 496.917 li
f
136.027 500.817 mo
136.027 504.288 li
138.081 504.288 li
138.77 504.288 139.277 504.145 139.615 503.859 cv
139.94 503.573 140.109 503.144 140.109 502.546 cv
140.109 501.961 139.94 501.532 139.615 501.246 cv
139.277 500.96 138.77 500.817 138.081 500.817 cv
136.027 500.817 li
136.027 496.917 mo
136.027 499.777 li
137.925 499.777 li
138.549 499.777 139.004 499.66 139.316 499.426 cv
139.628 499.192 139.784 498.841 139.784 498.347 cv
139.784 497.879 139.628 497.515 139.316 497.281 cv
139.004 497.047 138.549 496.917 137.925 496.917 cv
136.027 496.917 li
134.74 495.864 mo
138.016 495.864 li
138.991 495.864 139.745 496.072 140.278 496.475 cv
140.798 496.891 141.071 497.463 141.071 498.204 cv
141.071 498.789 140.928 499.257 140.655 499.595 cv
140.382 499.933 139.992 500.154 139.472 500.232 cv
140.096 500.375 140.59 500.661 140.941 501.09 cv
141.279 501.519 141.461 502.052 141.461 502.689 cv
141.461 503.547 141.162 504.197 140.59 504.652 cv
140.018 505.12 139.199 505.341 138.146 505.341 cv
134.74 505.341 li
134.74 495.864 li
f
143.021 501.259 mo
146.44 501.259 li
146.44 502.299 li
143.021 502.299 li
143.021 501.259 li
f
154.032 496.176 mo
154.032 497.424 li
153.538 497.19 153.083 497.021 152.654 496.904 cv
152.212 496.8 151.796 496.735 151.406 496.735 cv
150.704 496.735 150.158 496.878 149.781 497.138 cv
149.404 497.411 149.222 497.801 149.222 498.295 cv
149.222 498.711 149.339 499.036 149.599 499.244 cv
149.846 499.465 150.327 499.634 151.029 499.764 cv
151.809 499.92 li
152.758 500.102 153.46 500.427 153.915 500.882 cv
154.37 501.35 154.604 501.961 154.604 502.728 cv
154.604 503.651 154.292 504.34 153.681 504.808 cv
153.057 505.276 152.16 505.51 150.977 505.51 cv
150.522 505.51 150.041 505.458 149.534 505.367 cv
149.027 505.276 148.507 505.133 147.974 504.925 cv
147.974 503.599 li
148.494 503.898 149.001 504.119 149.495 504.262 cv
149.989 504.418 150.483 504.483 150.977 504.483 cv
151.705 504.483 152.264 504.34 152.667 504.054 cv
153.057 503.768 153.265 503.365 153.265 502.819 cv
153.265 502.351 153.122 501.987 152.836 501.727 cv
152.55 501.467 152.082 501.272 151.432 501.142 cv
150.652 500.986 li
149.69 500.804 149.001 500.505 148.572 500.089 cv
148.143 499.686 147.935 499.127 147.935 498.399 cv
147.935 497.567 148.221 496.904 148.819 496.423 cv
149.404 495.942 150.223 495.695 151.263 495.695 cv
151.705 495.695 152.147 495.734 152.615 495.812 cv
153.07 495.89 153.538 496.02 154.032 496.176 cv
f
156.606 495.864 mo
157.893 495.864 li
157.893 504.262 li
162.508 504.262 li
162.508 505.341 li
156.606 505.341 li
156.606 495.864 li
f
167.019 497.125 mo
165.277 501.844 li
168.761 501.844 li
167.019 497.125 li
166.291 495.864 mo
167.747 495.864 li
171.361 505.341 li
170.022 505.341 li
169.164 502.91 li
164.887 502.91 li
164.029 505.341 li
162.677 505.341 li
166.291 495.864 li
f
172.739 495.864 mo
174.65 495.864 li
177.068 502.312 li
179.499 495.864 li
181.41 495.864 li
181.41 505.341 li
180.162 505.341 li
180.162 497.021 li
177.718 503.521 li
176.431 503.521 li
173.987 497.021 li
173.987 505.341 li
172.739 505.341 li
172.739 495.864 li
f
77.7997 519.869 mo
103.8 519.869 li
.831846 .112703 1 .0183108 cmyk
@
119.322 515.813 mo
118.386 515.813 117.645 516.164 117.099 516.853 cv
116.553 517.555 116.28 518.491 116.28 519.687 cv
116.28 520.883 116.553 521.832 117.099 522.521 cv
117.645 523.223 118.386 523.561 119.322 523.561 cv
120.245 523.561 120.986 523.223 121.532 522.521 cv
122.078 521.832 122.351 520.883 122.351 519.687 cv
122.351 518.491 122.078 517.555 121.532 516.853 cv
120.986 516.164 120.245 515.813 119.322 515.813 cv
119.322 514.773 mo
120.648 514.773 121.701 515.228 122.507 516.112 cv
123.3 516.996 123.703 518.192 123.703 519.687 cv
123.703 521.195 123.3 522.378 122.507 523.262 cv
121.701 524.146 120.648 524.588 119.322 524.588 cv
117.983 524.588 116.917 524.146 116.124 523.262 cv
115.318 522.378 114.928 521.195 114.928 519.687 cv
114.928 518.192 115.318 516.996 116.124 516.112 cv
116.917 515.228 117.983 514.773 119.322 514.773 cv
1 /0 /CSD get_res sepcs
1 sep
f
125.536 521.611 mo
125.536 517.308 li
126.706 517.308 li
126.706 521.572 li
126.706 522.248 126.836 522.742 127.096 523.08 cv
127.356 523.418 127.746 523.587 128.279 523.587 cv
128.903 523.587 129.41 523.392 129.774 522.989 cv
130.138 522.586 130.32 522.04 130.32 521.338 cv
130.32 517.308 li
131.49 517.308 li
131.49 524.419 li
130.32 524.419 li
130.32 523.327 li
130.034 523.769 129.696 524.081 129.332 524.289 cv
128.955 524.484 128.526 524.588 128.032 524.588 cv
127.213 524.588 126.589 524.341 126.173 523.834 cv
125.744 523.34 125.536 522.599 125.536 521.611 cv
128.474 517.139 mo
128.474 517.139 li
f
138.016 518.4 mo
137.886 518.322 137.743 518.27 137.587 518.231 cv
137.431 518.205 137.262 518.179 137.08 518.179 cv
136.417 518.179 135.91 518.4 135.559 518.829 cv
135.195 519.258 135.026 519.869 135.026 520.675 cv
135.026 524.419 li
133.856 524.419 li
133.856 517.308 li
135.026 517.308 li
135.026 518.413 li
135.26 517.984 135.585 517.659 135.975 517.451 cv
136.365 517.243 136.846 517.139 137.418 517.139 cv
137.496 517.139 137.587 517.152 137.691 517.152 cv
137.782 517.165 137.886 517.178 138.016 517.204 cv
138.016 518.4 li
f
143.775 517.516 mo
143.775 518.621 li
143.437 518.465 143.099 518.335 142.748 518.244 cv
142.384 518.166 142.02 518.114 141.643 518.114 cv
141.058 518.114 140.616 518.205 140.33 518.387 cv
140.044 518.569 139.901 518.829 139.901 519.18 cv
139.901 519.453 140.005 519.661 140.213 519.817 cv
140.421 519.973 140.837 520.129 141.461 520.259 cv
141.864 520.35 li
142.696 520.532 143.281 520.792 143.632 521.104 cv
143.97 521.429 144.152 521.884 144.152 522.456 cv
144.152 523.119 143.892 523.639 143.372 524.016 cv
142.852 524.406 142.124 524.588 141.214 524.588 cv
140.824 524.588 140.434 524.549 140.018 524.484 cv
139.602 524.419 139.173 524.315 138.718 524.159 cv
138.718 522.95 li
139.147 523.184 139.576 523.353 139.992 523.457 cv
140.408 523.574 140.824 523.626 141.24 523.626 cv
141.786 523.626 142.215 523.535 142.514 523.353 cv
142.8 523.171 142.956 522.898 142.956 522.547 cv
142.956 522.235 142.839 521.988 142.631 521.819 cv
142.423 521.65 141.955 521.481 141.227 521.325 cv
140.824 521.234 li
140.096 521.078 139.563 520.844 139.251 520.532 cv
138.926 520.22 138.77 519.791 138.77 519.232 cv
138.77 518.569 139.004 518.049 139.472 517.685 cv
139.94 517.321 140.616 517.139 141.5 517.139 cv
141.929 517.139 142.332 517.178 142.722 517.243 cv
143.099 517.308 143.45 517.399 143.775 517.516 cv
f
148.819 514.552 mo
148.247 515.54 147.831 516.502 147.558 517.451 cv
147.272 518.4 147.142 519.362 147.142 520.337 cv
147.142 521.325 147.272 522.287 147.558 523.236 cv
147.831 524.198 148.247 525.147 148.819 526.122 cv
147.805 526.122 li
147.168 525.121 146.687 524.159 146.375 523.197 cv
146.063 522.235 145.907 521.286 145.907 520.337 cv
145.907 519.401 146.063 518.452 146.375 517.49 cv
146.687 516.528 147.155 515.553 147.805 514.552 cv
148.819 514.552 li
f
151.133 514.942 mo
156.58 514.942 li
156.58 516.021 li
152.42 516.021 li
152.42 518.816 li
156.177 518.816 li
156.177 519.895 li
152.42 519.895 li
152.42 524.419 li
151.133 524.419 li
151.133 514.942 li
f
158.556 517.308 mo
159.726 517.308 li
159.726 524.419 li
158.556 524.419 li
158.556 517.308 li
158.556 514.539 mo
159.726 514.539 li
159.726 516.021 li
158.556 516.021 li
158.556 514.539 li
f
168.085 517.308 mo
165.511 520.766 li
168.215 524.419 li
166.837 524.419 li
164.77 521.624 li
162.703 524.419 li
161.325 524.419 li
164.081 520.701 li
161.559 517.308 li
162.937 517.308 li
164.822 519.843 li
166.707 517.308 li
168.085 517.308 li
f
175.95 520.571 mo
175.95 521.143 li
170.581 521.143 li
170.633 521.949 170.867 522.573 171.309 522.989 cv
171.738 523.405 172.336 523.613 173.116 523.613 cv
173.558 523.613 174 523.561 174.416 523.457 cv
174.832 523.353 175.261 523.184 175.677 522.95 cv
175.677 524.055 li
175.261 524.237 174.832 524.38 174.39 524.458 cv
173.948 524.536 173.493 524.588 173.051 524.588 cv
171.907 524.588 171.01 524.263 170.347 523.613 cv
169.684 522.963 169.359 522.066 169.359 520.935 cv
169.359 519.778 169.671 518.855 170.295 518.166 cv
170.919 517.49 171.777 517.139 172.843 517.139 cv
173.805 517.139 174.559 517.451 175.118 518.062 cv
175.664 518.686 175.95 519.518 175.95 520.571 cv
174.78 520.233 mo
174.767 519.596 174.585 519.089 174.247 518.699 cv
173.896 518.322 173.428 518.127 172.856 518.127 cv
172.206 518.127 171.686 518.322 171.296 518.686 cv
170.906 519.05 170.672 519.57 170.62 520.233 cv
174.78 520.233 li
f
182.541 518.387 mo
182.541 514.539 li
183.711 514.539 li
183.711 524.419 li
182.541 524.419 li
182.541 523.353 li
182.294 523.782 181.982 524.094 181.605 524.289 cv
181.228 524.484 180.786 524.588 180.266 524.588 cv
179.408 524.588 178.706 524.25 178.16 523.574 cv
177.614 522.898 177.354 521.988 177.354 520.87 cv
177.354 519.752 177.614 518.855 178.16 518.166 cv
178.706 517.49 179.408 517.139 180.266 517.139 cv
180.786 517.139 181.228 517.243 181.605 517.451 cv
181.982 517.659 182.294 517.971 182.541 518.387 cv
178.563 520.87 mo
178.563 521.728 178.732 522.404 179.083 522.898 cv
179.434 523.392 179.928 523.626 180.552 523.626 cv
181.163 523.626 181.644 523.392 182.008 522.898 cv
182.359 522.404 182.541 521.728 182.541 520.87 cv
182.541 520.012 182.359 519.349 182.008 518.855 cv
181.644 518.361 181.163 518.114 180.552 518.114 cv
179.928 518.114 179.434 518.361 179.083 518.855 cv
178.732 519.349 178.563 520.012 178.563 520.87 cv
f
185.531 520.337 mo
188.95 520.337 li
188.95 521.377 li
185.531 521.377 li
185.531 520.337 li
f
192.147 515.995 mo
192.147 519.557 li
193.759 519.557 li
194.357 519.557 194.812 519.414 195.137 519.102 cv
195.462 518.79 195.631 518.348 195.631 517.776 cv
195.631 517.204 195.462 516.775 195.137 516.463 cv
194.812 516.151 194.357 515.995 193.759 515.995 cv
192.147 515.995 li
190.86 514.942 mo
193.759 514.942 li
194.812 514.942 195.618 515.189 196.164 515.67 cv
196.71 516.151 196.983 516.853 196.983 517.776 cv
196.983 518.712 196.71 519.427 196.164 519.895 cv
195.618 520.376 194.812 520.61 193.759 520.61 cv
192.147 520.61 li
192.147 524.419 li
190.86 524.419 li
190.86 514.942 li
f
201.403 518.127 mo
200.779 518.127 200.285 518.374 199.921 518.868 cv
199.557 519.362 199.375 520.025 199.375 520.87 cv
199.375 521.728 199.544 522.391 199.908 522.885 cv
200.272 523.379 200.766 523.613 201.403 523.613 cv
202.027 523.613 202.521 523.379 202.885 522.885 cv
203.249 522.391 203.431 521.728 203.431 520.87 cv
203.431 520.038 203.249 519.362 202.885 518.868 cv
202.521 518.374 202.027 518.127 201.403 518.127 cv
201.403 517.139 mo
202.417 517.139 203.21 517.477 203.795 518.127 cv
204.367 518.79 204.666 519.7 204.666 520.87 cv
204.666 522.04 204.367 522.95 203.795 523.6 cv
203.21 524.263 202.417 524.588 201.403 524.588 cv
200.376 524.588 199.57 524.263 198.998 523.6 cv
198.426 522.95 198.14 522.04 198.14 520.87 cv
198.14 519.7 198.426 518.79 198.998 518.127 cv
199.57 517.477 200.376 517.139 201.403 517.139 cv
f
206.603 517.308 mo
207.773 517.308 li
207.773 524.419 li
206.603 524.419 li
206.603 517.308 li
206.603 514.539 mo
207.773 514.539 li
207.773 516.021 li
206.603 516.021 li
206.603 514.539 li
f
216.132 520.129 mo
216.132 524.419 li
214.962 524.419 li
214.962 520.168 li
214.962 519.492 214.819 518.998 214.559 518.66 cv
214.299 518.322 213.909 518.153 213.389 518.153 cv
212.752 518.153 212.258 518.361 211.894 518.764 cv
211.53 519.167 211.348 519.713 211.348 520.402 cv
211.348 524.419 li
210.178 524.419 li
210.178 517.308 li
211.348 517.308 li
211.348 518.413 li
211.621 517.997 211.946 517.672 212.336 517.464 cv
212.713 517.256 213.155 517.139 213.649 517.139 cv
214.455 517.139 215.079 517.399 215.495 517.906 cv
215.911 518.413 216.132 519.154 216.132 520.129 cv
f
219.616 515.293 mo
219.616 517.308 li
222.021 517.308 li
222.021 518.218 li
219.616 518.218 li
219.616 522.079 li
219.616 522.664 219.694 523.041 219.85 523.197 cv
220.006 523.366 220.331 523.444 220.825 523.444 cv
222.021 523.444 li
222.021 524.419 li
220.825 524.419 li
219.915 524.419 219.291 524.25 218.953 523.912 cv
218.615 523.574 218.446 522.963 218.446 522.079 cv
218.446 518.218 li
217.588 518.218 li
217.588 517.308 li
218.446 517.308 li
218.446 515.293 li
219.616 515.293 li
f
223.373 514.552 mo
224.387 514.552 li
225.011 515.553 225.492 516.528 225.804 517.49 cv
226.116 518.452 226.285 519.401 226.285 520.337 cv
226.285 521.286 226.116 522.235 225.804 523.197 cv
225.492 524.159 225.011 525.121 224.387 526.122 cv
223.373 526.122 li
223.932 525.147 224.348 524.198 224.634 523.236 cv
224.907 522.287 225.05 521.325 225.05 520.337 cv
225.05 519.362 224.907 518.4 224.634 517.451 cv
224.348 516.502 223.932 515.54 223.373 514.552 cv
f
77.7997 538.947 mo
103.8 538.947 li
.0993362 1 1 .024445 cmyk
@
119.322 534.891 mo
118.386 534.891 117.645 535.242 117.099 535.931 cv
116.553 536.633 116.28 537.569 116.28 538.765 cv
116.28 539.961 116.553 540.91 117.099 541.599 cv
117.645 542.301 118.386 542.639 119.322 542.639 cv
120.245 542.639 120.986 542.301 121.532 541.599 cv
122.078 540.91 122.351 539.961 122.351 538.765 cv
122.351 537.569 122.078 536.633 121.532 535.931 cv
120.986 535.242 120.245 534.891 119.322 534.891 cv
119.322 533.851 mo
120.648 533.851 121.701 534.306 122.507 535.19 cv
123.3 536.074 123.703 537.27 123.703 538.765 cv
123.703 540.273 123.3 541.456 122.507 542.34 cv
121.701 543.224 120.648 543.666 119.322 543.666 cv
117.983 543.666 116.917 543.224 116.124 542.34 cv
115.318 541.456 114.928 540.273 114.928 538.765 cv
114.928 537.27 115.318 536.074 116.124 535.19 cv
116.917 534.306 117.983 533.851 119.322 533.851 cv
1 /0 /CSD get_res sepcs
1 sep
f
125.536 540.689 mo
125.536 536.386 li
126.706 536.386 li
126.706 540.65 li
126.706 541.326 126.836 541.82 127.096 542.158 cv
127.356 542.496 127.746 542.665 128.279 542.665 cv
128.903 542.665 129.41 542.47 129.774 542.067 cv
130.138 541.664 130.32 541.118 130.32 540.416 cv
130.32 536.386 li
131.49 536.386 li
131.49 543.497 li
130.32 543.497 li
130.32 542.405 li
130.034 542.847 129.696 543.159 129.332 543.367 cv
128.955 543.562 128.526 543.666 128.032 543.666 cv
127.213 543.666 126.589 543.419 126.173 542.912 cv
125.744 542.418 125.536 541.677 125.536 540.689 cv
128.474 536.217 mo
128.474 536.217 li
f
138.016 537.478 mo
137.886 537.4 137.743 537.348 137.587 537.309 cv
137.431 537.283 137.262 537.257 137.08 537.257 cv
136.417 537.257 135.91 537.478 135.559 537.907 cv
135.195 538.336 135.026 538.947 135.026 539.753 cv
135.026 543.497 li
133.856 543.497 li
133.856 536.386 li
135.026 536.386 li
135.026 537.491 li
135.26 537.062 135.585 536.737 135.975 536.529 cv
136.365 536.321 136.846 536.217 137.418 536.217 cv
137.496 536.217 137.587 536.23 137.691 536.23 cv
137.782 536.243 137.886 536.256 138.016 536.282 cv
138.016 537.478 li
f
143.775 536.594 mo
143.775 537.699 li
143.437 537.543 143.099 537.413 142.748 537.322 cv
142.384 537.244 142.02 537.192 141.643 537.192 cv
141.058 537.192 140.616 537.283 140.33 537.465 cv
140.044 537.647 139.901 537.907 139.901 538.258 cv
139.901 538.531 140.005 538.739 140.213 538.895 cv
140.421 539.051 140.837 539.207 141.461 539.337 cv
141.864 539.428 li
142.696 539.61 143.281 539.87 143.632 540.182 cv
143.97 540.507 144.152 540.962 144.152 541.534 cv
144.152 542.197 143.892 542.717 143.372 543.094 cv
142.852 543.484 142.124 543.666 141.214 543.666 cv
140.824 543.666 140.434 543.627 140.018 543.562 cv
139.602 543.497 139.173 543.393 138.718 543.237 cv
138.718 542.028 li
139.147 542.262 139.576 542.431 139.992 542.535 cv
140.408 542.652 140.824 542.704 141.24 542.704 cv
141.786 542.704 142.215 542.613 142.514 542.431 cv
142.8 542.249 142.956 541.976 142.956 541.625 cv
142.956 541.313 142.839 541.066 142.631 540.897 cv
142.423 540.728 141.955 540.559 141.227 540.403 cv
140.824 540.312 li
140.096 540.156 139.563 539.922 139.251 539.61 cv
138.926 539.298 138.77 538.869 138.77 538.31 cv
138.77 537.647 139.004 537.127 139.472 536.763 cv
139.94 536.399 140.616 536.217 141.5 536.217 cv
141.929 536.217 142.332 536.256 142.722 536.321 cv
143.099 536.386 143.45 536.477 143.775 536.594 cv
f
148.819 533.63 mo
148.247 534.618 147.831 535.58 147.558 536.529 cv
147.272 537.478 147.142 538.44 147.142 539.415 cv
147.142 540.403 147.272 541.365 147.558 542.314 cv
147.831 543.276 148.247 544.225 148.819 545.2 cv
147.805 545.2 li
147.168 544.199 146.687 543.237 146.375 542.275 cv
146.063 541.313 145.907 540.364 145.907 539.415 cv
145.907 538.479 146.063 537.53 146.375 536.568 cv
146.687 535.606 147.155 534.631 147.805 533.63 cv
148.819 533.63 li
f
151.133 534.02 mo
156.58 534.02 li
156.58 535.099 li
152.42 535.099 li
152.42 537.894 li
156.177 537.894 li
156.177 538.973 li
152.42 538.973 li
152.42 543.497 li
151.133 543.497 li
151.133 534.02 li
f
158.556 533.617 mo
159.726 533.617 li
159.726 543.497 li
158.556 543.497 li
158.556 533.617 li
f
164.926 537.205 mo
164.302 537.205 163.808 537.452 163.444 537.946 cv
163.08 538.44 162.898 539.103 162.898 539.948 cv
162.898 540.806 163.067 541.469 163.431 541.963 cv
163.795 542.457 164.289 542.691 164.926 542.691 cv
165.55 542.691 166.044 542.457 166.408 541.963 cv
166.772 541.469 166.954 540.806 166.954 539.948 cv
166.954 539.116 166.772 538.44 166.408 537.946 cv
166.044 537.452 165.55 537.205 164.926 537.205 cv
164.926 536.217 mo
165.94 536.217 166.733 536.555 167.318 537.205 cv
167.89 537.868 168.189 538.778 168.189 539.948 cv
168.189 541.118 167.89 542.028 167.318 542.678 cv
166.733 543.341 165.94 543.666 164.926 543.666 cv
163.899 543.666 163.093 543.341 162.521 542.678 cv
161.949 542.028 161.663 541.118 161.663 539.948 cv
161.663 538.778 161.949 537.868 162.521 537.205 cv
163.093 536.555 163.899 536.217 164.926 536.217 cv
f
173.363 539.922 mo
172.414 539.922 171.764 540.039 171.4 540.247 cv
171.036 540.468 170.854 540.832 170.854 541.352 cv
170.854 541.768 170.984 542.106 171.257 542.34 cv
171.53 542.587 171.907 542.704 172.375 542.704 cv
173.025 542.704 173.545 542.483 173.935 542.015 cv
174.325 541.56 174.52 540.949 174.52 540.182 cv
174.52 539.922 li
173.363 539.922 li
175.69 539.441 mo
175.69 543.497 li
174.52 543.497 li
174.52 542.418 li
174.247 542.86 173.909 543.172 173.519 543.367 cv
173.129 543.562 172.635 543.666 172.063 543.666 cv
171.335 543.666 170.75 543.471 170.321 543.068 cv
169.892 542.665 169.684 542.119 169.684 541.43 cv
169.684 540.637 169.944 540.039 170.49 539.623 cv
171.023 539.22 171.816 539.012 172.882 539.012 cv
174.52 539.012 li
174.52 538.895 li
174.52 538.362 174.338 537.946 173.987 537.647 cv
173.636 537.361 173.142 537.205 172.505 537.205 cv
172.089 537.205 171.699 537.257 171.309 537.361 cv
170.919 537.465 170.555 537.608 170.204 537.79 cv
170.204 536.711 li
170.62 536.555 171.036 536.425 171.439 536.347 cv
171.842 536.269 172.232 536.217 172.622 536.217 cv
173.649 536.217 174.416 536.49 174.923 537.023 cv
175.43 537.556 175.69 538.362 175.69 539.441 cv
f
179.252 534.371 mo
179.252 536.386 li
181.657 536.386 li
181.657 537.296 li
179.252 537.296 li
179.252 541.157 li
179.252 541.742 179.33 542.119 179.486 542.275 cv
179.642 542.444 179.967 542.522 180.461 542.522 cv
181.657 542.522 li
181.657 543.497 li
180.461 543.497 li
179.551 543.497 178.927 543.328 178.589 542.99 cv
178.251 542.652 178.082 542.041 178.082 541.157 cv
178.082 537.296 li
177.224 537.296 li
177.224 536.386 li
178.082 536.386 li
178.082 534.371 li
179.252 534.371 li
f
182.606 539.415 mo
186.025 539.415 li
186.025 540.455 li
182.606 540.455 li
182.606 539.415 li
f
189.223 535.073 mo
189.223 538.635 li
190.835 538.635 li
191.433 538.635 191.888 538.492 192.213 538.18 cv
192.538 537.868 192.707 537.426 192.707 536.854 cv
192.707 536.282 192.538 535.853 192.213 535.541 cv
191.888 535.229 191.433 535.073 190.835 535.073 cv
189.223 535.073 li
187.936 534.02 mo
190.835 534.02 li
191.888 534.02 192.694 534.267 193.24 534.748 cv
193.786 535.229 194.059 535.931 194.059 536.854 cv
194.059 537.79 193.786 538.505 193.24 538.973 cv
192.694 539.454 191.888 539.688 190.835 539.688 cv
189.223 539.688 li
189.223 543.497 li
187.936 543.497 li
187.936 534.02 li
f
198.479 537.205 mo
197.855 537.205 197.361 537.452 196.997 537.946 cv
196.633 538.44 196.451 539.103 196.451 539.948 cv
196.451 540.806 196.62 541.469 196.984 541.963 cv
197.348 542.457 197.842 542.691 198.479 542.691 cv
199.103 542.691 199.597 542.457 199.961 541.963 cv
200.325 541.469 200.507 540.806 200.507 539.948 cv
200.507 539.116 200.325 538.44 199.961 537.946 cv
199.597 537.452 199.103 537.205 198.479 537.205 cv
198.479 536.217 mo
199.493 536.217 200.286 536.555 200.871 537.205 cv
201.443 537.868 201.742 538.778 201.742 539.948 cv
201.742 541.118 201.443 542.028 200.871 542.678 cv
200.286 543.341 199.493 543.666 198.479 543.666 cv
197.452 543.666 196.646 543.341 196.074 542.678 cv
195.502 542.028 195.216 541.118 195.216 539.948 cv
195.216 538.778 195.502 537.868 196.074 537.205 cv
196.646 536.555 197.452 536.217 198.479 536.217 cv
f
203.679 536.386 mo
204.849 536.386 li
204.849 543.497 li
203.679 543.497 li
203.679 536.386 li
203.679 533.617 mo
204.849 533.617 li
204.849 535.099 li
203.679 535.099 li
203.679 533.617 li
f
213.207 539.207 mo
213.207 543.497 li
212.037 543.497 li
212.037 539.246 li
212.037 538.57 211.895 538.076 211.634 537.738 cv
211.374 537.4 210.984 537.231 210.464 537.231 cv
209.827 537.231 209.333 537.439 208.969 537.842 cv
208.605 538.245 208.423 538.791 208.423 539.48 cv
208.423 543.497 li
207.253 543.497 li
207.253 536.386 li
208.423 536.386 li
208.423 537.491 li
208.697 537.075 209.021 536.75 209.411 536.542 cv
209.788 536.334 210.23 536.217 210.725 536.217 cv
211.531 536.217 212.154 536.477 212.57 536.984 cv
212.986 537.491 213.207 538.232 213.207 539.207 cv
f
216.692 534.371 mo
216.692 536.386 li
219.097 536.386 li
219.097 537.296 li
216.692 537.296 li
216.692 541.157 li
216.692 541.742 216.77 542.119 216.926 542.275 cv
217.082 542.444 217.407 542.522 217.901 542.522 cv
219.097 542.522 li
219.097 543.497 li
217.901 543.497 li
216.991 543.497 216.367 543.328 216.029 542.99 cv
215.691 542.652 215.522 542.041 215.522 541.157 cv
215.522 537.296 li
214.664 537.296 li
214.664 536.386 li
215.522 536.386 li
215.522 534.371 li
216.692 534.371 li
f
220.449 533.63 mo
221.463 533.63 li
222.087 534.631 222.568 535.606 222.88 536.568 cv
223.192 537.53 223.361 538.479 223.361 539.415 cv
223.361 540.364 223.192 541.313 222.88 542.275 cv
222.568 543.237 222.087 544.199 221.463 545.2 cv
220.449 545.2 li
221.008 544.225 221.424 543.276 221.71 542.314 cv
221.983 541.365 222.126 540.403 222.126 539.415 cv
222.126 538.44 221.983 537.478 221.71 536.529 cv
221.424 535.58 221.008 534.618 220.449 533.63 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
